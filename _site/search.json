[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Trifolder/index.html",
    "href": "posts/Trifolder/index.html",
    "title": "Counting",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing"
  },
  {
    "objectID": "posts/Duofolder/index.html",
    "href": "posts/Duofolder/index.html",
    "title": "Data Summaries",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\nViewing data about Cars…\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\n\nmpg %&gt;% \n  head(10)\n\n# A tibble: 10 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\ninspect(mpg)\n\n\ncategorical variables:  \n          name     class levels   n missing\n1 manufacturer character     15 234       0\n2        model character     38 234       0\n3        trans character     10 234       0\n4          drv character      3 234       0\n5           fl character      5 234       0\n6        class character      7 234       0\n                                   distribution\n1 dodge (15.8%), toyota (14.5%) ...            \n2 caravan 2wd (4.7%) ...                       \n3 auto(l4) (35.5%), manual(m5) (24.8%) ...     \n4 f (45.3%), 4 (44%), r (10.7%)                \n5 r (71.8%), p (22.2%), e (3.4%) ...           \n6 suv (26.5%), compact (20.1%) ...             \n\nquantitative variables:  \n   name   class    min     Q1 median     Q3  max        mean       sd   n\n1 displ numeric    1.6    2.4    3.3    4.6    7    3.471795 1.291959 234\n2  year integer 1999.0 1999.0 2003.5 2008.0 2008 2003.500000 4.509646 234\n3   cyl integer    4.0    4.0    6.0    8.0    8    5.888889 1.611534 234\n4   cty integer    9.0   14.0   17.0   19.0   35   16.858974 4.255946 234\n5   hwy integer   12.0   18.0   24.0   27.0   44   23.440171 5.954643 234\n  missing\n1       0\n2       0\n3       0\n4       0\n5       0\n\n\n\nskim(mpg)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n0\n1\n4\n10\n0\n15\n0\n\n\nmodel\n0\n1\n2\n22\n0\n38\n0\n\n\ntrans\n0\n1\n8\n10\n0\n10\n0\n\n\ndrv\n0\n1\n1\n1\n0\n3\n0\n\n\nfl\n0\n1\n1\n1\n0\n5\n0\n\n\nclass\n0\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n0\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n0\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n0\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n0\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n0\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁\n\n\n\n\n\n\nmpg_modified &lt;- mpg %&gt;% \n  dplyr::mutate(\n    cyl = as_factor(cyl),\n    fl = as_factor(fl),\n    drv = as_factor(drv),\n    class = as_factor(class),\n    trans = as_factor(trans)\n    )\nglimpse(mpg_modified)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;fct&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man…\n$ drv          &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, …\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, …\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\n\nTrying out functions…\n\nmpg_modified %&gt;% filter(class=='suv') \n\n# A tibble: 62 × 11\n   manufacturer model      displ  year cyl   trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;\n 1 chevrolet    c1500 sub…   5.3  2008 8     auto… r        14    20 r     suv  \n 2 chevrolet    c1500 sub…   5.3  2008 8     auto… r        11    15 e     suv  \n 3 chevrolet    c1500 sub…   5.3  2008 8     auto… r        14    20 r     suv  \n 4 chevrolet    c1500 sub…   5.7  1999 8     auto… r        13    17 r     suv  \n 5 chevrolet    c1500 sub…   6    2008 8     auto… r        12    17 r     suv  \n 6 chevrolet    k1500 tah…   5.3  2008 8     auto… 4        14    19 r     suv  \n 7 chevrolet    k1500 tah…   5.3  2008 8     auto… 4        11    14 e     suv  \n 8 chevrolet    k1500 tah…   5.7  1999 8     auto… 4        11    15 r     suv  \n 9 chevrolet    k1500 tah…   6.5  1999 8     auto… 4        14    17 d     suv  \n10 dodge        durango 4…   3.9  1999 6     auto… 4        13    17 r     suv  \n# ℹ 52 more rows\n\n\n\n\nMaking lines on graphs. This one gives highway mileages per each segment in Chevrolet\n\nmpg_modified %&gt;% filter(manufacturer=='chevrolet') %&gt;% \n  gf_line(model~hwy)\n\n\n\n\n\n\n\n\n\n\nLet us look at some more mileage information across manufacturers…\n\nmpg_modified %&gt;%\n  group_by(manufacturer,cyl) %&gt;%\n  summarize(average_hwy = mean(hwy), avg_city= mean(cty), count = n())\n\n`summarise()` has grouped output by 'manufacturer'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 32 × 5\n# Groups:   manufacturer [15]\n   manufacturer cyl   average_hwy avg_city count\n   &lt;chr&gt;        &lt;fct&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 audi         4            28.1     19.1     8\n 2 audi         6            25.3     16.4     9\n 3 audi         8            23       16       1\n 4 chevrolet    4            28.5     20.5     2\n 5 chevrolet    6            27       17.7     3\n 6 chevrolet    8            19.9     13.6    14\n 7 dodge        4            24       18       1\n 8 dodge        6            20.7     15      15\n 9 dodge        8            15.7     11.6    21\n10 ford         6            20.7     15.3    10\n# ℹ 22 more rows\n\n\n\n\nWe can see from above table that regardless of manufacturer, both the City & Highway mileages decrease in cars as cylinders are increased. That makes sense. Also, the highway mileages suffer more than city mileages.\n\n\nOn average, can we say that 6 cylinder Audis & Chevys are better than Dodges & Fords? Most likely. But we only have 3 Chevys. So we need more data do be sure.\n\nmpg_modified %&gt;% filter(manufacturer =='audi') %&gt;% \n  group_by(manufacturer,class,year) %&gt;% \n  summarise(avg_high= mean(hwy), avg_city= mean(cty), count=n())\n\n`summarise()` has grouped output by 'manufacturer', 'class'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 4 × 6\n# Groups:   manufacturer, class [2]\n  manufacturer class    year avg_high avg_city count\n  &lt;chr&gt;        &lt;fct&gt;   &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n1 audi         compact  1999     26.4     17.4     8\n2 audi         compact  2008     27.6     18.6     7\n3 audi         midsize  1999     24       15       1\n4 audi         midsize  2008     24       16.5     2\n\n#The filter command filters out all rows with manufacturers as audi (common sense)\n\n#When you use the group_by function, it makes groups of each each year for each class for each manufacturer.\n#E.g. Here it filtered out all the audis, then made a group for each class of an audi (compact & midsize) and then further made a separate row for each year for both the classes.\n\n# The summarize command takes 2 arguments (New_Column_Name ~ Function) \n#Here it has made an average of highway & city mileages separately for: \n#All compact Audis from 1999\n#All compact Audis from 2008\n#All midsize Audis from 1999\n#All midsize Audis from 2008\n\n#Remember that even if this table only shows 4 rows, that is because they were grouped by class & year. But there are still differences between cylinders, engine displacement, fuel type in the cars & actually there are a lot of Audi types.\n\n\n\nSo the above table helps us understand about avg mileages in Audi car types;\n\n\nBoth highway and city mileages have increased (or remained the same) for both car types from 1999 to 2008. I believe it is expected, as cars become more fuel efficient with technological improvements.\n\n\nBut why has highway mileage in midsize Audis not increased? Let us try to investigate.\n\n\nLook at the count column. We only have data of 1 Audi Midsize from 1999 & 2 from 2008.\n\nmpg_modified %&gt;% filter(manufacturer =='audi', class=='midsize')\n\n# A tibble: 3 × 11\n  manufacturer model      displ  year cyl   trans  drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;\n1 audi         a6 quattro   2.8  1999 6     auto(… 4        15    24 p     mids…\n2 audi         a6 quattro   3.1  2008 6     auto(… 4        17    25 p     mids…\n3 audi         a6 quattro   4.2  2008 8     auto(… 4        16    23 p     mids…\n\n\n\n\nThe cars have from 1999, 2008, 2008 have highway mileages 24,23,25 respectively. So coincidentally, both years average out to 24.\n\n\nThis is why it is better to have a large sample size so we can get more accurate results.\n\n\n====================================================================\n\n\n\nAnalyzing Math Anxiety Data\n\nmath_ax &lt;- read_delim(file = '../../datasets/MathAnxiety.csv', delim = ';')\n\nRows: 599 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (2): Gender, Grade\ndbl (3): AMAS, RCMAS, Arith\nnum (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmath_ax\n\n# A tibble: 599 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1379 Girl   Secondary    23    26     5\n 4  1428 Girl   Secondary    19    18     7\n 5  1356 Boy    Secondary    23    20     1\n 6  1350 Girl   Secondary    27    33     1\n 7  1336 Boy    Secondary    22    23     4\n 8  1393 Boy    Secondary    17    11     7\n 9  1317 Girl   Secondary    28    32     2\n10  1348 Boy    Secondary    20    30     6\n# ℹ 589 more rows\n\n\n\nglimpse(math_ax)\n\nRows: 599\nColumns: 6\n$ Age    &lt;dbl&gt; 1378, 1407, 1379, 1428, 1356, 1350, 1336, 1393, 1317, 1348, 141…\n$ Gender &lt;chr&gt; \"Boy\", \"Boy\", \"Girl\", \"Girl\", \"Boy\", \"Girl\", \"Boy\", \"Boy\", \"Gir…\n$ Grade  &lt;chr&gt; \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\"…\n$ AMAS   &lt;dbl&gt; 9, 18, 23, 19, 23, 27, 22, 17, 28, 20, 16, 20, 21, 36, 16, 27, …\n$ RCMAS  &lt;dbl&gt; 20, 8, 26, 18, 20, 33, 23, 11, 32, 30, 10, 4, 23, 26, 24, 21, 3…\n$ Arith  &lt;dbl&gt; 6, 6, 5, 7, 1, 1, 4, 7, 2, 6, 2, 5, 2, 6, 2, 7, 2, 4, 7, 3, 8, …\n\n\n\ninspect(math_ax)\n\n\ncategorical variables:  \n    name     class levels   n missing\n1 Gender character      2 599       0\n2  Grade character      2 599       0\n                                   distribution\n1 Boy (53.9%), Girl (46.1%)                    \n2 Primary (66.9%), Secondary (33.1%)           \n\nquantitative variables:  \n   name   class min     Q1 median     Q3  max       mean         sd   n missing\n1   Age numeric  37 1061.5   1208 1418.5 1875 1246.49249 223.112183 599       0\n2  AMAS numeric   4   18.0     22   26.5   45   21.98164   6.597962 599       0\n3 RCMAS numeric   1   14.0     19   25.0   41   19.24040   7.566802 599       0\n4 Arith numeric   0    4.0      6    7.0    8    5.30217   2.105220 599       0\n\n\n\nskim(math_ax)\n\n\nData summary\n\n\nName\nmath_ax\n\n\nNumber of rows\n599\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n3\n4\n0\n2\n0\n\n\nGrade\n0\n1\n7\n9\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n1246.49\n223.11\n37\n1061.5\n1208\n1418.5\n1875\n▁▁▇▇▃\n\n\nAMAS\n0\n1\n21.98\n6.60\n4\n18.0\n22\n26.5\n45\n▂▆▇▃▁\n\n\nRCMAS\n0\n1\n19.24\n7.57\n1\n14.0\n19\n25.0\n41\n▂▇▇▅▁\n\n\nArith\n0\n1\n5.30\n2.11\n0\n4.0\n6\n7.0\n8\n▂▃▃▇▇\n\n\n\n\n\n\nmath_ax %&gt;% \n  group_by(Gender, Grade) %&gt;% \n  summarise(avg_amas = mean(AMAS), avg_rcm= mean(RCMAS))\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   Gender [2]\n  Gender Grade     avg_amas avg_rcm\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Boy    Primary       20.9    18.6\n2 Boy    Secondary     21.5    17.4\n3 Girl   Primary       22.7    20.6\n4 Girl   Secondary     23.5    20.3\n\n\n\nBased on this, can we say that girls on average have a higher anxiety than boys their age? Probably. We also know that the math anxiety increases in secondary school as math concepts get tougher.\n\nmath_ax %&gt;% filter( Gender=='Boy')\n\n# A tibble: 323 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1356 Boy    Secondary    23    20     1\n 4  1336 Boy    Secondary    22    23     4\n 5  1393 Boy    Secondary    17    11     7\n 6  1348 Boy    Secondary    20    30     6\n 7  1413 Boy    Secondary    16    10     2\n 8  1580 Boy    Secondary    20     4     5\n 9  1551 Boy    Secondary    21    23     2\n10  1327 Boy    Secondary    36    26     6\n# ℹ 313 more rows\n\n\n\n\nAnd the number of girls & boys in the dataset is close enough. (323 vs 276 ) So if it is the data of a school, it is not like the girls are in the minority and hence not given proper attention while teaching concepts. That is irrelevant.\n\n\n=============================================================================="
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PogBlog",
    "section": "",
    "text": "Data Summaries\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nMapping\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\n\n\n\n\n\n\nInference\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\n\n\n\n\n\n\nGrain\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\n\n\n\n\n\n\nCartoon Samples\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nStudent Degrees\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nTips by Food\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\n\n\n\n\n\n\nPocket Money\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nSchool Scores\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nMovie\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\n\n\n\n\n\n\nQuant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounting\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nEntitled\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Unfolder/index.html",
    "href": "posts/Unfolder/index.html",
    "title": "Entitled",
    "section": "",
    "text": "There are two types of people in this world. Those who can extrapolate from incomplete data…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\n\nbabynames %&gt;% filter(name=='Varad') %&gt;%\n  gf_line(n~year)\n\n\n\n\n\n\n\n\n\nbabynames %&gt;% filter(name ==\"Varad\"| name ==\"Warad\"|name ==\"Varadh\") \n\n# A tibble: 7 × 5\n   year sex   name      n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n1  2007 M     Varad     5 0.00000226\n2  2012 M     Varad     7 0.00000346\n3  2013 M     Varad     6 0.00000298\n4  2014 M     Varad     6 0.00000293\n5  2015 M     Varad     7 0.00000343\n6  2016 M     Varad     5 0.00000248\n7  2017 M     Varad     6 0.00000306"
  },
  {
    "objectID": "posts/Unfolder/index.html#introduction--data-analysis",
    "href": "posts/Unfolder/index.html#introduction--data-analysis",
    "title": "Entitled",
    "section": "",
    "text": "There are two types of people in this world. Those who can extrapolate from incomplete data…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\n\nbabynames %&gt;% filter(name=='Varad') %&gt;%\n  gf_line(n~year)\n\n\n\n\n\n\n\n\n\nbabynames %&gt;% filter(name ==\"Varad\"| name ==\"Warad\"|name ==\"Varadh\") \n\n# A tibble: 7 × 5\n   year sex   name      n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n1  2007 M     Varad     5 0.00000226\n2  2012 M     Varad     7 0.00000346\n3  2013 M     Varad     6 0.00000298\n4  2014 M     Varad     6 0.00000293\n5  2015 M     Varad     7 0.00000343\n6  2016 M     Varad     5 0.00000248\n7  2017 M     Varad     6 0.00000306"
  },
  {
    "objectID": "posts/Quartofolder/index.html",
    "href": "posts/Quartofolder/index.html",
    "title": "Quant",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable) # Fast stats for multiple variables in table form\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n(diamonds)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\n##\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n## More bins\ngf_histogram(~price,\n  data = diamonds,\n  bins = 100\n#Bins is basically the number of classes. Note that the Y Axis also changes because as we increase number of price classes, each class has a smaller price range. So the number of diamonds in each price range reduces.\n  \n) %&gt;%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n##\ndiamonds %&gt;%\n  gf_histogram(~carat) %&gt;%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat,\n    bins = 100\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, fill = ~cut, data = diamonds) %&gt;%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut) %&gt;% \n  ## The wrap function just takes each category within the same variable (Categories like 'Fair','Good' from the Variable 'Cut') and makes a separate graph for each category. (Similar to the 'variable | variable' function, except that one uses multiple variables and this uses only one)\n  ##Alpha is the opacity\n  \n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n    #Gf_Labs is for altering the title & text\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n    ## Gf_theme is for altering the aesthetics\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust decides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 4) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 2 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_facet_wrap(~cut, nrow = 2) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_facet_wrap(~cut, nrow = 1) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n(race_df)\n\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\n(rank_df)\n\n# A tibble: 137,803 × 8\n   race_year_id  rank runner      time    age gender nationality time_in_seconds\n          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1        68140     1 VERHEUL Ja… 26H …    30 M      GBR                   95725\n 2        68140     2 MOULDING J… 27H …    43 M      GBR                   97229\n 3        68140     3 RICHARDSON… 28H …    38 M      GBR                  103747\n 4        68140     4 DYSON Fiona 30H …    55 W      GBR                  111217\n 5        68140     5 FRONTERAS … 32H …    48 W      GBR                  117981\n 6        68140     6 THOMAS Lei… 32H …    31 M      GBR                  118000\n 7        68140     7 SHORT Debo… 33H …    55 W      GBR                  120601\n 8        68140     8 CROSSLEY C… 33H …    40 W      GBR                  120803\n 9        68140     9 BUTCHER Ke… 34H …    47 M      GBR                  125656\n10        68140    10 Hendry Bill 34H …    29 M      GBR                  125979\n# ℹ 137,793 more rows\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n#Favstats gives common stats such as median & mode for that variable\n\n\n##\nrace_df %&gt;%\n  favstats(~participants, data = .)\n\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n\n\n\n##\nrank_df %&gt;% \n  drop_na() %&gt;% \n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n\n\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n\n#So Crosstable is like Drop_na but you can have the stats as subrows under a variable row. I.E It compares subcategories of variables across stats (The variables on left side of tilde~ become rows & the subgroups under the variable on right side of tilde~ become columns), i.e. (Here Time & Age are variables on Y Axis & Stats as subrows. It has Gender as a primary column & M/F as subcolumns)\n\n#The Flex_table simply makes the table in a readable form\n\n\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) \n\n# A tibble: 8 × 6\n  .id             label           variable   M                       W     `NA` \n  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;                   &lt;chr&gt; &lt;chr&gt;\n1 time_in_seconds time_in_seconds Min / Max  3600.0 / 2.9e+05        9191… 8131…\n2 time_in_seconds time_in_seconds Med [IQR]  1.2e+05 [9.7e+04;1.5e+… 1.1e… 1.2e…\n3 time_in_seconds time_in_seconds Mean (std) 1.2e+05 (3.8e+04)       1.2e… 1.2e…\n4 time_in_seconds time_in_seconds N (NA)     101643 (15073)          1834… 28 (…\n5 age             age             Min / Max  0 / 133.0               0 / … 29.0…\n6 age             age             Med [IQR]  47.0 [40.0;53.0]        45.0… 40.5…\n7 age             age             Mean (std) 46.4 (10.2)             45.3… 41.7…\n8 age             age             N (NA)     116716 (0)              2105… 30 (…\n\n#Without using the Flex_table command\n\n\n#Which countries host the maximum number of races? \n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n\n\n#Which countries send the maximum number of participants??\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\n\n#Which countries have the maximum number of winners (top 3 ranks)?\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n#Remember in c(i,j,k) , the 'c' combines the elements inside & treats it as a list. So then it checks if the rank is included in the whole list using the %in% command.\n\n\n#Which countries have had the most top-3 finishes in the longest distance race?\n\n#Here we see we have ranks in one dataset, and race details in another! How do we do this now? We have to JOIN the two data frames into one data frame, using a common variable that uniquely identifies observations in both datasets.\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% \n  # total participants in longest 4 races\n  \n  #The . on left side of ~ basically considers the 'aforementioned' dataset, which in this case is race_df. Since we already told it to consider race_df in longest_races, we don't have to specify the name race_df again.\n  \n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n#Join function connects both datasets, similar to SQL\n\n\n#Familiar Histogram\n#Bins is number of classes\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n#Time 1e+05 seconds basically means \n\n\n#What is the distribution of race distances?\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n#The races with 0 distance were probably cancelled\n\n\n#For all races that have a distance around 150, what is the distribution of finishing times? Can these be split/facetted using start_time of the race (i.e. morning / evening) ?\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n#Let’s convert start_time into a factor with levels: early_morning(0200:0600), late_morning(0600:1000), midday(1000:1400), afternoon(1400: 1800), evening(1800:2200), and night(2200:0200)\n\n\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")\n\n\n\n\n\n\n\n#We see that finish times tend to be longer for afternoon and evening start races; these are lower for early morning and night time starts. Mid-day starts show a curious double hump in finish times that should be studied.\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  )"
  },
  {
    "objectID": "posts/Trifolder/index.html#taxi-data-in-united-states",
    "href": "posts/Trifolder/index.html#taxi-data-in-united-states",
    "title": "Counting",
    "section": "Taxi Data in United States",
    "text": "Taxi Data in United States\n\ntaxi &lt;- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nhead(taxi)\n\n  rownames tip distance              company local dow month hour\n1        1 yes    17.19 Chicago Independents    no Thu   Feb   16\n2        2 yes     0.88         City Service   yes Thu   Mar    8\n3        3 yes    18.11                other    no Mon   Feb   18\n4        4 yes    20.70 Chicago Independents    no Mon   Apr    8\n5        5 yes    12.23 Chicago Independents    no Sun   Mar   21\n6        6 yes     0.94             Sun Taxi   yes Sat   Apr   23\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames integer   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour integer   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;int&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\n\nWe need to modify a few variables such as DoW, Local & Months into Factors so we can process them\n\ntaxi_modified &lt;- taxi %&gt;% \n  mutate(\n    dow= factor(dow,\n    levels= c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n    labels= c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),          \n    ordered= TRUE\n    ),\n    \n    \n    local= factor(local,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Yes\",\"No\"),\n    ordered= TRUE\n    ),\n    \n    month= factor(month,\n    levels= c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n    labels= c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n    ordered= TRUE\n    )\n  )\n\nglimpse(taxi_modified)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; No, Yes, No, No, No, Yes, No, No, No, No, No, No, No, Yes, No…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;int&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\n\nNow Let’s Plot Stuff…\n\nCounting rides with or without a Tip:\n\ngf_bar(~ tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data from\n\n\n\nNow we have to check if the tips are local or not. So we are adding another variable to the graph, by changing the color…\n\ngf_bar(~ tip, color = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only. [Color= ~Variable_Name] Tells which variable to colorize\n\n#Gf labs is for altering text & titles\n\n\n\nDoes not look good, does it? Because the color command is only for outline. If we want to color the full bar, we use the ‘fill’ command…\n\ngf_bar(~ tip, fill = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nMuch Better!\n\n\nWhat if we want the data of all local rides & then see how much of them tipped? Let us try that.\n\ngf_bar(~ local, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nAs you can see, we just put the ‘locality’ variable on X Axis. We can change graphs using these tools, if we have the right questions to ask.\n\n\nJust how many variables can we add to the graph? You can only use one on each axis, one for outline color & one for fill…\n\ngf_bar(~ dow, fill = ~tip, color = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#Here we have used Color & Fill both at the same time\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nThat… is chaotic good.\n\n\nLet’s keep it simple and keep the Tips on X Axis and segregate the Locality by filled color. But I don’t what the color divided graphs on top of each other. How to shift them? We use the Dodge command;\n\ngf_bar(~ tip, fill = ~local,position=\"dodge\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command under position places colorized bar graphs beside each other instead of on top\n\n#gf_labs is for altering text & titles\n\n\n\nHow convenient.\n\n\nBut you might be thinking, what if I want to know actually how much of the tips are coming from local rides and how many outside? You want to know the proportion, not the actual numbers. For that, we can make bars the same size and then see the ratios. (Note that in this case, we cannot use the dodge command)\n\ngf_bar(~ tip, fill = ~local, position=\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top\n\n#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages\n\n##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION\n\n#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE\n#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE\n\n#gf_labs is for altering text & titles\n\n\n\nNow we can actually see that whenever the cab is tipped, it is more likely to be interstate & not local. And also, whenever it is not tipped, it is slightly more likely to be local. But this is not enough to conclude that local rides always have less tips.\n\n\nLet us now see proportions of tips according to taxi services.\n\ngf_bar(~ company, fill = ~tip, position=\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nLooks like Chicago Independence is most tipped by proportion in general.\n\n\nHow about we factor in the hour of day?\n\ngf_bar(~hour , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nAccording to the graph, most tips happen in the afternoon & least at midnight. But this is because most rides happen in the afternoon! Let us see the proportions again.\n\ngf_bar(~hour , fill = ~tip,position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nWell well well. Looks like the highest proportion of tips actually occur when the driver & the taxi both burn midnight oil… People are more grateful for catching a ride at these hours.\n\n\nLooking at Tips by Month;\n\ngf_bar(~month , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nAgain, proportions;\n\ngf_bar(~month , fill = ~tip, position='fill', data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nEh, the proportions of Tips is basically same in all months of the first quadrimester of the year.\n\n\nNow, I want to see the number of tips on every day of every month separately:(E.g. Jan Mondays vs Feb Mondays)\n\ngf_bar(~month | dow , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#When you put 2 variables after tilde~, [Var_1 | Var_2], it makes separate graphs based on Var_2 & each graph has Var_1 on X Axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top\n\n#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages\n\n##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION\n\n#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE\n#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE\n\n\n#gf_labs is for altering text & titles\n\n\n\nPerhaps if we wanted to see an average per month, we should sort the months according to that and put days on X-Axis instead?\n\ngf_bar(~dow | month , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nNow instead of months, let us separate it by Taxi Services\n\ngf_bar(~dow | company , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips by Company & Day\")\n\n\n\n\n\n\n\n\n\n\nAnd now I want to see the actual number of taxi rides per day for each service and not the tips;\n\ngf_bar(~dow | company ,  data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts\")\n\n\n\n\n\n\n\n\n\n\nLooks like among the listed services, (not the Others) Taxi Affiliation Services have most rides on average in a week.\n\n\nWhat if switched variables on X-Axis & the graphs?\n\ngf_bar(~company | dow ,  data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts\")\n\n\n\n\n\n\n\n\n\n\nWoops. While this data may be true, it might not be usually be required. Also it is PAINFUL to read.\n\n\nIf I want to see the proportion of Tips per Day & by Company?\n\ngf_bar(~dow | company , fill = ~tip, position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips Proportion by Company & Day\")\n\n\n\n\n\n\n\n\n\n\nFrom this, can we say that Sunday is most tipped day (proportion of tips to number of rides) for every service? Yeah.\n\n\nWould be a shame if someone switched the location of variables…\n\ngf_bar(~company | dow , fill = ~tip, position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips Proportion by Company & Day\")\n\n\n\n\n\n\n\n\n\n\n*Evil Laughter* Read the graph at your own risk.\n\n\n\n===================================================================="
  },
  {
    "objectID": "posts/Trifolder/index.html#now-onto-a-new-data-set",
    "href": "posts/Trifolder/index.html#now-onto-a-new-data-set",
    "title": "Counting",
    "section": "Now, onto a new data set:",
    "text": "Now, onto a new data set:"
  },
  {
    "objectID": "posts/Trifolder/index.html#chess",
    "href": "posts/Trifolder/index.html#chess",
    "title": "Counting",
    "section": "CHESS!",
    "text": "CHESS!\n\nchesso &lt;- read_delim(file = '../../datasets/openings.csv', delim = ',')\n\nNew names:\nRows: 1884 Columns: 26\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(13): Opening, Colour, ECO, Moves, moves_list, move1w, move1b, move2w, ... dbl\n(12): ...1, Num Games, Perf Rating, Avg Player, Player Win %, Draw %, O... date\n(1): Last Played\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\nchesso\n\n# A tibble: 1,884 × 26\n    ...1 Opening            Colour `Num Games` ECO   `Last Played` `Perf Rating`\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;\n 1     0 Alekhine Defense,… white          692 B03   2018-06-22             2247\n 2     1 Alekhine Defense,… black          228 B02   2018-06-27             2145\n 3     2 Alekhine Defense,… white         6485 B03   2018-07-06             2244\n 4     3 Alekhine Defense,… white          881 B03   2018-06-20             2187\n 5     4 Alekhine Defense,… black          259 B03   2018-05-20             2122\n 6     5 Alekhine Defense,… white         1207 B03   2018-07-01             2243\n 7     6 Alekhine Defense,… black          323 B03   2018-05-10             2231\n 8     7 Alekhine Defense,… black          524 B02   2018-06-29             2032\n 9     8 Alekhine Defense,… white          334 B02   2018-06-27             2205\n10     9 Alekhine Defense,… white          931 B02   2018-07-09             2174\n# ℹ 1,874 more rows\n# ℹ 19 more variables: `Avg Player` &lt;dbl&gt;, `Player Win %` &lt;dbl&gt;,\n#   `Draw %` &lt;dbl&gt;, `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;,\n#   move1w &lt;chr&gt;, move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;,\n#   move3b &lt;chr&gt;, move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;,\n#   `Black_win%` &lt;dbl&gt;, White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\nnames(chesso)\n\n [1] \"...1\"           \"Opening\"        \"Colour\"         \"Num Games\"     \n [5] \"ECO\"            \"Last Played\"    \"Perf Rating\"    \"Avg Player\"    \n [9] \"Player Win %\"   \"Draw %\"         \"Opponent Win %\" \"Moves\"         \n[13] \"moves_list\"     \"move1w\"         \"move1b\"         \"move2w\"        \n[17] \"move2b\"         \"move3w\"         \"move3b\"         \"move4w\"        \n[21] \"move4b\"         \"White_win%\"     \"Black_win%\"     \"White_odds\"    \n[25] \"White_Wins\"     \"Black_Wins\"    \n\n\n\nRemoving the blank column & glimpsing the database…\n\nchesso_modified &lt;-chesso %&gt;% \n  select(-1)\nchesso_modified\n\n# A tibble: 1,884 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alekhine D… white          692 B03   2018-06-22             2247         2225\n 2 Alekhine D… black          228 B02   2018-06-27             2145         2193\n 3 Alekhine D… white         6485 B03   2018-07-06             2244         2194\n 4 Alekhine D… white          881 B03   2018-06-20             2187         2130\n 5 Alekhine D… black          259 B03   2018-05-20             2122         2178\n 6 Alekhine D… white         1207 B03   2018-07-01             2243         2190\n 7 Alekhine D… black          323 B03   2018-05-10             2231         2277\n 8 Alekhine D… black          524 B02   2018-06-29             2032         2077\n 9 Alekhine D… white          334 B02   2018-06-27             2205         2178\n10 Alekhine D… white          931 B02   2018-07-09             2174         2174\n# ℹ 1,874 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\nglimpse(chesso_modified)\n\nRows: 1,884\nColumns: 25\n$ Opening          &lt;chr&gt; \"Alekhine Defense, Balogh Variation\", \"Alekhine Defen…\n$ Colour           &lt;chr&gt; \"white\", \"black\", \"white\", \"white\", \"black\", \"white\",…\n$ `Num Games`      &lt;dbl&gt; 692, 228, 6485, 881, 259, 1207, 323, 524, 334, 931, 5…\n$ ECO              &lt;chr&gt; \"B03\", \"B02\", \"B03\", \"B03\", \"B03\", \"B03\", \"B03\", \"B02…\n$ `Last Played`    &lt;date&gt; 2018-06-22, 2018-06-27, 2018-07-06, 2018-06-20, 2018…\n$ `Perf Rating`    &lt;dbl&gt; 2247, 2145, 2244, 2187, 2122, 2243, 2231, 2032, 2205,…\n$ `Avg Player`     &lt;dbl&gt; 2225, 2193, 2194, 2130, 2178, 2190, 2277, 2077, 2178,…\n$ `Player Win %`   &lt;dbl&gt; 40.8, 29.8, 40.8, 39.7, 37.8, 41.0, 35.9, 42.2, 34.1,…\n$ `Draw %`         &lt;dbl&gt; 24.3, 22.4, 27.7, 23.2, 21.2, 25.9, 24.8, 25.0, 23.6,…\n$ `Opponent Win %` &lt;dbl&gt; 35.0, 47.8, 31.5, 37.1, 40.9, 33.1, 39.3, 32.8, 42.2,…\n$ Moves            &lt;chr&gt; \"1.e4 Nf6 2.e5 Nd5 3.d4 d6 4.Bc4\", \"1.e4 Nf6 2.e5 Ng8…\n$ moves_list       &lt;chr&gt; \"['1.e4', 'Nf6', '2.e5', 'Nd5', '3.d4', 'd6', '4.Bc4'…\n$ move1w           &lt;chr&gt; \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\",…\n$ move1b           &lt;chr&gt; \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6…\n$ move2w           &lt;chr&gt; \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", NA, \"e5\", \"…\n$ move2b           &lt;chr&gt; \"Nd5\", \"Ng8\", \"Nd5\", \"Nd5\", \"Nd5\", \"Nd5\", \"Nd5\", NA, …\n$ move3w           &lt;chr&gt; \"d4\", NA, \"d4\", \"d4\", \"d4\", \"d4\", \"d4\", NA, \"c4\", NA,…\n$ move3b           &lt;chr&gt; \"d6\", NA, \"d6\", \"d6\", \"d6\", \"d6\", \"d6\", NA, \"Nb6\", NA…\n$ move4w           &lt;chr&gt; \"Bc4\", NA, \"c4\", \"c4\", \"c4\", \"c4\", \"c4\", NA, \"c5\", NA…\n$ move4b           &lt;chr&gt; NA, NA, \"Nb6\", \"Nb6\", \"Nb6\", \"Nb6\", \"Nb6\", NA, \"Nd5\",…\n$ `White_win%`     &lt;dbl&gt; 40.8, 47.8, 40.8, 39.7, 40.9, 41.0, 39.3, 32.8, 34.1,…\n$ `Black_win%`     &lt;dbl&gt; 35.0, 29.8, 31.5, 37.1, 37.8, 33.1, 35.9, 42.2, 42.2,…\n$ White_odds       &lt;dbl&gt; 1.1657143, 1.6040268, 1.2952381, 1.0700809, 1.0820106…\n$ White_Wins       &lt;dbl&gt; 282.336, 108.984, 2645.880, 349.757, 105.931, 494.870…\n$ Black_Wins       &lt;dbl&gt; 242.200, 67.944, 2042.775, 326.851, 97.902, 399.517, …\n\n\n\ninspect(chesso_modified)\n\n\ncategorical variables:  \n         name     class levels    n missing\n1     Opening character   1755 1884       0\n2      Colour character      2 1884       0\n3         ECO character    493 1884       0\n4       Moves character   1884 1884       0\n5  moves_list character   1884 1884       0\n6      move1w character     17 1884       0\n7      move1b character     13 1869      15\n8      move2w character     31 1814      70\n9      move2b character     41 1744     140\n10     move3w character     43 1628     256\n11     move3b character     61 1501     383\n12     move4w character     67 1340     544\n13     move4b character     81 1186     698\n                                    distribution\n1   (%) ...                                     \n2  black (52.7%), white (47.3%)                 \n3  A00 (1.8%), B00 (1.2%), B01 (1.2%) ...       \n4  1.00E+03 (0.1%), 1.00E+04 (0.1%) ...         \n5  ['1.00E+03'] (0.1%) ...                      \n6  e4 (50.4%), d4 (39%), c4 (5.5%) ...          \n7  Nf6 (24.4%), e5 (22.8%), d5 (17.8%) ...      \n8  c4 (35.3%), Nf3 (33.1%), d4 (13.2%) ...      \n9  Nc6 (19.4%), e6 (19.2%), d5 (11.6%) ...      \n10 Nc3 (32.3%), d4 (16.1%), Nf3 (11.3%) ...     \n11 Nf6 (20%), cxd4 (11.4%), a6 (6.8%) ...       \n12 Nxd4 (13.7%), Nf3 (12.8%), Nc3 (6.6%) ...    \n13 Nf6 (20.6%), d6 (9.3%), Bg7 (7.3%) ...       \n\nDate variables:  \n         name class      first       last min_diff  max_diff    n missing\n1 Last Played  Date 2010-04-10 2018-07-09   0 days 1799 days 1884       0\n\nquantitative variables:  \n             name   class         min          Q1      median          Q3\n1       Num Games numeric  100.000000  314.750000  788.500000 2225.000000\n2     Perf Rating numeric 1583.000000 2157.000000 2252.500000 2329.000000\n3      Avg Player numeric 1577.000000 2166.000000 2255.000000 2326.000000\n4    Player Win % numeric    7.500000   28.900000   35.100000   41.125000\n5          Draw % numeric    4.000000   24.500000   29.400000   34.625000\n6  Opponent Win % numeric    6.700000   28.900000   34.650000   40.525000\n7      White_win% numeric   13.600000   34.800000   39.100000   44.000000\n8      Black_win% numeric    6.700000   25.100000   29.900000   35.000000\n9      White_odds numeric    0.308642    1.037277    1.325008    1.674116\n10     White_Wins numeric   21.000000  124.740500  310.274000  824.243000\n11     Black_Wins numeric    8.946000   91.026250  230.952000  651.262750\n            max        mean           sd    n missing\n1  22482.000000 1846.019108 2739.1034624 1884       0\n2   2536.000000 2235.945860  135.2603918 1884       0\n3   2492.000000 2236.531847  127.7237108 1884       0\n4     77.600000   35.159395    9.0771393 1884       0\n5     68.500000   29.914066    8.0430433 1884       0\n6     77.500000   34.928715    9.1804503 1884       0\n7     77.600000   39.745701    7.6711076 1884       0\n8     64.800000   30.342410    7.9763046 1884       0\n9      9.810127    1.448725    0.6739913 1884       0\n10  8295.858000  708.835970 1037.0276692 1884       0\n11  8700.534000  557.051955  866.7888314 1884       0\n\n\n\nskim(chesso_modified)\n\n\nData summary\n\n\nName\nchesso_modified\n\n\nNumber of rows\n1884\n\n\nNumber of columns\n25\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nDate\n1\n\n\nnumeric\n11\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOpening\n0\n1.00\n11\n90\n0\n1755\n0\n\n\nColour\n0\n1.00\n5\n5\n0\n2\n0\n\n\nECO\n0\n1.00\n3\n6\n0\n493\n0\n\n\nMoves\n0\n1.00\n4\n143\n0\n1884\n0\n\n\nmoves_list\n0\n1.00\n8\n225\n0\n1884\n0\n\n\nmove1w\n0\n1.00\n2\n6\n0\n17\n0\n\n\nmove1b\n15\n0.99\n2\n3\n0\n13\n0\n\n\nmove2w\n70\n0.96\n2\n4\n0\n31\n0\n\n\nmove2b\n140\n0.93\n2\n4\n0\n41\n0\n\n\nmove3w\n256\n0.86\n2\n4\n0\n43\n0\n\n\nmove3b\n383\n0.80\n2\n4\n0\n61\n0\n\n\nmove4w\n544\n0.71\n2\n5\n0\n67\n0\n\n\nmove4b\n698\n0.63\n2\n5\n0\n81\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nLast Played\n0\n1\n2010-04-10\n2018-07-09\n2018-06-29\n195\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNum Games\n0\n1\n1846.02\n2739.10\n100.00\n314.75\n788.50\n2225.00\n22482.00\n▇▁▁▁▁\n\n\nPerf Rating\n0\n1\n2235.95\n135.26\n1583.00\n2157.00\n2252.50\n2329.00\n2536.00\n▁▁▃▇▃\n\n\nAvg Player\n0\n1\n2236.53\n127.72\n1577.00\n2166.00\n2255.00\n2326.00\n2492.00\n▁▁▂▇▅\n\n\nPlayer Win %\n0\n1\n35.16\n9.08\n7.50\n28.90\n35.10\n41.12\n77.60\n▁▇▇▁▁\n\n\nDraw %\n0\n1\n29.91\n8.04\n4.00\n24.50\n29.40\n34.62\n68.50\n▁▇▇▁▁\n\n\nOpponent Win %\n0\n1\n34.93\n9.18\n6.70\n28.90\n34.65\n40.52\n77.50\n▁▇▇▁▁\n\n\nWhite_win%\n0\n1\n39.75\n7.67\n13.60\n34.80\n39.10\n44.00\n77.60\n▁▇▇▁▁\n\n\nBlack_win%\n0\n1\n30.34\n7.98\n6.70\n25.10\n29.90\n35.00\n64.80\n▁▇▇▁▁\n\n\nWhite_odds\n0\n1\n1.45\n0.67\n0.31\n1.04\n1.33\n1.67\n9.81\n▇▁▁▁▁\n\n\nWhite_Wins\n0\n1\n708.84\n1037.03\n21.00\n124.74\n310.27\n824.24\n8295.86\n▇▁▁▁▁\n\n\nBlack_Wins\n0\n1\n557.05\n866.79\n8.95\n91.03\n230.95\n651.26\n8700.53\n▇▁▁▁▁\n\n\n\n\n\n\n\nNow, I want to find all the variations of a particular opening. So I will have to filter the rows which contain that name in the Opening column, but it is not their entire name. How to do that??\n\n## HOW TO FILTER OPENINGS WHICH INCLUDE A SPECIFIC NAME BUT NOT WHOLE NAME IS SAME?\n## E.g. ALL OPENING VARIATIONS WITH WORDS 'NIMZO-INDIAN' IN THEM? \n\n#chesso_modified %&gt;% filter(dplyr::contains(vars = Opening, \"Nimzo-Indian Defense\"))\n#This does not work\n\n\n#chesso_modified %&gt;% select(contains('Nimzo-Indian Defense'))\n#This does not work\n\n\nchesso_modified %&gt;% filter(grepl('Nimzo-Indian Defense', Opening))\n\n# A tibble: 66 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Nimzo-Indi… white         9585 E32   2018-07-08             2352         2311\n 2 Nimzo-Indi… black         4205 E38   2018-07-09             2246         2286\n 3 Nimzo-Indi… white          380 E39   2018-06-26             2521         2475\n 4 Nimzo-Indi… black         4742 E32   2018-07-08             2380         2411\n 5 Nimzo-Indi… black         1913 E39   2018-06-20             2358         2381\n 6 Nimzo-Indi… black         1483 E33   2018-07-09             2293         2327\n 7 Nimzo-Indi… black         2253 E34   2018-07-08             2291         2328\n 8 Nimzo-Indi… white          696 E37   2018-07-05             2475         2407\n 9 Nimzo-Indi… white          760 E36   2018-07-05             2389         2350\n10 Nimzo-Indi… black          924 E35   2018-07-08             2415         2466\n# ℹ 56 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN\n\n\n\nThere we go! We can also create a mini database which contain all variations of the Vienna Opening:\n\n\n\nVienna Opening\n\n\n\nchesso_vienna &lt;- chesso_modified %&gt;% filter(grepl('Vienna Game', Opening))\n\n#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN\n\n(chesso_vienna) #Database of all variations under the Vienna Game\n\n# A tibble: 21 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Vienna Gam… black          835 C25   2018-07-09             2167         2195\n 2 Vienna Gam… black          188 C26   2018-07-01             2102         2053\n 3 Vienna Gam… white          846 C27   2018-04-29             2154         2104\n 4 Vienna Gam… white         2821 C26   2018-07-08             2293         2267\n 5 Vienna Gam… white          133 C25   2018-07-07             2219         2154\n 6 Vienna Gam… white         1012 C25   2018-07-03             2273         2228\n 7 Vienna Gam… white          527 C26   2018-06-21             2053         2008\n 8 Vienna Gam… white          100 C27   2018-03-02             2258         2231\n 9 Vienna Gam… black          124 C27   2018-04-02             2206         2243\n10 Vienna Gam… black          201 C27   2018-06-30             2103         2076\n# ℹ 11 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\n\nWhich variation of Vienna is played the most?\n\nchesso_vienna %&gt;% arrange(desc(`Num Games`))\n\n# A tibble: 21 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Vienna Gam… white         2821 C26   2018-07-08             2293         2267\n 2 Vienna Gam… white         1012 C25   2018-07-03             2273         2228\n 3 Vienna Gam… black          865 C29   2018-07-09             2179         2193\n 4 Vienna Gam… white          846 C27   2018-04-29             2154         2104\n 5 Vienna Gam… black          835 C25   2018-07-09             2167         2195\n 6 Vienna Gam… white          671 C28   2018-07-02             1999         1941\n 7 Vienna Gam… black          546 C29   2018-07-06             2235         2259\n 8 Vienna Gam… white          527 C26   2018-06-21             2053         2008\n 9 Vienna Gam… white          523 C29   2018-07-01             2189         2159\n10 Vienna Gam… black          327 C26   2018-05-08             2132         2156\n# ℹ 11 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\n\nSo apparently the Mieses- Falkbeer Variation is played most often among all Vienna Games:\n\n\n\nVienna Game Mieses, Falkbeer Variation\n\n\n\n\nLet’s plot the Opening v/s Number of Games Bar Graph…\n\n#chesso_vienna %&gt;%\n  #gf_histogram( ~ `Num Games` , fill = ~ Colour) %&gt;%\n # gf_labs(\n  #  title = \"Openings\",\n  #  caption = \"Vienna\"\n # )\n\n#This code does not give desired result\n\n\n#chesso_vienna %&gt;% \n # gf_line(Opening ~ `Num Games`)\n\n#This code does not give desired result\n\n\n  #gf_bar( Opening ~ 'Num Games', data = chesso_vienna)\n\n  #This code does not give desired result\n\n\nlibrary(ggplot2)\n\n# Assuming 'chesso_vienna' has a column 'Opening' for opening names and 'Num_Games' for the number of games\nggplot(chesso_vienna, aes(x = Opening, y = `Num Games`)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels if needed\n  labs(x = \"Opening Names\", y = \"Number of Games\", title = \"Number of Games per Opening\")\n\n\n\n\n\n\n\n#I used ChatGPT to write this code as I could not figure it myself after numerous tries\n\n\n\nFinally! We have got the information of all openings vs the amount of times they were played."
  },
  {
    "objectID": "posts/Pentafolder/index.html",
    "href": "posts/Pentafolder/index.html",
    "title": "School Scores",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\nlibrary(GGally)\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\nlibrary(ggplot2)\n\n\n\n\nscore&lt;- read.csv(file = '../../datasets/school-scores-data.csv')\n\nhead(score)\n\n  Year State.Code State.Name Total.Math Total.Test.takers Total.Verbal\n1 2005         AL    Alabama        559              3985          567\n2 2005         AK     Alaska        519              3996          523\n3 2005         AZ    Arizona        530             18184          526\n4 2005         AR   Arkansas        552              1600          563\n5 2005         CA California        522            186552          504\n6 2005         CO   Colorado        560             11990          560\n  Academic.Subjects.Arts.Music.Average.GPA\n1                                     3.92\n2                                     3.76\n3                                     3.85\n4                                     3.90\n5                                     3.76\n6                                     3.88\n  Academic.Subjects.Arts.Music.Average.Years\n1                                        2.2\n2                                        1.9\n3                                        2.1\n4                                        2.2\n5                                        1.8\n6                                        2.2\n  Academic.Subjects.English.Average.GPA Academic.Subjects.English.Average.Years\n1                                  3.53                                     3.9\n2                                  3.35                                     3.9\n3                                  3.45                                     3.9\n4                                  3.61                                     4.0\n5                                  3.32                                     3.8\n6                                  3.49                                     4.0\n  Academic.Subjects.Foreign.Languages.Average.GPA\n1                                            3.54\n2                                            3.34\n3                                            3.41\n4                                            3.64\n5                                            3.29\n6                                            3.41\n  Academic.Subjects.Foreign.Languages.Average.Years\n1                                               2.6\n2                                               2.1\n3                                               2.6\n4                                               2.6\n5                                               2.8\n6                                               3.1\n  Academic.Subjects.Mathematics.Average.GPA\n1                                      3.41\n2                                      3.06\n3                                      3.25\n4                                      3.46\n5                                      3.05\n6                                      3.33\n  Academic.Subjects.Mathematics.Average.Years\n1                                         4.0\n2                                         3.5\n3                                         3.9\n4                                         4.1\n5                                         3.7\n6                                         3.9\n  Academic.Subjects.Natural.Sciences.Average.GPA\n1                                           3.52\n2                                           3.25\n3                                           3.43\n4                                           3.55\n5                                           3.20\n6                                           3.43\n  Academic.Subjects.Natural.Sciences.Average.Years\n1                                              3.9\n2                                              3.2\n3                                              3.4\n4                                              3.7\n5                                              3.2\n6                                              3.7\n  Academic.Subjects.Social.Sciences.History.Average.GPA\n1                                                  3.59\n2                                                  3.39\n3                                                  3.55\n4                                                  3.67\n5                                                  3.38\n6                                                  3.56\n  Academic.Subjects.Social.Sciences.History.Average.Years\n1                                                     3.9\n2                                                     3.4\n3                                                     3.3\n4                                                     3.6\n5                                                     3.3\n6                                                     3.7\n  Family.Income.Between.20.40k.Math Family.Income.Between.20.40k.Test.takers\n1                               513                                      324\n2                               492                                      401\n3                               498                                     2121\n4                               513                                      180\n5                               477                                    26161\n6                               533                                      948\n  Family.Income.Between.20.40k.Verbal Family.Income.Between.40.60k.Math\n1                                 527                               539\n2                                 500                               517\n3                                 495                               520\n4                                 526                               543\n5                                 458                               506\n6                                 535                               543\n  Family.Income.Between.40.60k.Test.takers Family.Income.Between.40.60k.Verbal\n1                                      442                                 551\n2                                      539                                 522\n3                                     2270                                 518\n4                                      245                                 555\n5                                    18347                                 494\n6                                     1287                                 548\n  Family.Income.Between.60.80k.Math Family.Income.Between.60.80k.Test.takers\n1                               550                                      473\n2                               513                                      603\n3                               524                                     2372\n4                               553                                      227\n5                               521                                    17937\n6                               553                                     1550\n  Family.Income.Between.60.80k.Verbal Family.Income.Between.80.100k.Math\n1                                 564                                566\n2                                 519                                528\n3                                 523                                534\n4                                 570                                570\n5                                 511                                535\n6                                 552                                562\n  Family.Income.Between.80.100k.Test.takers\n1                                       475\n2                                       444\n3                                      1866\n4                                       147\n5                                     14120\n6                                      1427\n  Family.Income.Between.80.100k.Verbal Family.Income.Less.than.20k.Math\n1                                  577                              462\n2                                  534                              464\n3                                  533                              485\n4                                  580                              489\n5                                  525                              451\n6                                  560                              514\n  Family.Income.Less.than.20k.Test.takers Family.Income.Less.than.20k.Verbal\n1                                     175                                474\n2                                     191                                467\n3                                     891                                474\n4                                     107                                486\n5                                   19323                                421\n6                                     324                                505\n  Family.Income.More.than.100k.Math Family.Income.More.than.100k.Test.takers\n1                               588                                      980\n2                               541                                      540\n3                               554                                     3083\n4                               572                                      314\n5                               566                                    27984\n6                               574                                     2662\n  Family.Income.More.than.100k.Verbal GPA.A.minus.Math GPA.A.minus.Test.takers\n1                                 590              569                     724\n2                                 544              544                     673\n3                                 546              541                    3334\n4                                 589              559                     298\n5                                 551              562                   30545\n6                                 568              573                    2323\n  GPA.A.minus.Verbal GPA.A.plus.Math GPA.A.plus.Test.takers GPA.A.plus.Verbal\n1                575             622                    563               623\n2                546             600                    173               604\n3                535             605                   1684               593\n4                572             629                    273               639\n5                538             625                   7502               603\n6                570             627                   1098               614\n  GPA.A.Math GPA.A.Test.takers GPA.A.Verbal GPA.B.Math GPA.B.Test.takers\n1        600              1032          608        514              1253\n2        580               671          578        492              1622\n3        571              3854          563        498              7193\n4        579               457          583        492               437\n5        592             25546          565        494             84659\n6        602              2736          598        526              4312\n  GPA.B.Verbal GPA.C.Math GPA.C.Test.takers GPA.C.Verbal GPA.D.or.lower.Math\n1          525        436               188          451                   0\n2          499        466               418          472                 424\n3          499        458              1184          464                 439\n4          511        419                57          436                   0\n5          480        434             18839          427                 419\n6          529        484               732          489                 457\n  GPA.D.or.lower.Test.takers GPA.D.or.lower.Verbal GPA.No.response.Math\n1                          0                     0                    0\n2                         12                   466                    0\n3                         16                   435                    0\n4                          0                     0                    0\n5                        240                   408                    0\n6                         12                   462                    0\n  GPA.No.response.Test.takers GPA.No.response.Verbal Gender.Female.Math\n1                         225                      0                538\n2                         427                      0                505\n3                         919                      0                513\n4                          78                      0                536\n5                       19221                      0                504\n6                         777                      0                546\n  Gender.Female.Test.takers Gender.Female.Verbal Gender.Male.Math\n1                      2072                  561              582\n2                      2161                  521              535\n3                      9806                  522              549\n4                       859                  558              570\n5                    102944                  499              543\n6                      6407                  558              577\n  Gender.Male.Test.takers Gender.Male.Verbal\n1                    1913                574\n2                    1835                526\n3                    8378                531\n4                     741                570\n5                   83608                510\n6                    5583                561\n  Score.Ranges.Between.200.to.300.Math.Females\n1                                           22\n2                                           30\n3                                          119\n4                                           12\n5                                         2978\n6                                           40\n  Score.Ranges.Between.200.to.300.Math.Males\n1                                         10\n2                                         20\n3                                         72\n4                                          7\n5                                       1453\n6                                         24\n  Score.Ranges.Between.200.to.300.Math.Total\n1                                         32\n2                                         50\n3                                        191\n4                                         19\n5                                       4431\n6                                         64\n  Score.Ranges.Between.200.to.300.Verbal.Females\n1                                             14\n2                                             26\n3                                            115\n4                                              9\n5                                           3382\n6                                             39\n  Score.Ranges.Between.200.to.300.Verbal.Males\n1                                           17\n2                                           26\n3                                           86\n4                                            3\n5                                         2433\n6                                           22\n  Score.Ranges.Between.200.to.300.Verbal.Total\n1                                           31\n2                                           52\n3                                          201\n4                                           12\n5                                         5815\n6                                           61\n  Score.Ranges.Between.300.to.400.Math.Females\n1                                          173\n2                                          233\n3                                          881\n4                                           68\n5                                        14595\n6                                          313\n  Score.Ranges.Between.300.to.400.Math.Males\n1                                         93\n2                                        153\n3                                        450\n4                                         31\n5                                       7159\n6                                        202\n  Score.Ranges.Between.300.to.400.Math.Total\n1                                        266\n2                                        386\n3                                       1331\n4                                         99\n5                                      21754\n6                                        515\n  Score.Ranges.Between.300.to.400.Verbal.Females\n1                                            123\n2                                            218\n3                                            739\n4                                             46\n5                                          15386\n6                                            257\n  Score.Ranges.Between.300.to.400.Verbal.Males\n1                                           84\n2                                          171\n3                                          613\n4                                           42\n5                                        10784\n6                                          212\n  Score.Ranges.Between.300.to.400.Verbal.Total\n1                                          207\n2                                          389\n3                                         1352\n4                                           88\n5                                        26170\n6                                          469\n  Score.Ranges.Between.400.to.500.Math.Females\n1                                          514\n2                                          696\n3                                         3215\n4                                          210\n5                                        31530\n6                                         1529\n  Score.Ranges.Between.400.to.500.Math.Males\n1                                        293\n2                                        485\n3                                       1948\n4                                        137\n5                                      20172\n6                                        927\n  Score.Ranges.Between.400.to.500.Math.Total\n1                                        807\n2                                       1181\n3                                       5163\n4                                        347\n5                                      51702\n6                                       2456\n  Score.Ranges.Between.400.to.500.Verbal.Females\n1                                            430\n2                                            656\n3                                           3048\n4                                            183\n5                                          32897\n6                                           1343\n  Score.Ranges.Between.400.to.500.Verbal.Males\n1                                          332\n2                                          552\n3                                         2398\n4                                          141\n5                                        25260\n6                                         1140\n  Score.Ranges.Between.400.to.500.Verbal.Total\n1                                          762\n2                                         1208\n3                                         5446\n4                                          324\n5                                        58157\n6                                         2483\n  Score.Ranges.Between.500.to.600.Math.Females\n1                                          722\n2                                          813\n3                                         3576\n4                                          316\n5                                        30765\n6                                         2524\n  Score.Ranges.Between.500.to.600.Math.Males\n1                                        614\n2                                        616\n3                                       3152\n4                                        244\n5                                      26052\n6                                       1889\n  Score.Ranges.Between.500.to.600.Math.Total\n1                                       1336\n2                                       1429\n3                                       6728\n4                                        560\n5                                      56817\n6                                       4413\n  Score.Ranges.Between.500.to.600.Verbal.Females\n1                                            690\n2                                            729\n3                                           3661\n4                                            302\n5                                          30190\n6                                           2529\n  Score.Ranges.Between.500.to.600.Verbal.Males\n1                                          617\n2                                          596\n3                                         3101\n4                                          236\n5                                        25399\n6                                         2125\n  Score.Ranges.Between.500.to.600.Verbal.Total\n1                                         1307\n2                                         1325\n3                                         6762\n4                                          538\n5                                        55589\n6                                         4654\n  Score.Ranges.Between.600.to.700.Math.Females\n1                                          485\n2                                          342\n3                                         1688\n4                                          204\n5                                        17625\n6                                         1619\n  Score.Ranges.Between.600.to.700.Math.Males\n1                                        611\n2                                        445\n3                                       2126\n4                                        239\n5                                      19980\n6                                       1864\n  Score.Ranges.Between.600.to.700.Math.Total\n1                                       1096\n2                                        787\n3                                       3814\n4                                        443\n5                                      37605\n6                                       3483\n  Score.Ranges.Between.600.to.700.Verbal.Females\n1                                            596\n2                                            423\n3                                           1831\n4                                            242\n5                                          16078\n6                                           1708\n  Score.Ranges.Between.600.to.700.Verbal.Males\n1                                          613\n2                                          375\n3                                         1679\n4                                          226\n5                                        14966\n6                                         1610\n  Score.Ranges.Between.600.to.700.Verbal.Total\n1                                         1209\n2                                          798\n3                                         3510\n4                                          468\n5                                        31044\n6                                         3318\n  Score.Ranges.Between.700.to.800.Math.Females\n1                                          156\n2                                           47\n3                                          327\n4                                           49\n5                                         5451\n6                                          382\n  Score.Ranges.Between.700.to.800.Math.Males\n1                                        292\n2                                        116\n3                                        630\n4                                         83\n5                                       8792\n6                                        677\n  Score.Ranges.Between.700.to.800.Math.Total\n1                                        448\n2                                        163\n3                                        957\n4                                        132\n5                                      14243\n6                                       1059\n  Score.Ranges.Between.700.to.800.Verbal.Females\n1                                            219\n2                                            109\n3                                            412\n4                                             77\n5                                           5011\n6                                            531\n  Score.Ranges.Between.700.to.800.Verbal.Males\n1                                          250\n2                                          115\n3                                          501\n4                                           93\n5                                         4766\n6                                          474\n  Score.Ranges.Between.700.to.800.Verbal.Total\n1                                          469\n2                                          224\n3                                          913\n4                                          170\n5                                         9777\n6                                         1005\n\n\n\nhead(inspect(score))\n\n$categorical\n# A tibble: 2 × 6\n  name       class     levels     n missing distribution                        \n  &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                               \n1 State.Code character     53   577       0 \"AK (1.9%), AL (1.9%), AR (1.9%) ..…\n2 State.Name character     53   577       0 \"Alabama (1.9%), Alaska (1.9%) ... …\n\n$quantitative\n# A tibble: 97 × 11\n   name    class    min     Q1 median     Q3    max   mean      sd     n missing\n * &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n 1 Year    inte… 2.00e3 2.01e3 2.01e3 2.01e3 2.02e3 2.01e3 3.17e+0   577       0\n 2 Total.… inte… 3.83e2 5.04e2 5.27e2 5.71e2 6.19e2 5.36e2 4.62e+1   577       0\n 3 Total.… inte… 1.34e2 2.54e3 6.47e3 3.58e4 2.42e5 2.79e4 4.56e+4   577       0\n 4 Total.… inte… 4.01e2 4.96e2 5.22e2 5.72e2 6.12e2 5.31e2 4.43e+1   577       0\n 5 Academ… nume… 3.43e0 3.76e0 3.85e0 3.9 e0 3.96e0 3.82e0 9.32e-2   577       0\n 6 Academ… nume… 1.2 e0 2.1 e0 2.3 e0 2.5 e0 3.1 e0 2.29e0 3.19e-1   577       0\n 7 Academ… nume… 3.03e0 3.35e0 3.51e0 3.67e0 3.88e0 3.50e0 1.86e-1   577       0\n 8 Academ… nume… 3.5 e0 3.9 e0 3.9 e0 4   e0 4.1 e0 3.93e0 9.30e-2   577       0\n 9 Academ… nume… 3.03e0 3.3 e0 3.46e0 3.63e0 3.79e0 3.45e0 1.89e-1   577       0\n10 Academ… nume… 1.8 e0 2.6 e0 2.8 e0 3.1 e0 3.6 e0 2.85e0 3.45e-1   577       0\n# ℹ 87 more rows\n\nhead(glimpse(score))\n\nRows: 577\nColumns: 99\n$ Year                                                    &lt;int&gt; 2005, 2005, 20…\n$ State.Code                                              &lt;chr&gt; \"AL\", \"AK\", \"A…\n$ State.Name                                              &lt;chr&gt; \"Alabama\", \"Al…\n$ Total.Math                                              &lt;int&gt; 559, 519, 530,…\n$ Total.Test.takers                                       &lt;int&gt; 3985, 3996, 18…\n$ Total.Verbal                                            &lt;int&gt; 567, 523, 526,…\n$ Academic.Subjects.Arts.Music.Average.GPA                &lt;dbl&gt; 3.92, 3.76, 3.…\n$ Academic.Subjects.Arts.Music.Average.Years              &lt;dbl&gt; 2.2, 1.9, 2.1,…\n$ Academic.Subjects.English.Average.GPA                   &lt;dbl&gt; 3.53, 3.35, 3.…\n$ Academic.Subjects.English.Average.Years                 &lt;dbl&gt; 3.9, 3.9, 3.9,…\n$ Academic.Subjects.Foreign.Languages.Average.GPA         &lt;dbl&gt; 3.54, 3.34, 3.…\n$ Academic.Subjects.Foreign.Languages.Average.Years       &lt;dbl&gt; 2.6, 2.1, 2.6,…\n$ Academic.Subjects.Mathematics.Average.GPA               &lt;dbl&gt; 3.41, 3.06, 3.…\n$ Academic.Subjects.Mathematics.Average.Years             &lt;dbl&gt; 4.0, 3.5, 3.9,…\n$ Academic.Subjects.Natural.Sciences.Average.GPA          &lt;dbl&gt; 3.52, 3.25, 3.…\n$ Academic.Subjects.Natural.Sciences.Average.Years        &lt;dbl&gt; 3.9, 3.2, 3.4,…\n$ Academic.Subjects.Social.Sciences.History.Average.GPA   &lt;dbl&gt; 3.59, 3.39, 3.…\n$ Academic.Subjects.Social.Sciences.History.Average.Years &lt;dbl&gt; 3.9, 3.4, 3.3,…\n$ Family.Income.Between.20.40k.Math                       &lt;int&gt; 513, 492, 498,…\n$ Family.Income.Between.20.40k.Test.takers                &lt;int&gt; 324, 401, 2121…\n$ Family.Income.Between.20.40k.Verbal                     &lt;int&gt; 527, 500, 495,…\n$ Family.Income.Between.40.60k.Math                       &lt;int&gt; 539, 517, 520,…\n$ Family.Income.Between.40.60k.Test.takers                &lt;int&gt; 442, 539, 2270…\n$ Family.Income.Between.40.60k.Verbal                     &lt;int&gt; 551, 522, 518,…\n$ Family.Income.Between.60.80k.Math                       &lt;int&gt; 550, 513, 524,…\n$ Family.Income.Between.60.80k.Test.takers                &lt;int&gt; 473, 603, 2372…\n$ Family.Income.Between.60.80k.Verbal                     &lt;int&gt; 564, 519, 523,…\n$ Family.Income.Between.80.100k.Math                      &lt;int&gt; 566, 528, 534,…\n$ Family.Income.Between.80.100k.Test.takers               &lt;int&gt; 475, 444, 1866…\n$ Family.Income.Between.80.100k.Verbal                    &lt;int&gt; 577, 534, 533,…\n$ Family.Income.Less.than.20k.Math                        &lt;int&gt; 462, 464, 485,…\n$ Family.Income.Less.than.20k.Test.takers                 &lt;int&gt; 175, 191, 891,…\n$ Family.Income.Less.than.20k.Verbal                      &lt;int&gt; 474, 467, 474,…\n$ Family.Income.More.than.100k.Math                       &lt;int&gt; 588, 541, 554,…\n$ Family.Income.More.than.100k.Test.takers                &lt;int&gt; 980, 540, 3083…\n$ Family.Income.More.than.100k.Verbal                     &lt;int&gt; 590, 544, 546,…\n$ GPA.A.minus.Math                                        &lt;int&gt; 569, 544, 541,…\n$ GPA.A.minus.Test.takers                                 &lt;int&gt; 724, 673, 3334…\n$ GPA.A.minus.Verbal                                      &lt;int&gt; 575, 546, 535,…\n$ GPA.A.plus.Math                                         &lt;int&gt; 622, 600, 605,…\n$ GPA.A.plus.Test.takers                                  &lt;int&gt; 563, 173, 1684…\n$ GPA.A.plus.Verbal                                       &lt;int&gt; 623, 604, 593,…\n$ GPA.A.Math                                              &lt;int&gt; 600, 580, 571,…\n$ GPA.A.Test.takers                                       &lt;int&gt; 1032, 671, 385…\n$ GPA.A.Verbal                                            &lt;int&gt; 608, 578, 563,…\n$ GPA.B.Math                                              &lt;int&gt; 514, 492, 498,…\n$ GPA.B.Test.takers                                       &lt;int&gt; 1253, 1622, 71…\n$ GPA.B.Verbal                                            &lt;int&gt; 525, 499, 499,…\n$ GPA.C.Math                                              &lt;int&gt; 436, 466, 458,…\n$ GPA.C.Test.takers                                       &lt;int&gt; 188, 418, 1184…\n$ GPA.C.Verbal                                            &lt;int&gt; 451, 472, 464,…\n$ GPA.D.or.lower.Math                                     &lt;int&gt; 0, 424, 439, 0…\n$ GPA.D.or.lower.Test.takers                              &lt;int&gt; 0, 12, 16, 0, …\n$ GPA.D.or.lower.Verbal                                   &lt;int&gt; 0, 466, 435, 0…\n$ GPA.No.response.Math                                    &lt;int&gt; 0, 0, 0, 0, 0,…\n$ GPA.No.response.Test.takers                             &lt;int&gt; 225, 427, 919,…\n$ GPA.No.response.Verbal                                  &lt;int&gt; 0, 0, 0, 0, 0,…\n$ Gender.Female.Math                                      &lt;int&gt; 538, 505, 513,…\n$ Gender.Female.Test.takers                               &lt;int&gt; 2072, 2161, 98…\n$ Gender.Female.Verbal                                    &lt;int&gt; 561, 521, 522,…\n$ Gender.Male.Math                                        &lt;int&gt; 582, 535, 549,…\n$ Gender.Male.Test.takers                                 &lt;int&gt; 1913, 1835, 83…\n$ Gender.Male.Verbal                                      &lt;int&gt; 574, 526, 531,…\n$ Score.Ranges.Between.200.to.300.Math.Females            &lt;int&gt; 22, 30, 119, 1…\n$ Score.Ranges.Between.200.to.300.Math.Males              &lt;int&gt; 10, 20, 72, 7,…\n$ Score.Ranges.Between.200.to.300.Math.Total              &lt;int&gt; 32, 50, 191, 1…\n$ Score.Ranges.Between.200.to.300.Verbal.Females          &lt;int&gt; 14, 26, 115, 9…\n$ Score.Ranges.Between.200.to.300.Verbal.Males            &lt;int&gt; 17, 26, 86, 3,…\n$ Score.Ranges.Between.200.to.300.Verbal.Total            &lt;int&gt; 31, 52, 201, 1…\n$ Score.Ranges.Between.300.to.400.Math.Females            &lt;int&gt; 173, 233, 881,…\n$ Score.Ranges.Between.300.to.400.Math.Males              &lt;int&gt; 93, 153, 450, …\n$ Score.Ranges.Between.300.to.400.Math.Total              &lt;int&gt; 266, 386, 1331…\n$ Score.Ranges.Between.300.to.400.Verbal.Females          &lt;int&gt; 123, 218, 739,…\n$ Score.Ranges.Between.300.to.400.Verbal.Males            &lt;int&gt; 84, 171, 613, …\n$ Score.Ranges.Between.300.to.400.Verbal.Total            &lt;int&gt; 207, 389, 1352…\n$ Score.Ranges.Between.400.to.500.Math.Females            &lt;int&gt; 514, 696, 3215…\n$ Score.Ranges.Between.400.to.500.Math.Males              &lt;int&gt; 293, 485, 1948…\n$ Score.Ranges.Between.400.to.500.Math.Total              &lt;int&gt; 807, 1181, 516…\n$ Score.Ranges.Between.400.to.500.Verbal.Females          &lt;int&gt; 430, 656, 3048…\n$ Score.Ranges.Between.400.to.500.Verbal.Males            &lt;int&gt; 332, 552, 2398…\n$ Score.Ranges.Between.400.to.500.Verbal.Total            &lt;int&gt; 762, 1208, 544…\n$ Score.Ranges.Between.500.to.600.Math.Females            &lt;int&gt; 722, 813, 3576…\n$ Score.Ranges.Between.500.to.600.Math.Males              &lt;int&gt; 614, 616, 3152…\n$ Score.Ranges.Between.500.to.600.Math.Total              &lt;int&gt; 1336, 1429, 67…\n$ Score.Ranges.Between.500.to.600.Verbal.Females          &lt;int&gt; 690, 729, 3661…\n$ Score.Ranges.Between.500.to.600.Verbal.Males            &lt;int&gt; 617, 596, 3101…\n$ Score.Ranges.Between.500.to.600.Verbal.Total            &lt;int&gt; 1307, 1325, 67…\n$ Score.Ranges.Between.600.to.700.Math.Females            &lt;int&gt; 485, 342, 1688…\n$ Score.Ranges.Between.600.to.700.Math.Males              &lt;int&gt; 611, 445, 2126…\n$ Score.Ranges.Between.600.to.700.Math.Total              &lt;int&gt; 1096, 787, 381…\n$ Score.Ranges.Between.600.to.700.Verbal.Females          &lt;int&gt; 596, 423, 1831…\n$ Score.Ranges.Between.600.to.700.Verbal.Males            &lt;int&gt; 613, 375, 1679…\n$ Score.Ranges.Between.600.to.700.Verbal.Total            &lt;int&gt; 1209, 798, 351…\n$ Score.Ranges.Between.700.to.800.Math.Females            &lt;int&gt; 156, 47, 327, …\n$ Score.Ranges.Between.700.to.800.Math.Males              &lt;int&gt; 292, 116, 630,…\n$ Score.Ranges.Between.700.to.800.Math.Total              &lt;int&gt; 448, 163, 957,…\n$ Score.Ranges.Between.700.to.800.Verbal.Females          &lt;int&gt; 219, 109, 412,…\n$ Score.Ranges.Between.700.to.800.Verbal.Males            &lt;int&gt; 250, 115, 501,…\n$ Score.Ranges.Between.700.to.800.Verbal.Total            &lt;int&gt; 469, 224, 913,…\n\n\n  Year State.Code State.Name Total.Math Total.Test.takers Total.Verbal\n1 2005         AL    Alabama        559              3985          567\n2 2005         AK     Alaska        519              3996          523\n3 2005         AZ    Arizona        530             18184          526\n4 2005         AR   Arkansas        552              1600          563\n5 2005         CA California        522            186552          504\n6 2005         CO   Colorado        560             11990          560\n  Academic.Subjects.Arts.Music.Average.GPA\n1                                     3.92\n2                                     3.76\n3                                     3.85\n4                                     3.90\n5                                     3.76\n6                                     3.88\n  Academic.Subjects.Arts.Music.Average.Years\n1                                        2.2\n2                                        1.9\n3                                        2.1\n4                                        2.2\n5                                        1.8\n6                                        2.2\n  Academic.Subjects.English.Average.GPA Academic.Subjects.English.Average.Years\n1                                  3.53                                     3.9\n2                                  3.35                                     3.9\n3                                  3.45                                     3.9\n4                                  3.61                                     4.0\n5                                  3.32                                     3.8\n6                                  3.49                                     4.0\n  Academic.Subjects.Foreign.Languages.Average.GPA\n1                                            3.54\n2                                            3.34\n3                                            3.41\n4                                            3.64\n5                                            3.29\n6                                            3.41\n  Academic.Subjects.Foreign.Languages.Average.Years\n1                                               2.6\n2                                               2.1\n3                                               2.6\n4                                               2.6\n5                                               2.8\n6                                               3.1\n  Academic.Subjects.Mathematics.Average.GPA\n1                                      3.41\n2                                      3.06\n3                                      3.25\n4                                      3.46\n5                                      3.05\n6                                      3.33\n  Academic.Subjects.Mathematics.Average.Years\n1                                         4.0\n2                                         3.5\n3                                         3.9\n4                                         4.1\n5                                         3.7\n6                                         3.9\n  Academic.Subjects.Natural.Sciences.Average.GPA\n1                                           3.52\n2                                           3.25\n3                                           3.43\n4                                           3.55\n5                                           3.20\n6                                           3.43\n  Academic.Subjects.Natural.Sciences.Average.Years\n1                                              3.9\n2                                              3.2\n3                                              3.4\n4                                              3.7\n5                                              3.2\n6                                              3.7\n  Academic.Subjects.Social.Sciences.History.Average.GPA\n1                                                  3.59\n2                                                  3.39\n3                                                  3.55\n4                                                  3.67\n5                                                  3.38\n6                                                  3.56\n  Academic.Subjects.Social.Sciences.History.Average.Years\n1                                                     3.9\n2                                                     3.4\n3                                                     3.3\n4                                                     3.6\n5                                                     3.3\n6                                                     3.7\n  Family.Income.Between.20.40k.Math Family.Income.Between.20.40k.Test.takers\n1                               513                                      324\n2                               492                                      401\n3                               498                                     2121\n4                               513                                      180\n5                               477                                    26161\n6                               533                                      948\n  Family.Income.Between.20.40k.Verbal Family.Income.Between.40.60k.Math\n1                                 527                               539\n2                                 500                               517\n3                                 495                               520\n4                                 526                               543\n5                                 458                               506\n6                                 535                               543\n  Family.Income.Between.40.60k.Test.takers Family.Income.Between.40.60k.Verbal\n1                                      442                                 551\n2                                      539                                 522\n3                                     2270                                 518\n4                                      245                                 555\n5                                    18347                                 494\n6                                     1287                                 548\n  Family.Income.Between.60.80k.Math Family.Income.Between.60.80k.Test.takers\n1                               550                                      473\n2                               513                                      603\n3                               524                                     2372\n4                               553                                      227\n5                               521                                    17937\n6                               553                                     1550\n  Family.Income.Between.60.80k.Verbal Family.Income.Between.80.100k.Math\n1                                 564                                566\n2                                 519                                528\n3                                 523                                534\n4                                 570                                570\n5                                 511                                535\n6                                 552                                562\n  Family.Income.Between.80.100k.Test.takers\n1                                       475\n2                                       444\n3                                      1866\n4                                       147\n5                                     14120\n6                                      1427\n  Family.Income.Between.80.100k.Verbal Family.Income.Less.than.20k.Math\n1                                  577                              462\n2                                  534                              464\n3                                  533                              485\n4                                  580                              489\n5                                  525                              451\n6                                  560                              514\n  Family.Income.Less.than.20k.Test.takers Family.Income.Less.than.20k.Verbal\n1                                     175                                474\n2                                     191                                467\n3                                     891                                474\n4                                     107                                486\n5                                   19323                                421\n6                                     324                                505\n  Family.Income.More.than.100k.Math Family.Income.More.than.100k.Test.takers\n1                               588                                      980\n2                               541                                      540\n3                               554                                     3083\n4                               572                                      314\n5                               566                                    27984\n6                               574                                     2662\n  Family.Income.More.than.100k.Verbal GPA.A.minus.Math GPA.A.minus.Test.takers\n1                                 590              569                     724\n2                                 544              544                     673\n3                                 546              541                    3334\n4                                 589              559                     298\n5                                 551              562                   30545\n6                                 568              573                    2323\n  GPA.A.minus.Verbal GPA.A.plus.Math GPA.A.plus.Test.takers GPA.A.plus.Verbal\n1                575             622                    563               623\n2                546             600                    173               604\n3                535             605                   1684               593\n4                572             629                    273               639\n5                538             625                   7502               603\n6                570             627                   1098               614\n  GPA.A.Math GPA.A.Test.takers GPA.A.Verbal GPA.B.Math GPA.B.Test.takers\n1        600              1032          608        514              1253\n2        580               671          578        492              1622\n3        571              3854          563        498              7193\n4        579               457          583        492               437\n5        592             25546          565        494             84659\n6        602              2736          598        526              4312\n  GPA.B.Verbal GPA.C.Math GPA.C.Test.takers GPA.C.Verbal GPA.D.or.lower.Math\n1          525        436               188          451                   0\n2          499        466               418          472                 424\n3          499        458              1184          464                 439\n4          511        419                57          436                   0\n5          480        434             18839          427                 419\n6          529        484               732          489                 457\n  GPA.D.or.lower.Test.takers GPA.D.or.lower.Verbal GPA.No.response.Math\n1                          0                     0                    0\n2                         12                   466                    0\n3                         16                   435                    0\n4                          0                     0                    0\n5                        240                   408                    0\n6                         12                   462                    0\n  GPA.No.response.Test.takers GPA.No.response.Verbal Gender.Female.Math\n1                         225                      0                538\n2                         427                      0                505\n3                         919                      0                513\n4                          78                      0                536\n5                       19221                      0                504\n6                         777                      0                546\n  Gender.Female.Test.takers Gender.Female.Verbal Gender.Male.Math\n1                      2072                  561              582\n2                      2161                  521              535\n3                      9806                  522              549\n4                       859                  558              570\n5                    102944                  499              543\n6                      6407                  558              577\n  Gender.Male.Test.takers Gender.Male.Verbal\n1                    1913                574\n2                    1835                526\n3                    8378                531\n4                     741                570\n5                   83608                510\n6                    5583                561\n  Score.Ranges.Between.200.to.300.Math.Females\n1                                           22\n2                                           30\n3                                          119\n4                                           12\n5                                         2978\n6                                           40\n  Score.Ranges.Between.200.to.300.Math.Males\n1                                         10\n2                                         20\n3                                         72\n4                                          7\n5                                       1453\n6                                         24\n  Score.Ranges.Between.200.to.300.Math.Total\n1                                         32\n2                                         50\n3                                        191\n4                                         19\n5                                       4431\n6                                         64\n  Score.Ranges.Between.200.to.300.Verbal.Females\n1                                             14\n2                                             26\n3                                            115\n4                                              9\n5                                           3382\n6                                             39\n  Score.Ranges.Between.200.to.300.Verbal.Males\n1                                           17\n2                                           26\n3                                           86\n4                                            3\n5                                         2433\n6                                           22\n  Score.Ranges.Between.200.to.300.Verbal.Total\n1                                           31\n2                                           52\n3                                          201\n4                                           12\n5                                         5815\n6                                           61\n  Score.Ranges.Between.300.to.400.Math.Females\n1                                          173\n2                                          233\n3                                          881\n4                                           68\n5                                        14595\n6                                          313\n  Score.Ranges.Between.300.to.400.Math.Males\n1                                         93\n2                                        153\n3                                        450\n4                                         31\n5                                       7159\n6                                        202\n  Score.Ranges.Between.300.to.400.Math.Total\n1                                        266\n2                                        386\n3                                       1331\n4                                         99\n5                                      21754\n6                                        515\n  Score.Ranges.Between.300.to.400.Verbal.Females\n1                                            123\n2                                            218\n3                                            739\n4                                             46\n5                                          15386\n6                                            257\n  Score.Ranges.Between.300.to.400.Verbal.Males\n1                                           84\n2                                          171\n3                                          613\n4                                           42\n5                                        10784\n6                                          212\n  Score.Ranges.Between.300.to.400.Verbal.Total\n1                                          207\n2                                          389\n3                                         1352\n4                                           88\n5                                        26170\n6                                          469\n  Score.Ranges.Between.400.to.500.Math.Females\n1                                          514\n2                                          696\n3                                         3215\n4                                          210\n5                                        31530\n6                                         1529\n  Score.Ranges.Between.400.to.500.Math.Males\n1                                        293\n2                                        485\n3                                       1948\n4                                        137\n5                                      20172\n6                                        927\n  Score.Ranges.Between.400.to.500.Math.Total\n1                                        807\n2                                       1181\n3                                       5163\n4                                        347\n5                                      51702\n6                                       2456\n  Score.Ranges.Between.400.to.500.Verbal.Females\n1                                            430\n2                                            656\n3                                           3048\n4                                            183\n5                                          32897\n6                                           1343\n  Score.Ranges.Between.400.to.500.Verbal.Males\n1                                          332\n2                                          552\n3                                         2398\n4                                          141\n5                                        25260\n6                                         1140\n  Score.Ranges.Between.400.to.500.Verbal.Total\n1                                          762\n2                                         1208\n3                                         5446\n4                                          324\n5                                        58157\n6                                         2483\n  Score.Ranges.Between.500.to.600.Math.Females\n1                                          722\n2                                          813\n3                                         3576\n4                                          316\n5                                        30765\n6                                         2524\n  Score.Ranges.Between.500.to.600.Math.Males\n1                                        614\n2                                        616\n3                                       3152\n4                                        244\n5                                      26052\n6                                       1889\n  Score.Ranges.Between.500.to.600.Math.Total\n1                                       1336\n2                                       1429\n3                                       6728\n4                                        560\n5                                      56817\n6                                       4413\n  Score.Ranges.Between.500.to.600.Verbal.Females\n1                                            690\n2                                            729\n3                                           3661\n4                                            302\n5                                          30190\n6                                           2529\n  Score.Ranges.Between.500.to.600.Verbal.Males\n1                                          617\n2                                          596\n3                                         3101\n4                                          236\n5                                        25399\n6                                         2125\n  Score.Ranges.Between.500.to.600.Verbal.Total\n1                                         1307\n2                                         1325\n3                                         6762\n4                                          538\n5                                        55589\n6                                         4654\n  Score.Ranges.Between.600.to.700.Math.Females\n1                                          485\n2                                          342\n3                                         1688\n4                                          204\n5                                        17625\n6                                         1619\n  Score.Ranges.Between.600.to.700.Math.Males\n1                                        611\n2                                        445\n3                                       2126\n4                                        239\n5                                      19980\n6                                       1864\n  Score.Ranges.Between.600.to.700.Math.Total\n1                                       1096\n2                                        787\n3                                       3814\n4                                        443\n5                                      37605\n6                                       3483\n  Score.Ranges.Between.600.to.700.Verbal.Females\n1                                            596\n2                                            423\n3                                           1831\n4                                            242\n5                                          16078\n6                                           1708\n  Score.Ranges.Between.600.to.700.Verbal.Males\n1                                          613\n2                                          375\n3                                         1679\n4                                          226\n5                                        14966\n6                                         1610\n  Score.Ranges.Between.600.to.700.Verbal.Total\n1                                         1209\n2                                          798\n3                                         3510\n4                                          468\n5                                        31044\n6                                         3318\n  Score.Ranges.Between.700.to.800.Math.Females\n1                                          156\n2                                           47\n3                                          327\n4                                           49\n5                                         5451\n6                                          382\n  Score.Ranges.Between.700.to.800.Math.Males\n1                                        292\n2                                        116\n3                                        630\n4                                         83\n5                                       8792\n6                                        677\n  Score.Ranges.Between.700.to.800.Math.Total\n1                                        448\n2                                        163\n3                                        957\n4                                        132\n5                                      14243\n6                                       1059\n  Score.Ranges.Between.700.to.800.Verbal.Females\n1                                            219\n2                                            109\n3                                            412\n4                                             77\n5                                           5011\n6                                            531\n  Score.Ranges.Between.700.to.800.Verbal.Males\n1                                          250\n2                                          115\n3                                          501\n4                                           93\n5                                         4766\n6                                          474\n  Score.Ranges.Between.700.to.800.Verbal.Total\n1                                          469\n2                                          224\n3                                          913\n4                                          170\n5                                         9777\n6                                         1005\n\nhead(skim(score))\n\n\nData summary\n\n\nName\nscore\n\n\nNumber of rows\n577\n\n\nNumber of columns\n99\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nState.Code\n0\n1\n2\n2\n0\n53\n0\n\n\nState.Name\n0\n1\n4\n20\n0\n53\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n2010.02\n3.17\n2005\n2007\n2010\n2013\n2015\n▇▅▅▆▆\n\n\nTotal.Math\n0\n1\n535.68\n46.17\n383\n504\n527\n571\n619\n▁▁▇▆▅\n\n\nTotal.Test.takers\n0\n1\n27914.24\n45602.11\n134\n2536\n6468\n35799\n241553\n▇▁▁▁▁\n\n\nTotal.Verbal\n0\n1\n531.33\n44.32\n401\n496\n522\n572\n612\n▁▂▇▃▅"
  },
  {
    "objectID": "posts/Pentafolder/index.html#importing-data",
    "href": "posts/Pentafolder/index.html#importing-data",
    "title": "School Scores",
    "section": "",
    "text": "score&lt;- read.csv(file = '../../datasets/school-scores-data.csv')\n\nhead(score)\n\n  Year State.Code State.Name Total.Math Total.Test.takers Total.Verbal\n1 2005         AL    Alabama        559              3985          567\n2 2005         AK     Alaska        519              3996          523\n3 2005         AZ    Arizona        530             18184          526\n4 2005         AR   Arkansas        552              1600          563\n5 2005         CA California        522            186552          504\n6 2005         CO   Colorado        560             11990          560\n  Academic.Subjects.Arts.Music.Average.GPA\n1                                     3.92\n2                                     3.76\n3                                     3.85\n4                                     3.90\n5                                     3.76\n6                                     3.88\n  Academic.Subjects.Arts.Music.Average.Years\n1                                        2.2\n2                                        1.9\n3                                        2.1\n4                                        2.2\n5                                        1.8\n6                                        2.2\n  Academic.Subjects.English.Average.GPA Academic.Subjects.English.Average.Years\n1                                  3.53                                     3.9\n2                                  3.35                                     3.9\n3                                  3.45                                     3.9\n4                                  3.61                                     4.0\n5                                  3.32                                     3.8\n6                                  3.49                                     4.0\n  Academic.Subjects.Foreign.Languages.Average.GPA\n1                                            3.54\n2                                            3.34\n3                                            3.41\n4                                            3.64\n5                                            3.29\n6                                            3.41\n  Academic.Subjects.Foreign.Languages.Average.Years\n1                                               2.6\n2                                               2.1\n3                                               2.6\n4                                               2.6\n5                                               2.8\n6                                               3.1\n  Academic.Subjects.Mathematics.Average.GPA\n1                                      3.41\n2                                      3.06\n3                                      3.25\n4                                      3.46\n5                                      3.05\n6                                      3.33\n  Academic.Subjects.Mathematics.Average.Years\n1                                         4.0\n2                                         3.5\n3                                         3.9\n4                                         4.1\n5                                         3.7\n6                                         3.9\n  Academic.Subjects.Natural.Sciences.Average.GPA\n1                                           3.52\n2                                           3.25\n3                                           3.43\n4                                           3.55\n5                                           3.20\n6                                           3.43\n  Academic.Subjects.Natural.Sciences.Average.Years\n1                                              3.9\n2                                              3.2\n3                                              3.4\n4                                              3.7\n5                                              3.2\n6                                              3.7\n  Academic.Subjects.Social.Sciences.History.Average.GPA\n1                                                  3.59\n2                                                  3.39\n3                                                  3.55\n4                                                  3.67\n5                                                  3.38\n6                                                  3.56\n  Academic.Subjects.Social.Sciences.History.Average.Years\n1                                                     3.9\n2                                                     3.4\n3                                                     3.3\n4                                                     3.6\n5                                                     3.3\n6                                                     3.7\n  Family.Income.Between.20.40k.Math Family.Income.Between.20.40k.Test.takers\n1                               513                                      324\n2                               492                                      401\n3                               498                                     2121\n4                               513                                      180\n5                               477                                    26161\n6                               533                                      948\n  Family.Income.Between.20.40k.Verbal Family.Income.Between.40.60k.Math\n1                                 527                               539\n2                                 500                               517\n3                                 495                               520\n4                                 526                               543\n5                                 458                               506\n6                                 535                               543\n  Family.Income.Between.40.60k.Test.takers Family.Income.Between.40.60k.Verbal\n1                                      442                                 551\n2                                      539                                 522\n3                                     2270                                 518\n4                                      245                                 555\n5                                    18347                                 494\n6                                     1287                                 548\n  Family.Income.Between.60.80k.Math Family.Income.Between.60.80k.Test.takers\n1                               550                                      473\n2                               513                                      603\n3                               524                                     2372\n4                               553                                      227\n5                               521                                    17937\n6                               553                                     1550\n  Family.Income.Between.60.80k.Verbal Family.Income.Between.80.100k.Math\n1                                 564                                566\n2                                 519                                528\n3                                 523                                534\n4                                 570                                570\n5                                 511                                535\n6                                 552                                562\n  Family.Income.Between.80.100k.Test.takers\n1                                       475\n2                                       444\n3                                      1866\n4                                       147\n5                                     14120\n6                                      1427\n  Family.Income.Between.80.100k.Verbal Family.Income.Less.than.20k.Math\n1                                  577                              462\n2                                  534                              464\n3                                  533                              485\n4                                  580                              489\n5                                  525                              451\n6                                  560                              514\n  Family.Income.Less.than.20k.Test.takers Family.Income.Less.than.20k.Verbal\n1                                     175                                474\n2                                     191                                467\n3                                     891                                474\n4                                     107                                486\n5                                   19323                                421\n6                                     324                                505\n  Family.Income.More.than.100k.Math Family.Income.More.than.100k.Test.takers\n1                               588                                      980\n2                               541                                      540\n3                               554                                     3083\n4                               572                                      314\n5                               566                                    27984\n6                               574                                     2662\n  Family.Income.More.than.100k.Verbal GPA.A.minus.Math GPA.A.minus.Test.takers\n1                                 590              569                     724\n2                                 544              544                     673\n3                                 546              541                    3334\n4                                 589              559                     298\n5                                 551              562                   30545\n6                                 568              573                    2323\n  GPA.A.minus.Verbal GPA.A.plus.Math GPA.A.plus.Test.takers GPA.A.plus.Verbal\n1                575             622                    563               623\n2                546             600                    173               604\n3                535             605                   1684               593\n4                572             629                    273               639\n5                538             625                   7502               603\n6                570             627                   1098               614\n  GPA.A.Math GPA.A.Test.takers GPA.A.Verbal GPA.B.Math GPA.B.Test.takers\n1        600              1032          608        514              1253\n2        580               671          578        492              1622\n3        571              3854          563        498              7193\n4        579               457          583        492               437\n5        592             25546          565        494             84659\n6        602              2736          598        526              4312\n  GPA.B.Verbal GPA.C.Math GPA.C.Test.takers GPA.C.Verbal GPA.D.or.lower.Math\n1          525        436               188          451                   0\n2          499        466               418          472                 424\n3          499        458              1184          464                 439\n4          511        419                57          436                   0\n5          480        434             18839          427                 419\n6          529        484               732          489                 457\n  GPA.D.or.lower.Test.takers GPA.D.or.lower.Verbal GPA.No.response.Math\n1                          0                     0                    0\n2                         12                   466                    0\n3                         16                   435                    0\n4                          0                     0                    0\n5                        240                   408                    0\n6                         12                   462                    0\n  GPA.No.response.Test.takers GPA.No.response.Verbal Gender.Female.Math\n1                         225                      0                538\n2                         427                      0                505\n3                         919                      0                513\n4                          78                      0                536\n5                       19221                      0                504\n6                         777                      0                546\n  Gender.Female.Test.takers Gender.Female.Verbal Gender.Male.Math\n1                      2072                  561              582\n2                      2161                  521              535\n3                      9806                  522              549\n4                       859                  558              570\n5                    102944                  499              543\n6                      6407                  558              577\n  Gender.Male.Test.takers Gender.Male.Verbal\n1                    1913                574\n2                    1835                526\n3                    8378                531\n4                     741                570\n5                   83608                510\n6                    5583                561\n  Score.Ranges.Between.200.to.300.Math.Females\n1                                           22\n2                                           30\n3                                          119\n4                                           12\n5                                         2978\n6                                           40\n  Score.Ranges.Between.200.to.300.Math.Males\n1                                         10\n2                                         20\n3                                         72\n4                                          7\n5                                       1453\n6                                         24\n  Score.Ranges.Between.200.to.300.Math.Total\n1                                         32\n2                                         50\n3                                        191\n4                                         19\n5                                       4431\n6                                         64\n  Score.Ranges.Between.200.to.300.Verbal.Females\n1                                             14\n2                                             26\n3                                            115\n4                                              9\n5                                           3382\n6                                             39\n  Score.Ranges.Between.200.to.300.Verbal.Males\n1                                           17\n2                                           26\n3                                           86\n4                                            3\n5                                         2433\n6                                           22\n  Score.Ranges.Between.200.to.300.Verbal.Total\n1                                           31\n2                                           52\n3                                          201\n4                                           12\n5                                         5815\n6                                           61\n  Score.Ranges.Between.300.to.400.Math.Females\n1                                          173\n2                                          233\n3                                          881\n4                                           68\n5                                        14595\n6                                          313\n  Score.Ranges.Between.300.to.400.Math.Males\n1                                         93\n2                                        153\n3                                        450\n4                                         31\n5                                       7159\n6                                        202\n  Score.Ranges.Between.300.to.400.Math.Total\n1                                        266\n2                                        386\n3                                       1331\n4                                         99\n5                                      21754\n6                                        515\n  Score.Ranges.Between.300.to.400.Verbal.Females\n1                                            123\n2                                            218\n3                                            739\n4                                             46\n5                                          15386\n6                                            257\n  Score.Ranges.Between.300.to.400.Verbal.Males\n1                                           84\n2                                          171\n3                                          613\n4                                           42\n5                                        10784\n6                                          212\n  Score.Ranges.Between.300.to.400.Verbal.Total\n1                                          207\n2                                          389\n3                                         1352\n4                                           88\n5                                        26170\n6                                          469\n  Score.Ranges.Between.400.to.500.Math.Females\n1                                          514\n2                                          696\n3                                         3215\n4                                          210\n5                                        31530\n6                                         1529\n  Score.Ranges.Between.400.to.500.Math.Males\n1                                        293\n2                                        485\n3                                       1948\n4                                        137\n5                                      20172\n6                                        927\n  Score.Ranges.Between.400.to.500.Math.Total\n1                                        807\n2                                       1181\n3                                       5163\n4                                        347\n5                                      51702\n6                                       2456\n  Score.Ranges.Between.400.to.500.Verbal.Females\n1                                            430\n2                                            656\n3                                           3048\n4                                            183\n5                                          32897\n6                                           1343\n  Score.Ranges.Between.400.to.500.Verbal.Males\n1                                          332\n2                                          552\n3                                         2398\n4                                          141\n5                                        25260\n6                                         1140\n  Score.Ranges.Between.400.to.500.Verbal.Total\n1                                          762\n2                                         1208\n3                                         5446\n4                                          324\n5                                        58157\n6                                         2483\n  Score.Ranges.Between.500.to.600.Math.Females\n1                                          722\n2                                          813\n3                                         3576\n4                                          316\n5                                        30765\n6                                         2524\n  Score.Ranges.Between.500.to.600.Math.Males\n1                                        614\n2                                        616\n3                                       3152\n4                                        244\n5                                      26052\n6                                       1889\n  Score.Ranges.Between.500.to.600.Math.Total\n1                                       1336\n2                                       1429\n3                                       6728\n4                                        560\n5                                      56817\n6                                       4413\n  Score.Ranges.Between.500.to.600.Verbal.Females\n1                                            690\n2                                            729\n3                                           3661\n4                                            302\n5                                          30190\n6                                           2529\n  Score.Ranges.Between.500.to.600.Verbal.Males\n1                                          617\n2                                          596\n3                                         3101\n4                                          236\n5                                        25399\n6                                         2125\n  Score.Ranges.Between.500.to.600.Verbal.Total\n1                                         1307\n2                                         1325\n3                                         6762\n4                                          538\n5                                        55589\n6                                         4654\n  Score.Ranges.Between.600.to.700.Math.Females\n1                                          485\n2                                          342\n3                                         1688\n4                                          204\n5                                        17625\n6                                         1619\n  Score.Ranges.Between.600.to.700.Math.Males\n1                                        611\n2                                        445\n3                                       2126\n4                                        239\n5                                      19980\n6                                       1864\n  Score.Ranges.Between.600.to.700.Math.Total\n1                                       1096\n2                                        787\n3                                       3814\n4                                        443\n5                                      37605\n6                                       3483\n  Score.Ranges.Between.600.to.700.Verbal.Females\n1                                            596\n2                                            423\n3                                           1831\n4                                            242\n5                                          16078\n6                                           1708\n  Score.Ranges.Between.600.to.700.Verbal.Males\n1                                          613\n2                                          375\n3                                         1679\n4                                          226\n5                                        14966\n6                                         1610\n  Score.Ranges.Between.600.to.700.Verbal.Total\n1                                         1209\n2                                          798\n3                                         3510\n4                                          468\n5                                        31044\n6                                         3318\n  Score.Ranges.Between.700.to.800.Math.Females\n1                                          156\n2                                           47\n3                                          327\n4                                           49\n5                                         5451\n6                                          382\n  Score.Ranges.Between.700.to.800.Math.Males\n1                                        292\n2                                        116\n3                                        630\n4                                         83\n5                                       8792\n6                                        677\n  Score.Ranges.Between.700.to.800.Math.Total\n1                                        448\n2                                        163\n3                                        957\n4                                        132\n5                                      14243\n6                                       1059\n  Score.Ranges.Between.700.to.800.Verbal.Females\n1                                            219\n2                                            109\n3                                            412\n4                                             77\n5                                           5011\n6                                            531\n  Score.Ranges.Between.700.to.800.Verbal.Males\n1                                          250\n2                                          115\n3                                          501\n4                                           93\n5                                         4766\n6                                          474\n  Score.Ranges.Between.700.to.800.Verbal.Total\n1                                          469\n2                                          224\n3                                          913\n4                                          170\n5                                         9777\n6                                         1005\n\n\n\nhead(inspect(score))\n\n$categorical\n# A tibble: 2 × 6\n  name       class     levels     n missing distribution                        \n  &lt;chr&gt;      &lt;chr&gt;      &lt;int&gt; &lt;int&gt;   &lt;int&gt; &lt;chr&gt;                               \n1 State.Code character     53   577       0 \"AK (1.9%), AL (1.9%), AR (1.9%) ..…\n2 State.Name character     53   577       0 \"Alabama (1.9%), Alaska (1.9%) ... …\n\n$quantitative\n# A tibble: 97 × 11\n   name    class    min     Q1 median     Q3    max   mean      sd     n missing\n * &lt;chr&gt;   &lt;chr&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt; &lt;int&gt;   &lt;int&gt;\n 1 Year    inte… 2.00e3 2.01e3 2.01e3 2.01e3 2.02e3 2.01e3 3.17e+0   577       0\n 2 Total.… inte… 3.83e2 5.04e2 5.27e2 5.71e2 6.19e2 5.36e2 4.62e+1   577       0\n 3 Total.… inte… 1.34e2 2.54e3 6.47e3 3.58e4 2.42e5 2.79e4 4.56e+4   577       0\n 4 Total.… inte… 4.01e2 4.96e2 5.22e2 5.72e2 6.12e2 5.31e2 4.43e+1   577       0\n 5 Academ… nume… 3.43e0 3.76e0 3.85e0 3.9 e0 3.96e0 3.82e0 9.32e-2   577       0\n 6 Academ… nume… 1.2 e0 2.1 e0 2.3 e0 2.5 e0 3.1 e0 2.29e0 3.19e-1   577       0\n 7 Academ… nume… 3.03e0 3.35e0 3.51e0 3.67e0 3.88e0 3.50e0 1.86e-1   577       0\n 8 Academ… nume… 3.5 e0 3.9 e0 3.9 e0 4   e0 4.1 e0 3.93e0 9.30e-2   577       0\n 9 Academ… nume… 3.03e0 3.3 e0 3.46e0 3.63e0 3.79e0 3.45e0 1.89e-1   577       0\n10 Academ… nume… 1.8 e0 2.6 e0 2.8 e0 3.1 e0 3.6 e0 2.85e0 3.45e-1   577       0\n# ℹ 87 more rows\n\nhead(glimpse(score))\n\nRows: 577\nColumns: 99\n$ Year                                                    &lt;int&gt; 2005, 2005, 20…\n$ State.Code                                              &lt;chr&gt; \"AL\", \"AK\", \"A…\n$ State.Name                                              &lt;chr&gt; \"Alabama\", \"Al…\n$ Total.Math                                              &lt;int&gt; 559, 519, 530,…\n$ Total.Test.takers                                       &lt;int&gt; 3985, 3996, 18…\n$ Total.Verbal                                            &lt;int&gt; 567, 523, 526,…\n$ Academic.Subjects.Arts.Music.Average.GPA                &lt;dbl&gt; 3.92, 3.76, 3.…\n$ Academic.Subjects.Arts.Music.Average.Years              &lt;dbl&gt; 2.2, 1.9, 2.1,…\n$ Academic.Subjects.English.Average.GPA                   &lt;dbl&gt; 3.53, 3.35, 3.…\n$ Academic.Subjects.English.Average.Years                 &lt;dbl&gt; 3.9, 3.9, 3.9,…\n$ Academic.Subjects.Foreign.Languages.Average.GPA         &lt;dbl&gt; 3.54, 3.34, 3.…\n$ Academic.Subjects.Foreign.Languages.Average.Years       &lt;dbl&gt; 2.6, 2.1, 2.6,…\n$ Academic.Subjects.Mathematics.Average.GPA               &lt;dbl&gt; 3.41, 3.06, 3.…\n$ Academic.Subjects.Mathematics.Average.Years             &lt;dbl&gt; 4.0, 3.5, 3.9,…\n$ Academic.Subjects.Natural.Sciences.Average.GPA          &lt;dbl&gt; 3.52, 3.25, 3.…\n$ Academic.Subjects.Natural.Sciences.Average.Years        &lt;dbl&gt; 3.9, 3.2, 3.4,…\n$ Academic.Subjects.Social.Sciences.History.Average.GPA   &lt;dbl&gt; 3.59, 3.39, 3.…\n$ Academic.Subjects.Social.Sciences.History.Average.Years &lt;dbl&gt; 3.9, 3.4, 3.3,…\n$ Family.Income.Between.20.40k.Math                       &lt;int&gt; 513, 492, 498,…\n$ Family.Income.Between.20.40k.Test.takers                &lt;int&gt; 324, 401, 2121…\n$ Family.Income.Between.20.40k.Verbal                     &lt;int&gt; 527, 500, 495,…\n$ Family.Income.Between.40.60k.Math                       &lt;int&gt; 539, 517, 520,…\n$ Family.Income.Between.40.60k.Test.takers                &lt;int&gt; 442, 539, 2270…\n$ Family.Income.Between.40.60k.Verbal                     &lt;int&gt; 551, 522, 518,…\n$ Family.Income.Between.60.80k.Math                       &lt;int&gt; 550, 513, 524,…\n$ Family.Income.Between.60.80k.Test.takers                &lt;int&gt; 473, 603, 2372…\n$ Family.Income.Between.60.80k.Verbal                     &lt;int&gt; 564, 519, 523,…\n$ Family.Income.Between.80.100k.Math                      &lt;int&gt; 566, 528, 534,…\n$ Family.Income.Between.80.100k.Test.takers               &lt;int&gt; 475, 444, 1866…\n$ Family.Income.Between.80.100k.Verbal                    &lt;int&gt; 577, 534, 533,…\n$ Family.Income.Less.than.20k.Math                        &lt;int&gt; 462, 464, 485,…\n$ Family.Income.Less.than.20k.Test.takers                 &lt;int&gt; 175, 191, 891,…\n$ Family.Income.Less.than.20k.Verbal                      &lt;int&gt; 474, 467, 474,…\n$ Family.Income.More.than.100k.Math                       &lt;int&gt; 588, 541, 554,…\n$ Family.Income.More.than.100k.Test.takers                &lt;int&gt; 980, 540, 3083…\n$ Family.Income.More.than.100k.Verbal                     &lt;int&gt; 590, 544, 546,…\n$ GPA.A.minus.Math                                        &lt;int&gt; 569, 544, 541,…\n$ GPA.A.minus.Test.takers                                 &lt;int&gt; 724, 673, 3334…\n$ GPA.A.minus.Verbal                                      &lt;int&gt; 575, 546, 535,…\n$ GPA.A.plus.Math                                         &lt;int&gt; 622, 600, 605,…\n$ GPA.A.plus.Test.takers                                  &lt;int&gt; 563, 173, 1684…\n$ GPA.A.plus.Verbal                                       &lt;int&gt; 623, 604, 593,…\n$ GPA.A.Math                                              &lt;int&gt; 600, 580, 571,…\n$ GPA.A.Test.takers                                       &lt;int&gt; 1032, 671, 385…\n$ GPA.A.Verbal                                            &lt;int&gt; 608, 578, 563,…\n$ GPA.B.Math                                              &lt;int&gt; 514, 492, 498,…\n$ GPA.B.Test.takers                                       &lt;int&gt; 1253, 1622, 71…\n$ GPA.B.Verbal                                            &lt;int&gt; 525, 499, 499,…\n$ GPA.C.Math                                              &lt;int&gt; 436, 466, 458,…\n$ GPA.C.Test.takers                                       &lt;int&gt; 188, 418, 1184…\n$ GPA.C.Verbal                                            &lt;int&gt; 451, 472, 464,…\n$ GPA.D.or.lower.Math                                     &lt;int&gt; 0, 424, 439, 0…\n$ GPA.D.or.lower.Test.takers                              &lt;int&gt; 0, 12, 16, 0, …\n$ GPA.D.or.lower.Verbal                                   &lt;int&gt; 0, 466, 435, 0…\n$ GPA.No.response.Math                                    &lt;int&gt; 0, 0, 0, 0, 0,…\n$ GPA.No.response.Test.takers                             &lt;int&gt; 225, 427, 919,…\n$ GPA.No.response.Verbal                                  &lt;int&gt; 0, 0, 0, 0, 0,…\n$ Gender.Female.Math                                      &lt;int&gt; 538, 505, 513,…\n$ Gender.Female.Test.takers                               &lt;int&gt; 2072, 2161, 98…\n$ Gender.Female.Verbal                                    &lt;int&gt; 561, 521, 522,…\n$ Gender.Male.Math                                        &lt;int&gt; 582, 535, 549,…\n$ Gender.Male.Test.takers                                 &lt;int&gt; 1913, 1835, 83…\n$ Gender.Male.Verbal                                      &lt;int&gt; 574, 526, 531,…\n$ Score.Ranges.Between.200.to.300.Math.Females            &lt;int&gt; 22, 30, 119, 1…\n$ Score.Ranges.Between.200.to.300.Math.Males              &lt;int&gt; 10, 20, 72, 7,…\n$ Score.Ranges.Between.200.to.300.Math.Total              &lt;int&gt; 32, 50, 191, 1…\n$ Score.Ranges.Between.200.to.300.Verbal.Females          &lt;int&gt; 14, 26, 115, 9…\n$ Score.Ranges.Between.200.to.300.Verbal.Males            &lt;int&gt; 17, 26, 86, 3,…\n$ Score.Ranges.Between.200.to.300.Verbal.Total            &lt;int&gt; 31, 52, 201, 1…\n$ Score.Ranges.Between.300.to.400.Math.Females            &lt;int&gt; 173, 233, 881,…\n$ Score.Ranges.Between.300.to.400.Math.Males              &lt;int&gt; 93, 153, 450, …\n$ Score.Ranges.Between.300.to.400.Math.Total              &lt;int&gt; 266, 386, 1331…\n$ Score.Ranges.Between.300.to.400.Verbal.Females          &lt;int&gt; 123, 218, 739,…\n$ Score.Ranges.Between.300.to.400.Verbal.Males            &lt;int&gt; 84, 171, 613, …\n$ Score.Ranges.Between.300.to.400.Verbal.Total            &lt;int&gt; 207, 389, 1352…\n$ Score.Ranges.Between.400.to.500.Math.Females            &lt;int&gt; 514, 696, 3215…\n$ Score.Ranges.Between.400.to.500.Math.Males              &lt;int&gt; 293, 485, 1948…\n$ Score.Ranges.Between.400.to.500.Math.Total              &lt;int&gt; 807, 1181, 516…\n$ Score.Ranges.Between.400.to.500.Verbal.Females          &lt;int&gt; 430, 656, 3048…\n$ Score.Ranges.Between.400.to.500.Verbal.Males            &lt;int&gt; 332, 552, 2398…\n$ Score.Ranges.Between.400.to.500.Verbal.Total            &lt;int&gt; 762, 1208, 544…\n$ Score.Ranges.Between.500.to.600.Math.Females            &lt;int&gt; 722, 813, 3576…\n$ Score.Ranges.Between.500.to.600.Math.Males              &lt;int&gt; 614, 616, 3152…\n$ Score.Ranges.Between.500.to.600.Math.Total              &lt;int&gt; 1336, 1429, 67…\n$ Score.Ranges.Between.500.to.600.Verbal.Females          &lt;int&gt; 690, 729, 3661…\n$ Score.Ranges.Between.500.to.600.Verbal.Males            &lt;int&gt; 617, 596, 3101…\n$ Score.Ranges.Between.500.to.600.Verbal.Total            &lt;int&gt; 1307, 1325, 67…\n$ Score.Ranges.Between.600.to.700.Math.Females            &lt;int&gt; 485, 342, 1688…\n$ Score.Ranges.Between.600.to.700.Math.Males              &lt;int&gt; 611, 445, 2126…\n$ Score.Ranges.Between.600.to.700.Math.Total              &lt;int&gt; 1096, 787, 381…\n$ Score.Ranges.Between.600.to.700.Verbal.Females          &lt;int&gt; 596, 423, 1831…\n$ Score.Ranges.Between.600.to.700.Verbal.Males            &lt;int&gt; 613, 375, 1679…\n$ Score.Ranges.Between.600.to.700.Verbal.Total            &lt;int&gt; 1209, 798, 351…\n$ Score.Ranges.Between.700.to.800.Math.Females            &lt;int&gt; 156, 47, 327, …\n$ Score.Ranges.Between.700.to.800.Math.Males              &lt;int&gt; 292, 116, 630,…\n$ Score.Ranges.Between.700.to.800.Math.Total              &lt;int&gt; 448, 163, 957,…\n$ Score.Ranges.Between.700.to.800.Verbal.Females          &lt;int&gt; 219, 109, 412,…\n$ Score.Ranges.Between.700.to.800.Verbal.Males            &lt;int&gt; 250, 115, 501,…\n$ Score.Ranges.Between.700.to.800.Verbal.Total            &lt;int&gt; 469, 224, 913,…\n\n\n  Year State.Code State.Name Total.Math Total.Test.takers Total.Verbal\n1 2005         AL    Alabama        559              3985          567\n2 2005         AK     Alaska        519              3996          523\n3 2005         AZ    Arizona        530             18184          526\n4 2005         AR   Arkansas        552              1600          563\n5 2005         CA California        522            186552          504\n6 2005         CO   Colorado        560             11990          560\n  Academic.Subjects.Arts.Music.Average.GPA\n1                                     3.92\n2                                     3.76\n3                                     3.85\n4                                     3.90\n5                                     3.76\n6                                     3.88\n  Academic.Subjects.Arts.Music.Average.Years\n1                                        2.2\n2                                        1.9\n3                                        2.1\n4                                        2.2\n5                                        1.8\n6                                        2.2\n  Academic.Subjects.English.Average.GPA Academic.Subjects.English.Average.Years\n1                                  3.53                                     3.9\n2                                  3.35                                     3.9\n3                                  3.45                                     3.9\n4                                  3.61                                     4.0\n5                                  3.32                                     3.8\n6                                  3.49                                     4.0\n  Academic.Subjects.Foreign.Languages.Average.GPA\n1                                            3.54\n2                                            3.34\n3                                            3.41\n4                                            3.64\n5                                            3.29\n6                                            3.41\n  Academic.Subjects.Foreign.Languages.Average.Years\n1                                               2.6\n2                                               2.1\n3                                               2.6\n4                                               2.6\n5                                               2.8\n6                                               3.1\n  Academic.Subjects.Mathematics.Average.GPA\n1                                      3.41\n2                                      3.06\n3                                      3.25\n4                                      3.46\n5                                      3.05\n6                                      3.33\n  Academic.Subjects.Mathematics.Average.Years\n1                                         4.0\n2                                         3.5\n3                                         3.9\n4                                         4.1\n5                                         3.7\n6                                         3.9\n  Academic.Subjects.Natural.Sciences.Average.GPA\n1                                           3.52\n2                                           3.25\n3                                           3.43\n4                                           3.55\n5                                           3.20\n6                                           3.43\n  Academic.Subjects.Natural.Sciences.Average.Years\n1                                              3.9\n2                                              3.2\n3                                              3.4\n4                                              3.7\n5                                              3.2\n6                                              3.7\n  Academic.Subjects.Social.Sciences.History.Average.GPA\n1                                                  3.59\n2                                                  3.39\n3                                                  3.55\n4                                                  3.67\n5                                                  3.38\n6                                                  3.56\n  Academic.Subjects.Social.Sciences.History.Average.Years\n1                                                     3.9\n2                                                     3.4\n3                                                     3.3\n4                                                     3.6\n5                                                     3.3\n6                                                     3.7\n  Family.Income.Between.20.40k.Math Family.Income.Between.20.40k.Test.takers\n1                               513                                      324\n2                               492                                      401\n3                               498                                     2121\n4                               513                                      180\n5                               477                                    26161\n6                               533                                      948\n  Family.Income.Between.20.40k.Verbal Family.Income.Between.40.60k.Math\n1                                 527                               539\n2                                 500                               517\n3                                 495                               520\n4                                 526                               543\n5                                 458                               506\n6                                 535                               543\n  Family.Income.Between.40.60k.Test.takers Family.Income.Between.40.60k.Verbal\n1                                      442                                 551\n2                                      539                                 522\n3                                     2270                                 518\n4                                      245                                 555\n5                                    18347                                 494\n6                                     1287                                 548\n  Family.Income.Between.60.80k.Math Family.Income.Between.60.80k.Test.takers\n1                               550                                      473\n2                               513                                      603\n3                               524                                     2372\n4                               553                                      227\n5                               521                                    17937\n6                               553                                     1550\n  Family.Income.Between.60.80k.Verbal Family.Income.Between.80.100k.Math\n1                                 564                                566\n2                                 519                                528\n3                                 523                                534\n4                                 570                                570\n5                                 511                                535\n6                                 552                                562\n  Family.Income.Between.80.100k.Test.takers\n1                                       475\n2                                       444\n3                                      1866\n4                                       147\n5                                     14120\n6                                      1427\n  Family.Income.Between.80.100k.Verbal Family.Income.Less.than.20k.Math\n1                                  577                              462\n2                                  534                              464\n3                                  533                              485\n4                                  580                              489\n5                                  525                              451\n6                                  560                              514\n  Family.Income.Less.than.20k.Test.takers Family.Income.Less.than.20k.Verbal\n1                                     175                                474\n2                                     191                                467\n3                                     891                                474\n4                                     107                                486\n5                                   19323                                421\n6                                     324                                505\n  Family.Income.More.than.100k.Math Family.Income.More.than.100k.Test.takers\n1                               588                                      980\n2                               541                                      540\n3                               554                                     3083\n4                               572                                      314\n5                               566                                    27984\n6                               574                                     2662\n  Family.Income.More.than.100k.Verbal GPA.A.minus.Math GPA.A.minus.Test.takers\n1                                 590              569                     724\n2                                 544              544                     673\n3                                 546              541                    3334\n4                                 589              559                     298\n5                                 551              562                   30545\n6                                 568              573                    2323\n  GPA.A.minus.Verbal GPA.A.plus.Math GPA.A.plus.Test.takers GPA.A.plus.Verbal\n1                575             622                    563               623\n2                546             600                    173               604\n3                535             605                   1684               593\n4                572             629                    273               639\n5                538             625                   7502               603\n6                570             627                   1098               614\n  GPA.A.Math GPA.A.Test.takers GPA.A.Verbal GPA.B.Math GPA.B.Test.takers\n1        600              1032          608        514              1253\n2        580               671          578        492              1622\n3        571              3854          563        498              7193\n4        579               457          583        492               437\n5        592             25546          565        494             84659\n6        602              2736          598        526              4312\n  GPA.B.Verbal GPA.C.Math GPA.C.Test.takers GPA.C.Verbal GPA.D.or.lower.Math\n1          525        436               188          451                   0\n2          499        466               418          472                 424\n3          499        458              1184          464                 439\n4          511        419                57          436                   0\n5          480        434             18839          427                 419\n6          529        484               732          489                 457\n  GPA.D.or.lower.Test.takers GPA.D.or.lower.Verbal GPA.No.response.Math\n1                          0                     0                    0\n2                         12                   466                    0\n3                         16                   435                    0\n4                          0                     0                    0\n5                        240                   408                    0\n6                         12                   462                    0\n  GPA.No.response.Test.takers GPA.No.response.Verbal Gender.Female.Math\n1                         225                      0                538\n2                         427                      0                505\n3                         919                      0                513\n4                          78                      0                536\n5                       19221                      0                504\n6                         777                      0                546\n  Gender.Female.Test.takers Gender.Female.Verbal Gender.Male.Math\n1                      2072                  561              582\n2                      2161                  521              535\n3                      9806                  522              549\n4                       859                  558              570\n5                    102944                  499              543\n6                      6407                  558              577\n  Gender.Male.Test.takers Gender.Male.Verbal\n1                    1913                574\n2                    1835                526\n3                    8378                531\n4                     741                570\n5                   83608                510\n6                    5583                561\n  Score.Ranges.Between.200.to.300.Math.Females\n1                                           22\n2                                           30\n3                                          119\n4                                           12\n5                                         2978\n6                                           40\n  Score.Ranges.Between.200.to.300.Math.Males\n1                                         10\n2                                         20\n3                                         72\n4                                          7\n5                                       1453\n6                                         24\n  Score.Ranges.Between.200.to.300.Math.Total\n1                                         32\n2                                         50\n3                                        191\n4                                         19\n5                                       4431\n6                                         64\n  Score.Ranges.Between.200.to.300.Verbal.Females\n1                                             14\n2                                             26\n3                                            115\n4                                              9\n5                                           3382\n6                                             39\n  Score.Ranges.Between.200.to.300.Verbal.Males\n1                                           17\n2                                           26\n3                                           86\n4                                            3\n5                                         2433\n6                                           22\n  Score.Ranges.Between.200.to.300.Verbal.Total\n1                                           31\n2                                           52\n3                                          201\n4                                           12\n5                                         5815\n6                                           61\n  Score.Ranges.Between.300.to.400.Math.Females\n1                                          173\n2                                          233\n3                                          881\n4                                           68\n5                                        14595\n6                                          313\n  Score.Ranges.Between.300.to.400.Math.Males\n1                                         93\n2                                        153\n3                                        450\n4                                         31\n5                                       7159\n6                                        202\n  Score.Ranges.Between.300.to.400.Math.Total\n1                                        266\n2                                        386\n3                                       1331\n4                                         99\n5                                      21754\n6                                        515\n  Score.Ranges.Between.300.to.400.Verbal.Females\n1                                            123\n2                                            218\n3                                            739\n4                                             46\n5                                          15386\n6                                            257\n  Score.Ranges.Between.300.to.400.Verbal.Males\n1                                           84\n2                                          171\n3                                          613\n4                                           42\n5                                        10784\n6                                          212\n  Score.Ranges.Between.300.to.400.Verbal.Total\n1                                          207\n2                                          389\n3                                         1352\n4                                           88\n5                                        26170\n6                                          469\n  Score.Ranges.Between.400.to.500.Math.Females\n1                                          514\n2                                          696\n3                                         3215\n4                                          210\n5                                        31530\n6                                         1529\n  Score.Ranges.Between.400.to.500.Math.Males\n1                                        293\n2                                        485\n3                                       1948\n4                                        137\n5                                      20172\n6                                        927\n  Score.Ranges.Between.400.to.500.Math.Total\n1                                        807\n2                                       1181\n3                                       5163\n4                                        347\n5                                      51702\n6                                       2456\n  Score.Ranges.Between.400.to.500.Verbal.Females\n1                                            430\n2                                            656\n3                                           3048\n4                                            183\n5                                          32897\n6                                           1343\n  Score.Ranges.Between.400.to.500.Verbal.Males\n1                                          332\n2                                          552\n3                                         2398\n4                                          141\n5                                        25260\n6                                         1140\n  Score.Ranges.Between.400.to.500.Verbal.Total\n1                                          762\n2                                         1208\n3                                         5446\n4                                          324\n5                                        58157\n6                                         2483\n  Score.Ranges.Between.500.to.600.Math.Females\n1                                          722\n2                                          813\n3                                         3576\n4                                          316\n5                                        30765\n6                                         2524\n  Score.Ranges.Between.500.to.600.Math.Males\n1                                        614\n2                                        616\n3                                       3152\n4                                        244\n5                                      26052\n6                                       1889\n  Score.Ranges.Between.500.to.600.Math.Total\n1                                       1336\n2                                       1429\n3                                       6728\n4                                        560\n5                                      56817\n6                                       4413\n  Score.Ranges.Between.500.to.600.Verbal.Females\n1                                            690\n2                                            729\n3                                           3661\n4                                            302\n5                                          30190\n6                                           2529\n  Score.Ranges.Between.500.to.600.Verbal.Males\n1                                          617\n2                                          596\n3                                         3101\n4                                          236\n5                                        25399\n6                                         2125\n  Score.Ranges.Between.500.to.600.Verbal.Total\n1                                         1307\n2                                         1325\n3                                         6762\n4                                          538\n5                                        55589\n6                                         4654\n  Score.Ranges.Between.600.to.700.Math.Females\n1                                          485\n2                                          342\n3                                         1688\n4                                          204\n5                                        17625\n6                                         1619\n  Score.Ranges.Between.600.to.700.Math.Males\n1                                        611\n2                                        445\n3                                       2126\n4                                        239\n5                                      19980\n6                                       1864\n  Score.Ranges.Between.600.to.700.Math.Total\n1                                       1096\n2                                        787\n3                                       3814\n4                                        443\n5                                      37605\n6                                       3483\n  Score.Ranges.Between.600.to.700.Verbal.Females\n1                                            596\n2                                            423\n3                                           1831\n4                                            242\n5                                          16078\n6                                           1708\n  Score.Ranges.Between.600.to.700.Verbal.Males\n1                                          613\n2                                          375\n3                                         1679\n4                                          226\n5                                        14966\n6                                         1610\n  Score.Ranges.Between.600.to.700.Verbal.Total\n1                                         1209\n2                                          798\n3                                         3510\n4                                          468\n5                                        31044\n6                                         3318\n  Score.Ranges.Between.700.to.800.Math.Females\n1                                          156\n2                                           47\n3                                          327\n4                                           49\n5                                         5451\n6                                          382\n  Score.Ranges.Between.700.to.800.Math.Males\n1                                        292\n2                                        116\n3                                        630\n4                                         83\n5                                       8792\n6                                        677\n  Score.Ranges.Between.700.to.800.Math.Total\n1                                        448\n2                                        163\n3                                        957\n4                                        132\n5                                      14243\n6                                       1059\n  Score.Ranges.Between.700.to.800.Verbal.Females\n1                                            219\n2                                            109\n3                                            412\n4                                             77\n5                                           5011\n6                                            531\n  Score.Ranges.Between.700.to.800.Verbal.Males\n1                                          250\n2                                          115\n3                                          501\n4                                           93\n5                                         4766\n6                                          474\n  Score.Ranges.Between.700.to.800.Verbal.Total\n1                                          469\n2                                          224\n3                                          913\n4                                          170\n5                                         9777\n6                                         1005\n\nhead(skim(score))\n\n\nData summary\n\n\nName\nscore\n\n\nNumber of rows\n577\n\n\nNumber of columns\n99\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nState.Code\n0\n1\n2\n2\n0\n53\n0\n\n\nState.Name\n0\n1\n4\n20\n0\n53\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n2010.02\n3.17\n2005\n2007\n2010\n2013\n2015\n▇▅▅▆▆\n\n\nTotal.Math\n0\n1\n535.68\n46.17\n383\n504\n527\n571\n619\n▁▁▇▆▅\n\n\nTotal.Test.takers\n0\n1\n27914.24\n45602.11\n134\n2536\n6468\n35799\n241553\n▇▁▁▁▁\n\n\nTotal.Verbal\n0\n1\n531.33\n44.32\n401\n496\n522\n572\n612\n▁▂▇▃▅"
  },
  {
    "objectID": "posts/Pentafolder/index.html#data-dictionary",
    "href": "posts/Pentafolder/index.html#data-dictionary",
    "title": "School Scores",
    "section": "Data Dictionary",
    "text": "Data Dictionary"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section",
    "href": "posts/Pentafolder/index.html#section",
    "title": "School Scores",
    "section": "—————————————————————–",
    "text": "—————————————————————–\n\nQualitative Variables:\n\nState.Name (For IDENTIFYING the State of student)\n\n\nState.Code (For IDENTIFYING the State by initials)"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-1",
    "href": "posts/Pentafolder/index.html#section-1",
    "title": "School Scores",
    "section": "——-",
    "text": "——-\n\nQuantitative Variables:\n\n\nLiterally all other rows"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-2",
    "href": "posts/Pentafolder/index.html#section-2",
    "title": "School Scores",
    "section": "—————————————————————–",
    "text": "—————————————————————–"
  },
  {
    "objectID": "posts/Pentafolder/index.html#observations",
    "href": "posts/Pentafolder/index.html#observations",
    "title": "School Scores",
    "section": "Observations",
    "text": "Observations\n\nIt has a LOT of variables. Mostly quantitative variables that are scores of (along with number of) candidates in various tests & subjects."
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-3",
    "href": "posts/Pentafolder/index.html#section-3",
    "title": "School Scores",
    "section": "————————————",
    "text": "————————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#research-hypothesis",
    "href": "posts/Pentafolder/index.html#research-hypothesis",
    "title": "School Scores",
    "section": "Research & Hypothesis",
    "text": "Research & Hypothesis\n\nTarget Variables could be Total.Math, Total.Verbal because they give a summary of marks of students in that field.\n\n\nPredictor Variables could be the Family.Income.More.Than.000 as they may influence test scores. Also variables such as Academic.Subjects.Average.GPA could be the predictors. (All subjects)\n\n\nThey must have surveyed schools of every state to dig for student grades & their family background."
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-4",
    "href": "posts/Pentafolder/index.html#section-4",
    "title": "School Scores",
    "section": "————————————",
    "text": "————————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#code",
    "href": "posts/Pentafolder/index.html#code",
    "title": "School Scores",
    "section": "Code",
    "text": "Code\n\n#| label: data-preprocessing\n\n#CODE:\n\n#FOR GETTING THE TABLE WITH SCORES BY SUBJECT\n\n\n# Extracting the two columns\n\ncompact_score &lt;- score[, c(\"Academic.Subjects.Arts.Music.Average.GPA\", \"Academic.Subjects.English.Average.GPA\",\"Academic.Subjects.Foreign.Languages.Average.GPA\",\"Academic.Subjects.Mathematics.Average.GPA\",\"Academic.Subjects.Natural.Sciences.Average.GPA\",\"Academic.Subjects.Social.Sciences.History.Average.GPA\")]\n\n# Renaming the columns because the names are annoyingly big\n\ncolnames(compact_score) &lt;- c(\"Music\", \"English\",\"Foreign Languages\",\"Mathematics\",\"NaturalSciences\",\"SocialSciences\")\n\n\nhead(compact_score)\n\n  Music English Foreign Languages Mathematics NaturalSciences SocialSciences\n1  3.92    3.53              3.54        3.41            3.52           3.59\n2  3.76    3.35              3.34        3.06            3.25           3.39\n3  3.85    3.45              3.41        3.25            3.43           3.55\n4  3.90    3.61              3.64        3.46            3.55           3.67\n5  3.76    3.32              3.29        3.05            3.20           3.38\n6  3.88    3.49              3.41        3.33            3.43           3.56"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-5",
    "href": "posts/Pentafolder/index.html#section-5",
    "title": "School Scores",
    "section": "—————————————————————————-",
    "text": "—————————————————————————-"
  },
  {
    "objectID": "posts/Pentafolder/index.html#questions",
    "href": "posts/Pentafolder/index.html#questions",
    "title": "School Scores",
    "section": "Questions:",
    "text": "Questions:\n\nWhat is the correlation between students’ GPA in a subject & GPA in other subjects?\n\n\nIf a student is good at a subject, how likely are they to be good at other subjects as well?"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-6",
    "href": "posts/Pentafolder/index.html#section-6",
    "title": "School Scores",
    "section": "——————————-",
    "text": "——————————-"
  },
  {
    "objectID": "posts/Pentafolder/index.html#code-1",
    "href": "posts/Pentafolder/index.html#code-1",
    "title": "School Scores",
    "section": "Code",
    "text": "Code\n\nGGally::ggpairs(\n  compact_score %&gt;% drop_na(),\n\n  columns = c(\n    \"Music\", \"English\", \"Foreign Languages\", \"Mathematics\",\n    \"NaturalSciences\",\"SocialSciences\"),\n  \n  switch = \"both\",\n\ntitle = \"Subject Scores Correlations \"\n)\n\n\n\n\n\n\n\n\n\nWe got the plots, but they seem a little shabby…\n\nGGally::ggpairs(\n  compact_score %&gt;% drop_na(),\n\n  columns = c(\n    \"Music\", \"English\", \"Foreign Languages\", \"Mathematics\",\n    \"NaturalSciences\",\"SocialSciences\"),\n  \n  switch = \"both\",\n\n\n  lower = list(continuous = wrap(\"smooth\", alpha = 0.1, se = FALSE)),\n  title = \"Subject Scores Correlations \"\n  \n)\n\n\n\n\n\n\n\n\n\n\nSeems a little better? Not sure how to make it even clearer. Probably will have to change the scale on each graph."
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-7",
    "href": "posts/Pentafolder/index.html#section-7",
    "title": "School Scores",
    "section": "——————————————————————–",
    "text": "——————————————————————–"
  },
  {
    "objectID": "posts/Pentafolder/index.html#questions-1",
    "href": "posts/Pentafolder/index.html#questions-1",
    "title": "School Scores",
    "section": "Questions",
    "text": "Questions\n\nHow is the distribution of students’ marks in maths exam across all income levels?\n\n\nDoes the family income predict a student’s success rate in mathematics? Or are the differences in their scores insignificant?\n\n\nWhich income classes generally have highest and lowest math scores?"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-8",
    "href": "posts/Pentafolder/index.html#section-8",
    "title": "School Scores",
    "section": "————————————————————————",
    "text": "————————————————————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#code-2",
    "href": "posts/Pentafolder/index.html#code-2",
    "title": "School Scores",
    "section": "Code",
    "text": "Code\n\nAttempt 1\n\n#Again, extracting columns for info about Math scores & Family Incomes\n\n#incomemath &lt;- score[,c('State.Code','Family.Income.Less.than.20k.Math','Family.Income.Between.20.40k.Math','Family.Income.Between.40.60k.Math','Family.Income.Between.60.80k.Math','Family.Income.Between.80.100k.Math','Family.Income.More.than.100k.Math'    )]\n\n\n#colnames(incomemath) &lt;- c(\"Alabama\",\"&lt;20k\",\"20-40k\", \"40-60k\",\"60-80k\",\"80-100k\",\"&gt;100k\")\n\n\n#incomemath %&gt;%  filter(State.Code=='AL')\n\n\n\nWell that does not give desired result.\n\n\nAttempt 2\n\n#library(dplyr)\n\n# Assuming 'State.Code' is part of the 'score' dataframe\n# Extract the math columns based on family income\n#incomemath &lt;- score[, c('Family.Income.Less.than.20k.Math',\n                      #  'Family.Income.Between.20.40k.Math',\n                       # 'Family.Income.Between.40.60k.Math',\n                       # 'Family.Income.Between.60.80k.Math',\n                      #  'Family.Income.Between.80.100k.Math',\n                      #  'Family.Income.More.than.100k.Math')]\n\n# Rename the columns for compactness\n#colnames(incomemath) &lt;- c(\"&lt;20k\", \"20-40k\", \"40-60k\", \"60-80k\", \"80-100k\", \"&gt;100k\")\n\n# Combine 'incomemath' with 'State.Code' for filtering purposes\n# We assume that 'State.Code' exists in 'score'\n#incomemath &lt;- cbind(State.Code = score$State.Code, incomemath)\n\n# Filter the row where 'State.Code' is 'AL'\n#result &lt;- incomemath %&gt;% filter(State.Code == 'AL')\n\n# Display the result as a table\n#print(result)\n\n\n\nWell that does not give desired result.\n\n\nAttempt 3\n\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Extract math columns \nincomemath &lt;- score[c('Family.Income.Less.than.20k.Math',\n                        'Family.Income.Between.20.40k.Math',\n                        'Family.Income.Between.40.60k.Math',\n                        'Family.Income.Between.60.80k.Math',\n                        'Family.Income.Between.80.100k.Math',\n                        'Family.Income.More.than.100k.Math')]\n\n# Rename the columns for compactness\ncolnames(incomemath) &lt;- c(\"&lt;20k\", \"20-40k\", \"40-60k\", \"60-80k\", \"80-100k\", \"&gt;100k\")\n\n\n\n# Pivot to long format\nlong_format &lt;- incomemath %&gt;%\n  pivot_longer(cols = everything(),      # Pivot all remaining columns\n               names_to = \"Income_Class\", # Create a new column 'Income.Range' for the previous column names\n               values_to = \"Math_Scores\")  # Store the values in a new column 'Math.Score'\n\n# Display the result\nhead(long_format)\n\n# A tibble: 6 × 2\n  Income_Class Math_Scores\n  &lt;chr&gt;              &lt;int&gt;\n1 &lt;20k                 462\n2 20-40k               513\n3 40-60k               539\n4 60-80k               550\n5 80-100k              566\n6 &gt;100k                588\n\n\n\n\nI admit that I took some assistance from AI for the pivot() function. :\\"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-9",
    "href": "posts/Pentafolder/index.html#section-9",
    "title": "School Scores",
    "section": "——————————————————————",
    "text": "——————————————————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#insights",
    "href": "posts/Pentafolder/index.html#insights",
    "title": "School Scores",
    "section": "Insights",
    "text": "Insights\n\nAll the graphs show a strong, positive & linear trend in scores of different subjects. All correlation points are very high, (3 stars) with the lowest one being 0.94!\n\n\nWe can definitely conclude that students who do well in one subject do well in other subjects as well. (So it is not the subjects’ fault if you are bad at it.)"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-10",
    "href": "posts/Pentafolder/index.html#section-10",
    "title": "School Scores",
    "section": "——————————————————————–",
    "text": "——————————————————————–"
  },
  {
    "objectID": "posts/Pentafolder/index.html#inference",
    "href": "posts/Pentafolder/index.html#inference",
    "title": "School Scores",
    "section": "Inference",
    "text": "Inference\n\nI actually did not expect music to show such a positive response in terms of boosting scores of other subjects. Most other graphs have 2 humps but we can see a sharp high density concentration in the music column."
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-11",
    "href": "posts/Pentafolder/index.html#section-11",
    "title": "School Scores",
    "section": "———————————————————————–",
    "text": "———————————————————————–"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-12",
    "href": "posts/Pentafolder/index.html#section-12",
    "title": "School Scores",
    "section": "—————————",
    "text": "—————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-13",
    "href": "posts/Pentafolder/index.html#section-13",
    "title": "School Scores",
    "section": "—————————————",
    "text": "—————————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#code-3",
    "href": "posts/Pentafolder/index.html#code-3",
    "title": "School Scores",
    "section": "Code",
    "text": "Code\n\n long_format %&gt;% \n    gf_boxplot( reorder(Income_Class,Math_Scores) ~ Math_Scores ,\n    fill = ~Income_Class,\n    alpha = 0.5\n  ) %&gt;%\n\n  gf_labs(\n    title = \"Math Scores vs Family Income\",\n   \n  ) %&gt;% \n \n  gf_labs(\n    y = \"Income Classes\",\n    x = \"Scores in Math\"\n  )\n\n\n\n\n\n\n\n\n\nHere we have grouped number of students into boxes with income classes on Y Axis .\n\n\n(Also segregated by color.) And their Math Scores are on X Axis. (Collected across all states)"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-14",
    "href": "posts/Pentafolder/index.html#section-14",
    "title": "School Scores",
    "section": "—————————",
    "text": "—————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#insights-1",
    "href": "posts/Pentafolder/index.html#insights-1",
    "title": "School Scores",
    "section": "Insights",
    "text": "Insights\n\nThere are trends in math scores according to the income. Almost everywhere, the math scores are directly proportional to the family income.\n\n\nMost of the students with 100k+ dollars at home have gotten &gt;500 Marks.\n\n\nMore people from the 80-100k class have gotten the highest marks. (Except for the nerd in 20-40k range)\n\n\nAlso, the scores become more clumped together & symmetrical as the income increases (boxes become thinner, along with the lines & median is in the centre)\n\n\nAll groups of income have outliers, however the &lt;20k income group has the outliers clumped into one spot, while &gt;100k group has scattered outliers."
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-15",
    "href": "posts/Pentafolder/index.html#section-15",
    "title": "School Scores",
    "section": "—————————",
    "text": "—————————"
  },
  {
    "objectID": "posts/Pentafolder/index.html#inference-1",
    "href": "posts/Pentafolder/index.html#inference-1",
    "title": "School Scores",
    "section": "Inference",
    "text": "Inference\n\nI had half-expected the income to directly influence the math scores, but not this visibly. Because not all rich kids are interested in studying. I believe that it would be more intuitive if this graph was for college/grad students, as rich students (who like math) may have access to top colleges & hence resources to excel there. While a lot of poor students who like math may not have been able to afford college tuition. (Unless Scholarship) But that is also why the lower income categories have a wider distribution, so that only the very interested ones get good marks.\n\n\nBasically, the poorer you are, the more dedicated to math you have to be-compared to your classmates- in order to reach the top. [The average student in the poor class gets poor marks.]"
  },
  {
    "objectID": "posts/Pentafolder/index.html#section-16",
    "href": "posts/Pentafolder/index.html#section-16",
    "title": "School Scores",
    "section": "______________________________________________________________________________________________",
    "text": "______________________________________________________________________________________________"
  },
  {
    "objectID": "posts/Hexafolder/index.html",
    "href": "posts/Hexafolder/index.html",
    "title": "Inference",
    "section": "",
    "text": "#Setup\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(infer)\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(broom) # Clean test results in tibble form\nlibrary(resampledata) # Datasets from Chihara and Hesterberg's book\n\n\nAttaching package: 'resampledata'\n\nThe following object is masked from 'package:datasets':\n\n    Titanic\n\nlibrary(openintro) # More datasets\n\nLoading required package: airports\nLoading required package: cherryblossom\nLoading required package: usdata\n\nAttaching package: 'openintro'\n\nThe following object is masked from 'package:mosaic':\n\n    dotPlot\n\nThe following objects are masked from 'package:lattice':\n\n    ethanol, lsegments\n\n\n\nCase Study 1: Toy Data\n\nset.seed(40)  # for replication\n# Data as individual vectors ( for t.tests etc)\ny &lt;- rnorm(50, mean = 2, sd = 2)\n\n# And as tibble too\nmydata &lt;- tibble(y = y)\n\n\nx &lt;- rnorm(500, mean = 2, sd = 2)\n\n# And as tibble too\nmydata2 &lt;- tibble(x = x)\n\nmydata\n\n# A tibble: 50 × 1\n        y\n    &lt;dbl&gt;\n 1  2.96 \n 2  2.99 \n 3  0.281\n 4  0.342\n 5  1.36 \n 6 -0.608\n 7 -0.843\n 8  5.49 \n 9  1.42 \n10 -0.618\n# ℹ 40 more rows\n\nmydata2\n\n# A tibble: 500 × 1\n       x\n   &lt;dbl&gt;\n 1  3.83\n 2  3.15\n 3  1.03\n 4  2.03\n 5  4.03\n 6  2.12\n 7  6.54\n 8  3.42\n 9  5.14\n10  3.77\n# ℹ 490 more rows\n\n\n\nmydata %&gt;%\n    gf_density(~y) %&gt;%\n    gf_fitdistr(dist = \"dnorm\") %&gt;%\n    gf_labs(title = \"Densities of Original Data Variables\", subtitle = \"Compared with Normal Density\")\n\n\n\n\n\n\n\nmydata2 %&gt;%\n    gf_density(~x) %&gt;%\n    gf_fitdistr(dist = \"dnorm\") %&gt;%\n    gf_labs(title = \"Densities of 500 Original Data Variables\", subtitle = \"Compared with Normal Density\")\n\n\n\n\n\n\n\n\n\nWe see that upon increasing the sample size from 50 to 500, the distribution approaches a Bell Curve.\n\n# t-test\nt1 &lt;- mosaic::t_test(\n          y, # Name of variable\n          mu = 0, # belief of population mean\n          alternative = \"two.sided\") %&gt;% # Check both sides\n  \n  broom::tidy() # Make results presentable, and plottable!!\nt1\n\n# A tibble: 1 × 8\n  estimate statistic     p.value parameter conf.low conf.high method alternative\n     &lt;dbl&gt;     &lt;dbl&gt;       &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      \n1     2.05      6.79     1.43e-8        49     1.44      2.65 One S… two.sided  \n\n\n\n\n\nCase Study 2: Exam Data\n\ndata(\"exam_grades\")\nexam_grades\n\n# A tibble: 233 × 6\n   semester sex   exam1 exam2 exam3 course_grade\n   &lt;chr&gt;    &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;\n 1 2000-1   Man    84.5  69.5  86.5         76.3\n 2 2000-1   Man    80    74    67           75.4\n 3 2000-1   Man    56    70    71.5         67.1\n 4 2000-1   Man    64    61    67.5         63.5\n 5 2000-1   Man    90.5  72.5  75           72.4\n 6 2000-1   Man    74    78.5  84.5         71.4\n 7 2000-1   Man    60.5  44    58           56.1\n 8 2000-1   Man    89    82    88           78.0\n 9 2000-1   Woman  87.5  86.5  95           82.9\n10 2000-1   Man    91    98    88           89.1\n# ℹ 223 more rows\n\n\n\nexam_grades %&gt;%\n    gf_density(~course_grade) %&gt;%\n    gf_fitdistr(dist = \"dnorm\") %&gt;%\n    gf_labs(title = \"Density of Course Grade\", subtitle = \"Compared with Normal Density\")\n\n\n\n\n\n\n\n\n\nstats::shapiro.test(x = exam_grades$course_grade) %&gt;%\n    broom::tidy()\n\n# A tibble: 1 × 3\n  statistic p.value method                     \n      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                      \n1     0.994   0.471 Shapiro-Wilk normality test\n\n\n\nlibrary(nortest)\n# Especially when we have &gt;= 5000 observations\nnortest::ad.test(x = exam_grades$course_grade) %&gt;%\n    broom::tidy()\n\n# A tibble: 1 × 3\n  statistic p.value method                         \n      &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                          \n1     0.331   0.512 Anderson-Darling normality test\n\n\n\n# t-test\nt4 &lt;- mosaic::t_test(\n          exam_grades$course_grade, # Name of variable\n          mu = 80, # belief\n          alternative = \"two.sided\") %&gt;% # Check both sides\nbroom::tidy()\nt4\n\n# A tibble: 1 × 8\n  estimate statistic  p.value parameter conf.low conf.high method    alternative\n     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;      \n1     72.2     -12.1 2.19e-26       232     71.0      73.5 One Samp… two.sided"
  },
  {
    "objectID": "posts/Pentafolder/Mov/index.html",
    "href": "posts/Pentafolder/Mov/index.html",
    "title": "Movie",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\nlibrary(mosaic)\n\n\nfilm &lt;- read_delim(file = '../../../datasets/movie_profit.csv', delim = ';')\n\nRows: 3310 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr  (4): movie, distributor, mpaa_rating, genre\ndbl  (4): production_budget, domestic_gross, worldwide_gross, decade\nnum  (1): profit_ratio\ndate (1): release_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n(film)\n\n# A tibble: 3,310 × 10\n   release_date movie           production_budget domestic_gross worldwide_gross\n   &lt;date&gt;       &lt;chr&gt;                       &lt;dbl&gt;          &lt;dbl&gt;           &lt;dbl&gt;\n 1 2005-07-22   November                   250000         191862          191862\n 2 1998-08-28   I Married a St…            250000         203134          203134\n 3 1997-03-28   Love and Other…            250000         212285          743216\n 4 2000-07-14   Chuck&Buck                 250000        1055671         1157672\n 5 2011-10-28   Like Crazy                 250000        3395391         3728400\n 6 2003-04-11   Better Luck To…            250000        3802390         3809226\n 7 2017-04-28   Sleight                    250000        3930990         3934450\n 8 2002-06-28   Lovely and Ama…            250000        4210379         4613482\n 9 2012-08-17   Compliance                 270000         319285          830700\n10 2005-05-06   Fighting Tommy…            300000          10514           10514\n# ℹ 3,300 more rows\n# ℹ 5 more variables: distributor &lt;chr&gt;, mpaa_rating &lt;chr&gt;, genre &lt;chr&gt;,\n#   profit_ratio &lt;dbl&gt;, decade &lt;dbl&gt;\n\n\n\nskim(film)\n\n\nData summary\n\n\nName\nfilm\n\n\nNumber of rows\n3310\n\n\nNumber of columns\n10\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n4\n\n\nDate\n1\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmovie\n0\n1.00\n1\n35\n0\n3310\n0\n\n\ndistributor\n42\n0.99\n5\n18\n0\n6\n0\n\n\nmpaa_rating\n130\n0.96\n1\n5\n0\n4\n0\n\n\ngenre\n0\n1.00\n5\n9\n0\n5\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nrelease_date\n0\n1\n1936-02-05\n2017-12-22\n2005-06-30\n1723\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nproduction_budget\n0\n1\n3.326794e+07\n3.460741e+07\n2.50e+05\n9.500000e+06\n2.000000e+07\n4.500000e+07\n1.750000e+08\n▇▂▁▁▁\n\n\ndomestic_gross\n0\n1\n4.551509e+07\n5.852794e+07\n0.00e+00\n6.530094e+06\n2.558731e+07\n6.046695e+07\n4.745447e+08\n▇▁▁▁▁\n\n\nworldwide_gross\n0\n1\n9.384123e+07\n1.389514e+08\n4.23e+02\n1.086144e+07\n4.040903e+07\n1.184703e+08\n1.162782e+09\n▇▁▁▁▁\n\n\nprofit_ratio\n0\n1\n4.319388e+14\n1.501736e+15\n1.38e+10\n7.861269e+13\n1.962499e+14\n3.942158e+14\n4.315179e+16\n▇▁▁▁▁\n\n\ndecade\n0\n1\n1.998790e+03\n1.061000e+01\n1.93e+03\n1.990000e+03\n2.000000e+03\n2.010000e+03\n2.010000e+03\n▁▁▁▃▇\n\n\n\n\nglimpse (film)\n\nRows: 3,310\nColumns: 10\n$ release_date      &lt;date&gt; 2005-07-22, 1998-08-28, 1997-03-28, 2000-07-14, 201…\n$ movie             &lt;chr&gt; \"November\", \"I Married a Strange Person\", \"Love and …\n$ production_budget &lt;dbl&gt; 250000, 250000, 250000, 250000, 250000, 250000, 2500…\n$ domestic_gross    &lt;dbl&gt; 191862, 203134, 212285, 1055671, 3395391, 3802390, 3…\n$ worldwide_gross   &lt;dbl&gt; 191862, 203134, 743216, 1157672, 3728400, 3809226, 3…\n$ distributor       &lt;chr&gt; \"Other\", \"Other\", \"Other\", \"Other\", \"Paramount Pictu…\n$ mpaa_rating       &lt;chr&gt; \"R\", NA, \"R\", \"R\", \"PG-13\", \"R\", \"R\", \"R\", \"R\", \"R\",…\n$ genre             &lt;chr&gt; \"Drama\", \"Comedy\", \"Comedy\", \"Drama\", \"Drama\", \"Dram…\n$ profit_ratio      &lt;dbl&gt; 7.674480e+13, 8.125360e+13, 2.972864e+14, 4.630688e+…\n$ decade            &lt;dbl&gt; 2000, 1990, 1990, 2000, 2010, 2000, 2010, 2000, 2010…\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfilm_modified &lt;- film %&gt;% \n  dplyr::mutate(\n    profit_ratio = as_factor(profit_ratio)\n    )\n\n\nlibrary(ggformula)\n\ngf_bar(genre ~ profit_ratio | distributor  ,  data = film) %&gt;%\n  gf_labs(title = \"Profits to Budget Ratio by Directors\") \n\nWarning: Ignoring unknown aesthetics: .\n\n\nWarning: The following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nActual Graph\n\n\n\n\n\n\n\n\n\n#library(dplyr)\n\n\n#film_profits &lt;- film %&gt;%\n # mutate(profits = 'Costs'/'Budgets' )"
  },
  {
    "objectID": "posts/Pentafolder/Mov/index.html#code",
    "href": "posts/Pentafolder/Mov/index.html#code",
    "title": "Movie",
    "section": "",
    "text": "film_modified &lt;- film %&gt;% \n  dplyr::mutate(\n    profit_ratio = as_factor(profit_ratio)\n    )\n\n\nlibrary(ggformula)\n\ngf_bar(genre ~ profit_ratio | distributor  ,  data = film) %&gt;%\n  gf_labs(title = \"Profits to Budget Ratio by Directors\") \n\nWarning: Ignoring unknown aesthetics: .\n\n\nWarning: The following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?\nThe following aesthetics were dropped during statistical transformation: ..\nℹ This can happen when ggplot fails to infer the correct grouping structure in\n  the data.\nℹ Did you forget to specify a `group` aesthetic or to convert a numerical\n  variable into a factor?"
  },
  {
    "objectID": "posts/Pentafolder/Mov/index.html#inference",
    "href": "posts/Pentafolder/Mov/index.html#inference",
    "title": "Movie",
    "section": "",
    "text": "Actual Graph\n\n\n\n\n\n\n\n\n\n#library(dplyr)\n\n\n#film_profits &lt;- film %&gt;%\n # mutate(profits = 'Costs'/'Budgets' )"
  },
  {
    "objectID": "posts/Hexafolder/Transport/index.html",
    "href": "posts/Hexafolder/Transport/index.html",
    "title": "Grain",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(ggformula)\n\n\ncartelstability &lt;- read_csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/AER/CartelStability.csv\")\n\nRows: 328 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): cartel, season, ice\ndbl (3): rownames, price, quantity\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ncartelstability\n\n# A tibble: 328 × 6\n   rownames price cartel quantity season          ice  \n      &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;     &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;\n 1        1  0.4  yes       13632 Jan  1 - Jan 28 yes  \n 2        2  0.4  yes       20035 Jan  1 - Jan 28 yes  \n 3        3  0.4  yes       16319 Jan  1 - Jan 28 yes  \n 4        4  0.4  yes       12603 Jan  1 - Jan 28 yes  \n 5        5  0.4  yes       23079 Jan 29 - Feb 25 yes  \n 6        6  0.4  yes       19652 Jan 29 - Feb 25 yes  \n 7        7  0.4  yes       16211 Jan 29 - Feb 25 yes  \n 8        8  0.4  yes       22914 Jan 29 - Feb 25 yes  \n 9        9  0.4  yes       23710 Feb 26 - Mar 26 yes  \n10       10  0.35 yes       23036 Feb 26 - Mar 26 yes  \n# ℹ 318 more rows\n\n\n\nglimpse(cartelstability)\n\nRows: 328\nColumns: 6\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ price    &lt;dbl&gt; 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.35, 0…\n$ cartel   &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ quantity &lt;dbl&gt; 13632, 20035, 16319, 12603, 23079, 19652, 16211, 22914, 23710…\n$ season   &lt;chr&gt; \"Jan  1 - Jan 28\", \"Jan  1 - Jan 28\", \"Jan  1 - Jan 28\", \"Jan…\n$ ice      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#Dataset Processing\n\ncartelmod &lt;- cartelstability %&gt;% \n  mutate(\n    season= as.ordered(season),\n    \n    \n    \n    cartel= factor(cartel,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Cartel Operational\",\"Cartel Inoperational\"),\n\n    ),\n    \n    \n    ice= factor(ice,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Frozen Lakes\",\"Fluid Lakes\"),\n\n    ),\n    \n    \n  )\n\nglimpse(cartelmod)\n\nRows: 328\nColumns: 6\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ price    &lt;dbl&gt; 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.35, 0…\n$ cartel   &lt;fct&gt; Cartel Operational, Cartel Operational, Cartel Operational, C…\n$ quantity &lt;dbl&gt; 13632, 20035, 16319, 12603, 23079, 19652, 16211, 22914, 23710…\n$ season   &lt;ord&gt; Jan  1 - Jan 28, Jan  1 - Jan 28, Jan  1 - Jan 28, Jan  1 - J…\n$ ice      &lt;fct&gt; Frozen Lakes, Frozen Lakes, Frozen Lakes, Frozen Lakes, Froze…\n\n\n\ncartelmod \n\n# A tibble: 328 × 6\n   rownames price cartel             quantity season          ice         \n      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;                 &lt;dbl&gt; &lt;ord&gt;           &lt;fct&gt;       \n 1        1  0.4  Cartel Operational    13632 Jan  1 - Jan 28 Frozen Lakes\n 2        2  0.4  Cartel Operational    20035 Jan  1 - Jan 28 Frozen Lakes\n 3        3  0.4  Cartel Operational    16319 Jan  1 - Jan 28 Frozen Lakes\n 4        4  0.4  Cartel Operational    12603 Jan  1 - Jan 28 Frozen Lakes\n 5        5  0.4  Cartel Operational    23079 Jan 29 - Feb 25 Frozen Lakes\n 6        6  0.4  Cartel Operational    19652 Jan 29 - Feb 25 Frozen Lakes\n 7        7  0.4  Cartel Operational    16211 Jan 29 - Feb 25 Frozen Lakes\n 8        8  0.4  Cartel Operational    22914 Jan 29 - Feb 25 Frozen Lakes\n 9        9  0.4  Cartel Operational    23710 Feb 26 - Mar 26 Frozen Lakes\n10       10  0.35 Cartel Operational    23036 Feb 26 - Mar 26 Frozen Lakes\n# ℹ 318 more rows\n\n\n\ncartel2 &lt;- cartelmod %&gt;% \n  group_by(season,cartel,ice) %&gt;% \n  summarise(avg_price= mean(price), avg_haul= mean(quantity)) \n\n`summarise()` has grouped output by 'season', 'cartel'. You can override using\nthe `.groups` argument.\n\ncartel2\n\n# A tibble: 30 × 5\n# Groups:   season, cartel [26]\n   season          cartel               ice          avg_price avg_haul\n   &lt;ord&gt;           &lt;fct&gt;                &lt;fct&gt;            &lt;dbl&gt;    &lt;dbl&gt;\n 1 Apr 24 - May 21 Cartel Operational   Frozen Lakes     0.3     36457.\n 2 Apr 24 - May 21 Cartel Operational   Fluid Lakes      0.27    14150.\n 3 Apr 24 - May 21 Cartel Inoperational Frozen Lakes     0.186   45819.\n 4 Apr 24 - May 21 Cartel Inoperational Fluid Lakes      0.2     29186 \n 5 Aug 14 - Sep 10 Cartel Operational   Fluid Lakes      0.268   17011.\n 6 Aug 14 - Sep 10 Cartel Inoperational Fluid Lakes      0.185   22766 \n 7 Dec  4 - Dec 31 Cartel Operational   Frozen Lakes     0.286   25481.\n 8 Dec  4 - Dec 31 Cartel Operational   Fluid Lakes      0.225   34980 \n 9 Dec  4 - Dec 31 Cartel Inoperational Frozen Lakes     0.181   25642.\n10 Feb 26 - Mar 26 Cartel Operational   Frozen Lakes     0.288   28736.\n# ℹ 20 more rows\n\n\n\n\n\n\n\ncartel2 %&gt;% \ngf_line(avg_price ~ season | ice ,color = ~cartel)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\nggplot(cartel2, aes(y = avg_price, x = `season`)) +\n  geom_line(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels if needed\n  labs(x = \"Price\", y = \"Season\", title = \"Price Index by Weight\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncartel2 %&gt;%\n  gf_point(  avg_price ~ season | ice, color = ~cartel ) %&gt;%\n  \n  gf_line(avg_price ~ season, group = ~cartel) %&gt;%  \n\n  gf_lm() %&gt;%\n  \n  gf_refine(theme(axis.text.x = element_text(angle = 45, hjust = 1))) %&gt;% \n  \n  gf_labs(\n    title = \"Price Index by Ton\",\n    subtitle = \"Railway Firms\"\n  )"
  },
  {
    "objectID": "posts/Hexafolder/Transport/index.html#code",
    "href": "posts/Hexafolder/Transport/index.html#code",
    "title": "Grain",
    "section": "",
    "text": "#Dataset Processing\n\ncartelmod &lt;- cartelstability %&gt;% \n  mutate(\n    season= as.ordered(season),\n    \n    \n    \n    cartel= factor(cartel,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Cartel Operational\",\"Cartel Inoperational\"),\n\n    ),\n    \n    \n    ice= factor(ice,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Frozen Lakes\",\"Fluid Lakes\"),\n\n    ),\n    \n    \n  )\n\nglimpse(cartelmod)\n\nRows: 328\nColumns: 6\n$ rownames &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ price    &lt;dbl&gt; 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.40, 0.35, 0…\n$ cartel   &lt;fct&gt; Cartel Operational, Cartel Operational, Cartel Operational, C…\n$ quantity &lt;dbl&gt; 13632, 20035, 16319, 12603, 23079, 19652, 16211, 22914, 23710…\n$ season   &lt;ord&gt; Jan  1 - Jan 28, Jan  1 - Jan 28, Jan  1 - Jan 28, Jan  1 - J…\n$ ice      &lt;fct&gt; Frozen Lakes, Frozen Lakes, Frozen Lakes, Frozen Lakes, Froze…\n\n\n\ncartelmod \n\n# A tibble: 328 × 6\n   rownames price cartel             quantity season          ice         \n      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;                 &lt;dbl&gt; &lt;ord&gt;           &lt;fct&gt;       \n 1        1  0.4  Cartel Operational    13632 Jan  1 - Jan 28 Frozen Lakes\n 2        2  0.4  Cartel Operational    20035 Jan  1 - Jan 28 Frozen Lakes\n 3        3  0.4  Cartel Operational    16319 Jan  1 - Jan 28 Frozen Lakes\n 4        4  0.4  Cartel Operational    12603 Jan  1 - Jan 28 Frozen Lakes\n 5        5  0.4  Cartel Operational    23079 Jan 29 - Feb 25 Frozen Lakes\n 6        6  0.4  Cartel Operational    19652 Jan 29 - Feb 25 Frozen Lakes\n 7        7  0.4  Cartel Operational    16211 Jan 29 - Feb 25 Frozen Lakes\n 8        8  0.4  Cartel Operational    22914 Jan 29 - Feb 25 Frozen Lakes\n 9        9  0.4  Cartel Operational    23710 Feb 26 - Mar 26 Frozen Lakes\n10       10  0.35 Cartel Operational    23036 Feb 26 - Mar 26 Frozen Lakes\n# ℹ 318 more rows\n\n\n\ncartel2 &lt;- cartelmod %&gt;% \n  group_by(season,cartel,ice) %&gt;% \n  summarise(avg_price= mean(price), avg_haul= mean(quantity)) \n\n`summarise()` has grouped output by 'season', 'cartel'. You can override using\nthe `.groups` argument.\n\ncartel2\n\n# A tibble: 30 × 5\n# Groups:   season, cartel [26]\n   season          cartel               ice          avg_price avg_haul\n   &lt;ord&gt;           &lt;fct&gt;                &lt;fct&gt;            &lt;dbl&gt;    &lt;dbl&gt;\n 1 Apr 24 - May 21 Cartel Operational   Frozen Lakes     0.3     36457.\n 2 Apr 24 - May 21 Cartel Operational   Fluid Lakes      0.27    14150.\n 3 Apr 24 - May 21 Cartel Inoperational Frozen Lakes     0.186   45819.\n 4 Apr 24 - May 21 Cartel Inoperational Fluid Lakes      0.2     29186 \n 5 Aug 14 - Sep 10 Cartel Operational   Fluid Lakes      0.268   17011.\n 6 Aug 14 - Sep 10 Cartel Inoperational Fluid Lakes      0.185   22766 \n 7 Dec  4 - Dec 31 Cartel Operational   Frozen Lakes     0.286   25481.\n 8 Dec  4 - Dec 31 Cartel Operational   Fluid Lakes      0.225   34980 \n 9 Dec  4 - Dec 31 Cartel Inoperational Frozen Lakes     0.181   25642.\n10 Feb 26 - Mar 26 Cartel Operational   Frozen Lakes     0.288   28736.\n# ℹ 20 more rows\n\n\n\n\n\n\n\ncartel2 %&gt;% \ngf_line(avg_price ~ season | ice ,color = ~cartel)\n\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n`geom_line()`: Each group consists of only one observation.\nℹ Do you need to adjust the group aesthetic?\n\n\n\n\n\n\n\n\nggplot(cartel2, aes(y = avg_price, x = `season`)) +\n  geom_line(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels if needed\n  labs(x = \"Price\", y = \"Season\", title = \"Price Index by Weight\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncartel2 %&gt;%\n  gf_point(  avg_price ~ season | ice, color = ~cartel ) %&gt;%\n  \n  gf_line(avg_price ~ season, group = ~cartel) %&gt;%  \n\n  gf_lm() %&gt;%\n  \n  gf_refine(theme(axis.text.x = element_text(angle = 45, hjust = 1))) %&gt;% \n  \n  gf_labs(\n    title = \"Price Index by Ton\",\n    subtitle = \"Railway Firms\"\n  )"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html",
    "href": "posts/Octafolder/Degrees/index.html",
    "title": "Student Degrees",
    "section": "",
    "text": "#| label: Setup\nlibrary(tidyverse) # Tidy data processing\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula) # Formula based plots\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic) # Data inspection and Statistical Inference\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom) # Tidy outputs from Statistical Analyses\nlibrary(infer) # Statistical Inference, Permutation/Bootstrap\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork) # Arranging Plots\nlibrary(ggprism) # Interesting Categorical Axes\nlibrary(supernova) # Beginner-Friendly ANOVA Tables\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(DescTools)\n\n\nAttaching package: 'DescTools'\n\nThe following object is masked from 'package:mosaic':\n\n    MAD"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#reading-data",
    "href": "posts/Octafolder/Degrees/index.html#reading-data",
    "title": "Student Degrees",
    "section": "Reading Data",
    "text": "Reading Data\n\ngrad&lt;- read_csv(file = '../../../datasets/degree.csv')\n\nRows: 90 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): Degree, Course, Letter Grade, Gender\ndbl (3): SN, Year, Score\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ngrad\n\n# A tibble: 90 × 7\n      SN Degree Course  Year `Letter Grade` Score Gender\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;  &lt;dbl&gt; &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt; \n 1     1 B.Des  CAC        2 A                8   F     \n 2     2 B.Des  CAC        2 O                9.6 F     \n 3     3 B.Des  IADP       2 A+               9.2 F     \n 4     4 B.Des  CE         2 O                9.8 F     \n 5     5 B.Des  BSSD       2 P                3   M     \n 6     6 B.Des  CAC        2 O                9.5 F     \n 7     7 B.Des  PSD        2 A+               9   F     \n 8     8 B.Des  PSD        2 A+               9   F     \n 9     9 B.Des  PSD        2 A+               9   F     \n10    10 B.Des  BSSD       3 A+               9   F     \n# ℹ 80 more rows\n\nglimpse(grad)\n\nRows: 90\nColumns: 7\n$ SN             &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, …\n$ Degree         &lt;chr&gt; \"B.Des\", \"B.Des\", \"B.Des\", \"B.Des\", \"B.Des\", \"B.Des\", \"…\n$ Course         &lt;chr&gt; \"CAC\", \"CAC\", \"IADP\", \"CE\", \"BSSD\", \"CAC\", \"PSD\", \"PSD\"…\n$ Year           &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 2, 2, 3, 3, 2, 3, 3, 2, 2…\n$ `Letter Grade` &lt;chr&gt; \"A\", \"O\", \"A+\", \"O\", \"P\", \"O\", \"A+\", \"A+\", \"A+\", \"A+\", …\n$ Score          &lt;dbl&gt; 8.0, 9.6, 9.2, 9.8, 3.0, 9.5, 9.0, 9.0, 9.0, 9.0, 8.0, …\n$ Gender         &lt;chr&gt; \"F\", \"F\", \"F\", \"F\", \"M\", \"F\", \"F\", \"F\", \"F\", \"F\", \"F\", …\n\n\n\ngrad %&gt;%  count(Degree)\n\n# A tibble: 3 × 2\n  Degree     n\n  &lt;chr&gt;  &lt;int&gt;\n1 B.Des     30\n2 B.FA      30\n3 B.Voc     30\n\ngrad %&gt;%\n    summarize(overall_mean = mean(Score),count = n())\n\n# A tibble: 1 × 2\n  overall_mean count\n         &lt;dbl&gt; &lt;int&gt;\n1         8.06    90\n\n\n\nThere is roughly 30 of each type which is enough data. Overall mean rating is 8.06"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#data-analysis",
    "href": "posts/Octafolder/Degrees/index.html#data-analysis",
    "title": "Student Degrees",
    "section": "Data Analysis",
    "text": "Data Analysis\n\ngf_histogram(~Score,\n  fill = ~Degree,\n  data = grad, alpha = 1\n) %&gt;%  gf_vline(xintercept = ~ mean(Score)) %&gt;%\n  \n  \n  gf_labs(\n    title = \"Histograms of Bachelor's Degrees vs class scores. (0-10)\",\n    x = \"Score\", y = \"Count\"\n  ) %&gt;%\n  \n  \n  gf_text(16 ~ (mean(Score)),\n    label = \"Overall Mean\",\n  ) %&gt;%\n  \n  \n  gf_refine(guides(fill = guide_legend(title = \"Degree Name\")))\n\n\n\n\n\n\n\n\n\nLooks like most top scorers are from B.Des. But there is an extreme outlier.\n\ngf_boxplot(\n  data = grad,\n  Score ~ Degree,\n  fill = ~Degree,\n  alpha = 0.5\n) %&gt;% gf_vline(xintercept = ~ mean(Score)) %&gt;%\n  \n  gf_labs(\n    title = \"Boxplots of Score Distributions vs Degrees\",\n    x = \"Degree\", y = \"Score\",\n  ) %&gt;%\n  \n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Degree\"))\n  )\n\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended."
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#annova-test",
    "href": "posts/Octafolder/Degrees/index.html#annova-test",
    "title": "Student Degrees",
    "section": "ANNOVA Test",
    "text": "ANNOVA Test\n\ngrad_anova &lt;- aov(Score ~ Degree, data = grad)\n\nsupernova::supernova(grad_anova)\n\n Analysis of Variance Table (Type III SS)\n Model: Score ~ Degree\n\n                              SS df    MS     F   PRE     p\n ----- --------------- | ------- -- ----- ----- ----- -----\n Model (error reduced) |   9.429  2 4.714 3.900 .0823 .0239\n Error (from model)    | 105.160 87 1.209                  \n ----- --------------- | ------- -- ----- ----- ----- -----\n Total (empty model)   | 114.589 89 1.288                  \n\n\n\nsupernova::pairwise(grad_anova,\n  correction = \"Bonferroni\", # Try \"Tukey\"\n  alpha = 0.05, # 95% CI calculation\n  var_equal = TRUE, # We'll see\n  plot = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Score ~ Degree\n\n\nDegree\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2   diff pooled_se      t    df  lower  upper  p_adj\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 B.FA    B.Des   -0.757     0.201 -3.770    87 -1.191 -0.323  .0009\n2 B.Voc   B.Des   -0.173     0.201 -0.864    87 -0.607  0.261 1.0000\n3 B.Voc   B.FA     0.583     0.201  2.906    87  0.149  1.017  .0139\n\n\n\n# Calculate overall sum squares SST\ngrad_overall &lt;- grad %&gt;%\n  summarise(\n    overall_mean_score = mean(Score),\n    # Overall mean across all readings\n    # The Black Line\n\n    SST = sum((Score - overall_mean_score)^2),\n    n = n()\n  ) \ngrad_overall\n\n# A tibble: 1 × 3\n  overall_mean_score   SST     n\n               &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1               8.06  115.    90\n\nSST &lt;- grad_overall$SST\nSST\n\n[1] 114.589\n\n\n\n# Calculate sums of square errors *within* each group\n# with respect to individual group means\ngrad_within_groups &lt;- grad %&gt;%\n  group_by(Degree) %&gt;%\n  summarise(\n    grouped_mean_score = mean(Score), \n    grouped_variance_score = var(Score),\n    group_error_squares = sum((Score - grouped_mean_score)^2),\n    n = n()\n  ) \ngrad_within_groups\n\n# A tibble: 3 × 5\n  Degree grouped_mean_score grouped_variance_score group_error_squares     n\n  &lt;chr&gt;               &lt;dbl&gt;                  &lt;dbl&gt;               &lt;dbl&gt; &lt;int&gt;\n1 B.Des                8.37                  1.74                 50.5    30\n2 B.FA                 7.62                  0.615                17.8    30\n3 B.Voc                8.2                   1.27                 36.8    30\n\ngrad_SSE &lt;- grad_within_groups %&gt;%\n  summarise(SSE = sum(group_error_squares))\n##\nSSE &lt;- grad_SSE$SSE\nSSE\n\n[1] 105.1603\n\n\n\nThe values here reflect what we saw in the histogram. B.Des & B.Voc have a higher average score than B.FA.\n\n\nB.Des has highest variance. Must be because of the extremes in the data.\n\nSST\n\n[1] 114.589\n\nSSE\n\n[1] 105.1603\n\nSSA &lt;- SST - SSE\nSSA\n\n[1] 9.428667\n\n\n\n\nNow we calculate degrees of freedom for all variances. The degrees of freedom is dependent on number of categories (3 Degrees) & number of datapoints (30 for each).\n\n# Error Sum of Squares SSE\ndf_SSE &lt;- grad %&gt;%\n  # Takes into account \"unbalanced\" situations\n  # Where groups are not equal in size\n  group_by(Degree) %&gt;%\n  summarise(per_group_df_SSE = n() - 1) %&gt;%\n  summarise(df_SSE = sum(per_group_df_SSE)) %&gt;%\n  as.numeric()\n\n\n## Overall Sum of Squares SST\ndf_SST &lt;- grad %&gt;%\n  summarise(df_SST = n() - 1) %&gt;%\n  as.integer()\n\n\n# Treatment Sum of Squares SSA\nk &lt;- length(unique(grad$Degree))\ndf_SSA &lt;- k - 1\n\n\n##Degrees of Freedom:\n\ndf_SST\n\n[1] 89\n\ndf_SSE\n\n[1] 87\n\ndf_SSA\n\n[1] 2\n\n\n\n\nThe SST is one less than the total datapoints (90) as 1 degree of freedom goes into calculating the global mean.\n\n\nThe SSE is sum of all categories with one less in each. 3[(n1-1)+(n2-1)+(n3-1)]\n\n\nNow we calculate the F-Statistic.\n\n# Combine the sum-square_error for each level of the factor\n# Weighted by degrees of freedom **per level**\n\nMSE &lt;- grad_within_groups %&gt;%\n  summarise(mean_square_error = sum(group_error_squares / df_SSE)) %&gt;%\n  as.numeric()\nMSE\n\n[1] 1.208739\n\n\n\nMSA &lt;- SSA / df_SSA\nMSA\n\n[1] 4.714333\n\n\n\nF_stat &lt;- MSA / MSE\nF_stat\n\n[1] 3.900206\n\n\n\nNow we calculate the critical value of F-statistic.\n\nF_crit &lt;-\n  qf(\n    p = (1 - 0.05 / 3), # Significance level is 5% + Bonferroni Correction\n    df1 = df_SSA, # Numerator degrees of freedom\n    df2 = df_SSE # Denominator degrees of freedom\n  )\nF_crit\n\n[1] 4.293221\n\nF_stat\n\n[1] 3.900206\n\n\n\nmosaic::xpf(\n  q = F_crit,\n  df1 = df_SSA, df2 = df_SSE, method = \"gg\",\n  log.p = FALSE, lower.tail = TRUE,\n  return = \"plot\"\n) %&gt;%\n  gf_vline(xintercept = F_crit) %&gt;%\n  gf_label(0.75 ~ 5,\n    label = \"F_critical\",\n    inherit = F, show.legend = F\n  ) %&gt;%\n  gf_labs(\n    title = \"F distribution for Cartoons Data\",\n    subtitle = \"F_critical = 4.290\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nSince our F-Statistic is very low, & lower than F-Critical, we CANNOT state with confidence that a student’s Degree has a direct effect on their score.\n\n\nWhich is obvious, since the scoring is subjective by person. We do NOT have reason to believe that the grading is biased per the degree.\n\nsupernova::equation(grad_anova)\n\nFitted equation:\nScore = 8.373333 + -0.7566667*DegreeB.FA + -0.1733333*DegreeB.Voc + e"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#annova-assumptions",
    "href": "posts/Octafolder/Degrees/index.html#annova-assumptions",
    "title": "Student Degrees",
    "section": "ANNOVA Assumptions",
    "text": "ANNOVA Assumptions\n\nANOVA makes 3 fundamental assumptions:\n\n1. Data (and errors) are normally distributed.\n\n\n2. Variances are equal.\n\n\n3.Observations are independent.\n\n\nWe can check these using checks and graphs.\n\n\n\nNow we do the usual Shapiro Normality Test again to check the p.value.\n\nshapiro.test(x = grad$Score)\n\n\n    Shapiro-Wilk normality test\n\ndata:  grad$Score\nW = 0.88503, p-value = 9.198e-07\n\n\n\n\nSince our p_value is much less than 0.05, we have to reject the NULL Hypothesis that the distribution is normal.\n\n\nWe can try doing the normality test at each level of factor.\n\ngrad %&gt;%\n  group_by(Degree) %&gt;%\n  group_modify(~ .x %&gt;%\n    select(Score) %&gt;%\n    as_vector() %&gt;%\n    shapiro.test() %&gt;%\n    broom::tidy())\n\n# A tibble: 3 × 4\n# Groups:   Degree [3]\n  Degree statistic   p.value method                     \n  &lt;chr&gt;      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;                      \n1 B.Des      0.753 0.0000101 Shapiro-Wilk normality test\n2 B.FA       0.875 0.00211   Shapiro-Wilk normality test\n3 B.Voc      0.887 0.00418   Shapiro-Wilk normality test\n\n\n\n\nThe p_values for all degrees are less than 0.05, so we have to reject the NULL Hypothesis of normality. (Even if there are supposedly enough samples.)\n\n\nWe can check for residuals after model.\n\ngrad_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_dhistogram(~value, data = .) %&gt;%\n  gf_fitdistr()\n\n\n\n\n\n\n\n##\ngrad_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_qq(~value, data = .) %&gt;%\n  gf_qqstep() %&gt;%\n  gf_qqline()\n\n\n\n\n\n\n\n##\nshapiro.test(grad_anova$residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  grad_anova$residuals\nW = 0.87869, p-value = 5.076e-07\n\n\n\n\nThe residuals are not normal either. (P_value=0.5 e-6 &lt;&lt; 0.05)\n\n\nWe now check for similar Variance. To see if variances of each rating level across all degrees are similar, we can use the Levenue Test or the Fligner-Killeen Test. (Since the data is not normally distributed)\n\n\nNULL Hypothesis: Data have similar variance\n\ngrad %&gt;%\n  group_by(Degree) %&gt;%\n  summarise(variance = var(Score))\n\n# A tibble: 3 × 2\n  Degree variance\n  &lt;chr&gt;     &lt;dbl&gt;\n1 B.Des     1.74 \n2 B.FA      0.615\n3 B.Voc     1.27 \n\nDescTools::LeveneTest(Score ~ Degree, data = grad)\n\nWarning in LeveneTest.default(y = y, group = group, ...): group coerced to\nfactor.\n\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  0.7294 0.4851\n      87               \n\nfligner.test(Score ~ Degree, data = grad)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Score by Degree\nFligner-Killeen:med chi-squared = 2.2707, df = 2, p-value = 0.3213\n\n\n\n\nLooks like we have very different variances. As I said earlier, subjective grades."
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#effect-size",
    "href": "posts/Octafolder/Degrees/index.html#effect-size",
    "title": "Student Degrees",
    "section": "Effect Size",
    "text": "Effect Size\n\nWe look for the actual effect sizes in Annova using our earlier graph.\n\ngrad_supernova &lt;-\n  supernova::pairwise(grad_anova,\n    plot = TRUE,\n    alpha = 0.05,\n    correction = \"Bonferroni\"\n  )\n\n\n\n\n\n\n\ngrad_supernova\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Score ~ Degree\n\n\nDegree\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1 group_2   diff pooled_se      t    df  lower  upper  p_adj\n  &lt;chr&gt;   &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 B.FA    B.Des   -0.757     0.201 -3.770    87 -1.191 -0.323  .0009\n2 B.Voc   B.Des   -0.173     0.201 -0.864    87 -0.607  0.261 1.0000\n3 B.Voc   B.FA     0.583     0.201  2.906    87  0.149  1.017  .0139"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#annova-permutation-tests",
    "href": "posts/Octafolder/Degrees/index.html#annova-permutation-tests",
    "title": "Student Degrees",
    "section": "ANNOVA Permutation Tests",
    "text": "ANNOVA Permutation Tests\n\nWe use a permutation test to see the significance of effect size for all Degrees & their normality.\n\nWe shuffle the degrees randomly between the Scores and repeat the ANOVA test each time and calculate the F-statistic. The Null distribution is the distribution of the F-statistic over the many permutations and the p-value is given by the proportion of times the F-statistic equals or exceeds that observed.\n\nobserved_infer &lt;-\n  grad %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\nobserved_infer\n\nResponse: Score (numeric)\nExplanatory: Degree (factor)\nNull Hypothesis: independence\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1  3.90\n\n\n\n\n\nWe knew that the F-statistic is 3.90.\n\n\nNow we use infer command to generate a NULL distribution using permutation of the Degree factor.\n\nnull_dist_infer &lt;- grad %&gt;%\n  specify(Score ~ Degree) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 4999, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n##\nnull_dist_infer\n\nResponse: Score (numeric)\nExplanatory: Degree (factor)\nNull Hypothesis: independence\n# A tibble: 4,999 × 2\n   replicate   stat\n       &lt;int&gt;  &lt;dbl&gt;\n 1         1 1.61  \n 2         2 0.665 \n 3         3 1.53  \n 4         4 0.194 \n 5         5 0.644 \n 6         6 0.759 \n 7         7 0.216 \n 8         8 1.66  \n 9         9 0.0109\n10        10 0.0365\n# ℹ 4,989 more rows\n\n\n\nnull_dist_infer %&gt;%\n  visualise(method = \"simulation\") +\n  shade_p_value(obs_stat = observed_infer$stat, direction = \"right\") +\n  scale_x_continuous(trans = \"log10\", expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0.2, 500), clip = \"off\") +\n  annotation_logticks(outside = FALSE) \n\nWarning in transformation$transform(x): NaNs produced\n\n\nWarning in scale_x_continuous(trans = \"log10\", expand = c(0, 0)): log-10\ntransformation introduced infinite values.\n\n\n\n\n\n\n\n\n\n\n\nAs we see the infer based permutation test also shows that the permutationally generated F-statistics are close to which was observed. The effect of Degree barely registers.\n\n\nHence, we CANNOT confidently say that the certain degrees grade differently than others. The NULL Hypothesis prevails again…"
  },
  {
    "objectID": "posts/Octafolder/Degrees/index.html#section",
    "href": "posts/Octafolder/Degrees/index.html#section",
    "title": "Student Degrees",
    "section": "—————————————————————————-",
    "text": "—————————————————————————-"
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html",
    "href": "posts/Octafolder/Cartoons/index.html",
    "title": "Cartoon Samples",
    "section": "",
    "text": "library(tidyverse) # Tidy data processing\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula) # Formula based plots\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic) # Data inspection and Statistical Inference\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(broom) # Tidy outputs from Statistical Analyses\nlibrary(infer) # Statistical Inference, Permutation/Bootstrap\n\n\nAttaching package: 'infer'\n\nThe following objects are masked from 'package:mosaic':\n\n    prop_test, t_test\n\nlibrary(patchwork) # Arranging Plots\nlibrary(ggprism) # Interesting Categorical Axes\nlibrary(supernova) # Beginner-Friendly ANOVA Tables\n\n\nAttaching package: 'supernova'\n\nThe following object is masked from 'package:scales':\n\n    number\n\nlibrary(dplyr)\nlibrary(DescTools)\n\n\nAttaching package: 'DescTools'\n\nThe following object is masked from 'package:mosaic':\n\n    MAD"
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#reading-data",
    "href": "posts/Octafolder/Cartoons/index.html#reading-data",
    "title": "Cartoon Samples",
    "section": "Reading Data",
    "text": "Reading Data\n\ntoon&lt;- read_csv(file = '../../../datasets/cartoon.csv')\n\nRows: 91 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Participant ID, Gender, Cartoon\ndbl (1): Rating\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntoon\n\n# A tibble: 91 × 4\n   `Participant ID` Gender Cartoon      Rating\n   &lt;chr&gt;            &lt;chr&gt;  &lt;chr&gt;         &lt;dbl&gt;\n 1 M1               Male   Chota Bheem     8.5\n 2 M2               Male   Chota Bheem     6  \n 3 M3               Male   Chota Bheem     8  \n 4 M4               Male   Chota Bheem     7  \n 5 M5               Male   Chota Bheem     8  \n 6 M6               Male   Chota Bheem    10  \n 7 M7               Male   Chota Bheem     5  \n 8 M8               Male   Chota Bheem     7.8\n 9 M9               Male   Chota Bheem     8.5\n10 M10              Male   Chota Bheem     5  \n# ℹ 81 more rows\n\nglimpse(toon)\n\nRows: 91\nColumns: 4\n$ `Participant ID` &lt;chr&gt; \"M1\", \"M2\", \"M3\", \"M4\", \"M5\", \"M6\", \"M7\", \"M8\", \"M9\",…\n$ Gender           &lt;chr&gt; \"Male \", \"Male \", \"Male \", \"Male \", \"Male \", \"Male \",…\n$ Cartoon          &lt;chr&gt; \"Chota Bheem \", \"Chota Bheem \", \"Chota Bheem \", \"Chot…\n$ Rating           &lt;dbl&gt; 8.5, 6.0, 8.0, 7.0, 8.0, 10.0, 5.0, 7.8, 8.5, 5.0, 7.…\n\n\n\nWe do not need to pivot this table since the cartoons are already in a single column.\n\ntoon %&gt;%  count(Cartoon)\n\n# A tibble: 3 × 2\n  Cartoon          n\n  &lt;chr&gt;        &lt;int&gt;\n1 Chota Bheem     30\n2 Doraemon        30\n3 Dragon Tales    31\n\ntoon %&gt;%\n    summarize(overall_mean = mean(Rating),count = n())\n\n# A tibble: 1 × 2\n  overall_mean count\n         &lt;dbl&gt; &lt;int&gt;\n1         7.06    91\n\n\n\nThere is roughly 30 of each type which is enough data. Overall mean rating is 7.06."
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#data-analysis",
    "href": "posts/Octafolder/Cartoons/index.html#data-analysis",
    "title": "Cartoon Samples",
    "section": "Data Analysis",
    "text": "Data Analysis\n\ngf_histogram(~Rating,\n  fill = ~Cartoon,\n  data = toon, alpha = 1\n) %&gt;%  gf_vline(xintercept = ~ mean(Rating)) %&gt;%\n  \n  \n  gf_labs(\n    title = \"Histograms of Cartoon vs respective Rating. (0-10)\",\n    x = \"Rating\", y = \"Count\"\n  ) %&gt;%\n  \n  \n  gf_text(16 ~ (mean(Rating)),\n    label = \"Overall Mean\",\n  ) %&gt;%\n  \n  \n  gf_refine(guides(fill = guide_legend(title = \"Cartoon Name\")))\n\n\n\n\n\n\n\n\n\nLooks like Doraemon ratings are all over the chart. Chota Bheem belongs in 6-8 range according to most people.\n\ngf_boxplot(\n  data = toon,\n  Rating ~ Cartoon,\n  fill = ~Cartoon,\n  alpha = 0.5\n) %&gt;% gf_vline(xintercept = ~ mean(Rating)) %&gt;%\n  \n  gf_labs(\n    title = \"Boxplots of Rating Distributions vs Cartoons\",\n    x = \"Cartoon\", y = \"Rating\",\n  ) %&gt;%\n  \n  gf_refine(\n    scale_x_discrete(guide = \"prism_bracket\"),\n    guides(fill = guide_legend(title = \"Cartoon\"))\n  )\n\nWarning: The S3 guide system was deprecated in ggplot2 3.5.0.\nℹ It has been replaced by a ggproto system that can be extended."
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#annova-test",
    "href": "posts/Octafolder/Cartoons/index.html#annova-test",
    "title": "Cartoon Samples",
    "section": "ANNOVA Test",
    "text": "ANNOVA Test\n\ntoon_anova &lt;- aov(Rating ~ Cartoon, data = toon)\n\nsupernova::supernova(toon_anova)\n\n Analysis of Variance Table (Type III SS)\n Model: Rating ~ Cartoon\n\n                              SS df    MS     F   PRE     p\n ----- --------------- | ------- -- ----- ----- ----- -----\n Model (error reduced) |   6.862  2 3.431 0.921 .0205 .4021\n Error (from model)    | 327.973 88 3.727                  \n ----- --------------- | ------- -- ----- ----- ----- -----\n Total (empty model)   | 334.835 90 3.720                  \n\n\n\nsupernova::pairwise(toon_anova,\n  correction = \"Bonferroni\", # Try \"Tukey\"\n  alpha = 0.05, # 95% CI calculation\n  var_equal = TRUE, # We'll see\n  plot = TRUE\n)\n\n\n\n\n\n\n\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Rating ~ Cartoon\n\n\nCartoon\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1      group_2       diff pooled_se     t    df  lower upper  p_adj\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 Doraemon     Chota Bheem  0.580     0.352 1.646    88 -0.182 1.342  .3103\n2 Dragon Tales Chota Bheem  0.588     0.350 1.682    88 -0.168 1.344  .2883\n3 Dragon Tales Doraemon     0.008     0.350 0.023    88 -0.748 0.764 1.0000\n\n\n\n# Calculate overall sum squares SST\ntoon_overall &lt;- toon %&gt;%\n  summarise(\n    overall_mean_rating = mean(Rating),\n    # Overall mean across all readings\n    # The Black Line\n\n    SST = sum((Rating - overall_mean_rating)^2),\n    n = n()\n  ) \ntoon_overall\n\n# A tibble: 1 × 3\n  overall_mean_rating   SST     n\n                &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;\n1                7.06  335.    91\n\nSST &lt;- toon_overall$SST\nSST\n\n[1] 334.8354\n\n\n\n# Calculate sums of square errors *within* each group\n# with respect to individual group means\ntoon_within_groups &lt;- toon %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(\n    grouped_mean_rating = mean(Rating), \n    grouped_variance_rating = var(Rating),\n    group_error_squares = sum((Rating - grouped_mean_rating)^2),\n    n = n()\n  )\ntoon_within_groups\n\n# A tibble: 3 × 5\n  Cartoon   grouped_mean_rating grouped_variance_rat…¹ group_error_squares     n\n  &lt;chr&gt;                   &lt;dbl&gt;                  &lt;dbl&gt;               &lt;dbl&gt; &lt;int&gt;\n1 Chota Bh…                6.67                   2.21                64.2    30\n2 Doraemon                 7.25                   5.25               152.     30\n3 Dragon T…                7.26                   3.71               111.     31\n# ℹ abbreviated name: ¹​grouped_variance_rating\n\ntoon_SSE &lt;- toon_within_groups %&gt;%\n  summarise(SSE = sum(group_error_squares))\n##\nSSE &lt;- toon_SSE$SSE\nSSE\n\n[1] 327.9735\n\n\n\nThe values here reflect what we saw in the histogram. D. Tales & Doraemon have a higher average rating than Chota Bheem.\n\n\nRemember we said that Doraemon has its ratings all over the chart? That is why its variance is highest.\n\nSST\n\n[1] 334.8354\n\nSSE\n\n[1] 327.9735\n\nSSA &lt;- SST - SSE\nSSA\n\n[1] 6.861901\n\n\n\n\nNow we calculate degrees of freedom for all variances. The degrees of freedom is dependent on number of categories (3 Cartoons) & number of datapoints (30 for each).\n\n# Error Sum of Squares SSE\ndf_SSE &lt;- toon %&gt;%\n  # Takes into account \"unbalanced\" situations\n  # Where groups are not equal in size\n  group_by(Cartoon) %&gt;%\n  summarise(per_group_df_SSE = n() - 1) %&gt;%\n  summarise(df_SSE = sum(per_group_df_SSE)) %&gt;%\n  as.numeric()\n\n\n## Overall Sum of Squares SST\ndf_SST &lt;- toon %&gt;%\n  summarise(df_SST = n() - 1) %&gt;%\n  as.integer()\n\n\n# Treatment Sum of Squares SSA\nk &lt;- length(unique(toon$Cartoon))\ndf_SSA &lt;- k - 1\n\n\n##Degrees of Freedom:\n\ndf_SST\n\n[1] 90\n\ndf_SSE\n\n[1] 88\n\ndf_SSA\n\n[1] 2\n\n\n\n\nThe SST is one less than the total datapoints (91) as 1 degree of freedom goes into calculating the global mean.\n\n\nThe SSE is sum of all categories with one less in each. 3[(n1-1)+(n2-1)+(n3-1)]\n\n\nThe SSA is not the same as SSE-SST because we had an extra datapoint for Dragon Tales. Should have probably kept them equal.\n\n\nNow we calculate the F-Statistic.\n\n# Combine the sum-square_error for each level of the factor\n# Weighted by degrees of freedom **per level**\n\nMSE &lt;- toon_within_groups %&gt;%\n  summarise(mean_square_error = sum(group_error_squares / df_SSE)) %&gt;%\n  as.numeric()\nMSE\n\n[1] 3.726971\n\n\n\n##\nMSA &lt;- SSA / df_SSA\nMSA\n\n[1] 3.43095\n\n\n\nF_stat &lt;- MSA / MSE\nF_stat\n\n[1] 0.9205733\n\n\n\nNow we calculate the critical value of F-statistic.\n\nF_crit &lt;-\n  qf(\n    p = (1 - 0.05 / 3), # Significance level is 5% + Bonferroni Correction\n    df1 = df_SSA, # Numerator degrees of freedom\n    df2 = df_SSE # Denominator degrees of freedom\n  )\nF_crit\n\n[1] 4.290889\n\nF_stat\n\n[1] 0.9205733\n\n\n\nmosaic::xpf(\n  q = F_crit,\n  df1 = df_SSA, df2 = df_SSE, method = \"gg\",\n  log.p = FALSE, lower.tail = TRUE,\n  return = \"plot\"\n) %&gt;%\n  gf_vline(xintercept = F_crit) %&gt;%\n  gf_label(0.75 ~ 5,\n    label = \"F_critical\",\n    inherit = F, show.legend = F\n  ) %&gt;%\n  gf_labs(\n    title = \"F distribution for Cartoons Data\",\n    subtitle = \"F_critical = 4.290\"\n  )\n\n\n\n\n\n\n\n\n\n\n\nSince our F-Statistic is very low, & lower than F-Critical, we CANNOT state with confidence that Cartoon name has a direct effect on the rating.\n\n\nWhich is obvious, since the rating is subjective by person, naturally a cartoon name does not guarantee a particular rating.\n\nsupernova::equation(toon_anova)\n\nFitted equation:\nRating = 6.67 + 0.58*CartoonDoraemon + 0.5880645*CartoonDragon Tales + e"
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#annova-assumptions",
    "href": "posts/Octafolder/Cartoons/index.html#annova-assumptions",
    "title": "Cartoon Samples",
    "section": "ANNOVA Assumptions",
    "text": "ANNOVA Assumptions\n\nANOVA makes 3 fundamental assumptions:\n\n1. Data (and errors) are normally distributed.\n\n\n2. Variances are equal.\n\n\n3.Observations are independent.\n\n\nWe can check these using checks and graphs.\n\n\n\nNow we do the usual Shapiro Normality Test again to check the p.value.\n\nshapiro.test(x = toon$Rating)\n\n\n    Shapiro-Wilk normality test\n\ndata:  toon$Rating\nW = 0.93514, p-value = 0.0002078\n\n\n\n\nSince our p_value is much less than 0.05, we have to reject the NULL Hypothesis that the distribution is normal.\n\n\nWe can try doing the normality test at each level of factor.\n\ntoon %&gt;%\n  group_by(Cartoon) %&gt;%\n  group_modify(~ .x %&gt;%\n    select(Rating) %&gt;%\n    as_vector() %&gt;%\n    shapiro.test() %&gt;%\n    broom::tidy())\n\n# A tibble: 3 × 4\n# Groups:   Cartoon [3]\n  Cartoon      statistic p.value method                     \n  &lt;chr&gt;            &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;                      \n1 Chota Bheem      0.951  0.185  Shapiro-Wilk normality test\n2 Doraemon         0.909  0.0139 Shapiro-Wilk normality test\n3 Dragon Tales     0.916  0.0184 Shapiro-Wilk normality test\n\n\n\n\nThis time, the p_values for Doraemon & D.Tales are less than 0.05, so we have to reject the NULL Hypothesis of normality. (Even if there are supposedly enough samples.)\n\n\nWe can check for residuals after model.\n\ntoon_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_dhistogram(~value, data = .) %&gt;%\n  gf_fitdistr()\n\n\n\n\n\n\n\n##\ntoon_anova$residuals %&gt;%\n  as_tibble() %&gt;%\n  gf_qq(~value, data = .) %&gt;%\n  gf_qqstep() %&gt;%\n  gf_qqline()\n\n\n\n\n\n\n\n##\nshapiro.test(toon_anova$residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  toon_anova$residuals\nW = 0.93892, p-value = 0.0003396\n\n\n\n\nThe residuals are not normal either. (P_value=0.0003&lt;0.05)\n\n\nWe now check for similar Variance. To see if variances of each rating level across all cartoons are similar, we can use the Levenue Test or the Fligner-Killeen Test. (Since the data is not normally distributed)\n\n\nNULL Hypothesis: Data have similar variance\n\ntoon %&gt;%\n  group_by(Cartoon) %&gt;%\n  summarise(variance = var(Rating))\n\n# A tibble: 3 × 2\n  Cartoon      variance\n  &lt;chr&gt;           &lt;dbl&gt;\n1 Chota Bheem      2.21\n2 Doraemon         5.25\n3 Dragon Tales     3.71\n\nDescTools::LeveneTest(Rating ~ Cartoon, data = toon)\n\nWarning in LeveneTest.default(y = y, group = group, ...): group coerced to\nfactor.\n\n\nLevene's Test for Homogeneity of Variance (center = median)\n      Df F value Pr(&gt;F)\ngroup  2  1.3264 0.2707\n      88               \n\nfligner.test(Rating ~ Cartoon, data = toon)\n\n\n    Fligner-Killeen test of homogeneity of variances\n\ndata:  Rating by Cartoon\nFligner-Killeen:med chi-squared = 1.8883, df = 2, p-value = 0.389\n\n\n\n\nLooks like we have very different variances. As I said earlier, personal opinions."
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#effect-size",
    "href": "posts/Octafolder/Cartoons/index.html#effect-size",
    "title": "Cartoon Samples",
    "section": "Effect Size",
    "text": "Effect Size\n\nWe look for the actual effect sizes in Annova using our earlier graph.\n\ntoon_supernova &lt;-\n  supernova::pairwise(toon_anova,\n    plot = TRUE,\n    alpha = 0.05,\n    correction = \"Bonferroni\"\n  )\n\n\n\n\n\n\n\ntoon_supernova\n\n\n\n\n── Pairwise t-tests with Bonferroni correction ─────────────────────────────────\n\n\nModel: Rating ~ Cartoon\n\n\nCartoon\n\n\nLevels: 3\n\n\nFamily-wise error-rate: 0.049\n\n\n\n  group_1      group_2       diff pooled_se     t    df  lower upper  p_adj\n  &lt;chr&gt;        &lt;chr&gt;        &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1 Doraemon     Chota Bheem  0.580     0.352 1.646    88 -0.182 1.342  .3103\n2 Dragon Tales Chota Bheem  0.588     0.350 1.682    88 -0.168 1.344  .2883\n3 Dragon Tales Doraemon     0.008     0.350 0.023    88 -0.748 0.764 1.0000"
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#annova-permutation-tests",
    "href": "posts/Octafolder/Cartoons/index.html#annova-permutation-tests",
    "title": "Cartoon Samples",
    "section": "ANNOVA Permutation Tests",
    "text": "ANNOVA Permutation Tests\n\nWe use a permutation test to see the significance of effect size for all Cartoons & their normality.\n\nWe shuffle the cartoons randomly between the Ratings and repeat the ANOVA test each time and calculate the F-statistic. The Null distribution is the distribution of the F-statistic over the many permutations and the p-value is given by the proportion of times the F-statistic equals or exceeds that observed.\n\nobserved_infer &lt;-\n  toon %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  calculate(stat = \"F\")\nobserved_infer\n\nResponse: Rating (numeric)\nExplanatory: Cartoon (factor)\nNull Hypothesis: independence\n# A tibble: 1 × 1\n   stat\n  &lt;dbl&gt;\n1 0.921\n\n\n\n\n\nNow we use infer command to generate a NULL distribution using permutation of the Cartoon factor.\n\nnull_dist_infer &lt;- toon %&gt;%\n  specify(Rating ~ Cartoon) %&gt;%\n  hypothesise(null = \"independence\") %&gt;%\n  generate(reps = 4999, type = \"permute\") %&gt;%\n  calculate(stat = \"F\")\n##\nnull_dist_infer\n\nResponse: Rating (numeric)\nExplanatory: Cartoon (factor)\nNull Hypothesis: independence\n# A tibble: 4,999 × 2\n   replicate    stat\n       &lt;int&gt;   &lt;dbl&gt;\n 1         1 1.32   \n 2         2 1.79   \n 3         3 0.279  \n 4         4 0.769  \n 5         5 1.17   \n 6         6 0.130  \n 7         7 0.00280\n 8         8 0.219  \n 9         9 2.68   \n10        10 0.251  \n# ℹ 4,989 more rows\n\n\n\n##\nnull_dist_infer %&gt;%\n  visualise(method = \"simulation\") +\n  shade_p_value(obs_stat = observed_infer$stat, direction = \"right\") +\n  scale_x_continuous(trans = \"log10\", expand = c(0, 0)) +\n  coord_cartesian(xlim = c(0.2, 500), clip = \"off\") +\n  annotation_logticks(outside = FALSE) \n\nWarning in transformation$transform(x): NaNs produced\n\n\nWarning in scale_x_continuous(trans = \"log10\", expand = c(0, 0)): log-10\ntransformation introduced infinite values.\n\n\n\n\n\n\n\n\n\n\n\nAs seen, the infer based permutation test also shows that the permutationally generated F-statistics are close to which was observed. The effect of Cartoon barely registers.\n\n\nHence, we CANNOT confidently say that the cartoon name has direct effect on its rating. The NULL Hypothesis prevails!"
  },
  {
    "objectID": "posts/Octafolder/Cartoons/index.html#section",
    "href": "posts/Octafolder/Cartoons/index.html#section",
    "title": "Cartoon Samples",
    "section": "—————————————————————————-",
    "text": "—————————————————————————-"
  },
  {
    "objectID": "posts/Octafolder/index.html",
    "href": "posts/Octafolder/index.html",
    "title": "Tips by Food",
    "section": "",
    "text": "library(crosstable)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ purrr::compact() masks crosstable::compact()\n✖ dplyr::filter()  masks stats::filter()\n✖ dplyr::lag()     masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(dplyr)"
  },
  {
    "objectID": "posts/Octafolder/index.html#reading-data",
    "href": "posts/Octafolder/index.html#reading-data",
    "title": "Tips by Food",
    "section": "Reading Data",
    "text": "Reading Data\n\nTips given by Vegetarians & Non-Vegetarians while ordering food online.\n\ntips&lt;- read_csv(file = '../../datasets/tip.csv') %&gt;% \n  dplyr::mutate(\n    Tip = as.integer(Tip),\n  )\n\nRows: 60 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): Name, Gender, Preferance\ndbl (1): Tip\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ntips\n\n# A tibble: 60 × 4\n   Name     Gender Preferance   Tip\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;      &lt;int&gt;\n 1 Aanya    Female Veg            0\n 2 Adit     Male   Veg            0\n 3 Aditi    Female Veg           20\n 4 Akash    Male   Non-veg        0\n 5 Akshita  Female Non-veg        0\n 6 Anandita Female Non-veg        0\n 7 Ananya   Female Non-veg       20\n 8 Anaya    Female Veg           35\n 9 Anhuya   Female Veg           40\n10 Ankit    Male   Non-veg        0\n# ℹ 50 more rows\n\nglimpse(tips)\n\nRows: 60\nColumns: 4\n$ Name       &lt;chr&gt; \"Aanya\", \"Adit\", \"Aditi\", \"Akash\", \"Akshita\", \"Anandita\", \"…\n$ Gender     &lt;chr&gt; \"Female\", \"Male\", \"Female\", \"Male\", \"Female\", \"Female\", \"Fe…\n$ Preferance &lt;chr&gt; \"Veg\", \"Veg\", \"Veg\", \"Non-veg\", \"Non-veg\", \"Non-veg\", \"Non-…\n$ Tip        &lt;int&gt; 0, 0, 20, 0, 0, 0, 20, 35, 40, 0, 0, 0, 0, 0, 0, 0, 20, 0, …\n\n\n\n\nTaking average tips of each food preference\n\ntips%&gt;%\n  group_by(Preferance) %&gt;% \n  summarize(average_tip = mean(Tip),count = n())\n\n# A tibble: 2 × 3\n  Preferance average_tip count\n  &lt;chr&gt;            &lt;dbl&gt; &lt;int&gt;\n1 Non-veg           10      30\n2 Veg               12.3    30\n\n\n\n\nTaking average tips of each gender\n\ntips%&gt;%\n  group_by(Gender) %&gt;% \n  summarize(average_tip = mean(Tip),count = n())\n\n# A tibble: 2 × 3\n  Gender average_tip count\n  &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;\n1 Female        12.2    30\n2 Male          10.2    30\n\n\n\ntips %&gt;% filter(Tip== 0) \n\n# A tibble: 36 × 4\n   Name     Gender Preferance   Tip\n   &lt;chr&gt;    &lt;chr&gt;  &lt;chr&gt;      &lt;int&gt;\n 1 Aanya    Female Veg            0\n 2 Adit     Male   Veg            0\n 3 Akash    Male   Non-veg        0\n 4 Akshita  Female Non-veg        0\n 5 Anandita Female Non-veg        0\n 6 Ankit    Male   Non-veg        0\n 7 Anmol    Male   Veg            0\n 8 Anna     Male   Veg            0\n 9 Anoushka Female Non-veg        0\n10 Arnav    Male   Non-veg        0\n# ℹ 26 more rows\n\n\n\nLot of non-tippers huh.\n\ngf_histogram(~Tip, fill = ~Preferance, data = tips) %&gt;%\n  gf_labs(\n    title = \"Plot 1: Tips vs food preference\",\n  )\n\n\n\n\n\n\n\n\n\ngf_histogram(~Tip, fill = ~Gender, data = tips) %&gt;%\n  gf_labs(\n    title = \"Plot 2: Tips vs Gender\",\n  )\n\n\n\n\n\n\n\n\n\n\nThis distribution is not normal. Since we have a miserly sample size of ~30 per gender & food preference. We will try to confirm this by the shapiro.test.\n\ntips %&gt;%  crosstable(Tip ~ Preferance) %&gt;% as_flextable()\n\nlabelvariablePreferanceNon-vegVegTipMin / Max0 / 50.00 / 100.0Med [IQR]0 [0;20.0]0 [0;20.0]Mean (std)10.0 (12.9)12.3 (21.9)N (NA)30 (0)30 (0)\n\n\n\ntips %&gt;%\n  gf_density(\n    ~ Tip,\n    fill = ~ Preferance,\n    alpha = 0.5,\n    title = \"Food Tip Score Densities\",\n    subtitle = \"Veg vs Non-Veg\"\n  )\n\n\n\n\n\n\n\ntips %&gt;%\n  gf_boxplot(\n    Tip ~ Preferance,\n    fill = ~ Gender,\n    alpha = 0.5,\n    title = \"Tip scores by food\",\n    subtitle = \"Boys vs Girls\"\n  ) \n\n\n\n\n\n\n\n\n\n\nThe word ‘preference’ is misspelled I know.\n\nveg_tips &lt;- tips %&gt;% \n  filter(Preferance== \"Veg\") %&gt;% \n  select(Tip)\n\nnon_veg_tips &lt;- tips %&gt;% \n  filter(Preferance== \"non-veg\") %&gt;% \n  select(Tip)\n\nshapiro.test(veg_tips$Tip)\n\n\n    Shapiro-Wilk normality test\n\ndata:  veg_tips$Tip\nW = 0.6286, p-value = 1.661e-07\n\n#shapiro.test(non_veg_tips$Tip)\n\n\n\n“Error in shapiro.test(non_veg_tips&Tip): sample size must be between 3 & 5000”\n\n\nYeah it shows that error if you try to run it. As I said, the sample size is too small. Also, the p_value for veg is very very low. So it is not a normal distribution.\n\nvar.test(Tip ~ Preferance, data = tips, \n         conf.int = TRUE, conf.level = 0.95) %&gt;% \n  broom::tidy()\n\nMultiple parameters; naming those columns num.df, den.df\n\n\n# A tibble: 1 × 9\n  estimate num.df den.df statistic p.value conf.low conf.high method alternative\n     &lt;dbl&gt;  &lt;int&gt;  &lt;int&gt;     &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;      \n1    0.346     29     29     0.346 0.00554    0.165     0.726 F tes… two.sided  \n\n\n\n\nThe variance is also very low."
  },
  {
    "objectID": "posts/Octafolder/index.html#hypothesis",
    "href": "posts/Octafolder/index.html#hypothesis",
    "title": "Tips by Food",
    "section": "Hypothesis",
    "text": "Hypothesis\n\nHUNCH- Non-Vegetarians are more generous with tips than Vegetarians.\n\n\nTo prove this, we actually start by arguing that they are actually not more generous.\n\n\nNull Hypothesis: The difference between means of both veg & non-veg people is zero. Hence we are assuming that the difference of their means lies near 0.\n\n\nNow if the hunch is true, then the distribution of means of both should be far from 0, & we should not be able to reach it without bias.\n\ndiff_tip &lt;- diffmean(Tip ~ Preferance, data = tips) \ndiff_tip\n\ndiffmean \n2.333333 \n\n\n\nWe kinda knew that already. The mean is pretty low."
  },
  {
    "objectID": "posts/Octafolder/index.html#inference",
    "href": "posts/Octafolder/index.html#inference",
    "title": "Tips by Food",
    "section": "Inference",
    "text": "Inference\n\nmosaic::t_test(Tip ~ Preferance,data = tips) %&gt;% broom::tidy()\n\n# A tibble: 1 × 10\n  estimate estimate1 estimate2 statistic p.value parameter conf.low conf.high\n     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1    -2.33        10      12.3    -0.503   0.617      46.9    -11.7      6.99\n# ℹ 2 more variables: method &lt;chr&gt;, alternative &lt;chr&gt;\n\n\n\ntips_permute &lt;-\n  do(4999) * diffmean(data=tips, Tip~shuffle(Preferance))\ntips_permute\n\n        diffmean\n1     -8.3333333\n2      1.6666667\n3      0.3333333\n4      4.3333333\n5     -2.0000000\n6      5.6666667\n7     -4.0000000\n8      3.0000000\n9      5.0000000\n10    -2.6666667\n11    -6.6666667\n12     5.0000000\n13    -0.6666667\n14     1.3333333\n15     0.3333333\n16     0.3333333\n17     4.3333333\n18    -3.0000000\n19     2.3333333\n20     7.6666667\n21     4.6666667\n22    -6.3333333\n23     0.6666667\n24     0.6666667\n25     0.0000000\n26     5.6666667\n27    -5.0000000\n28    -5.0000000\n29     5.6666667\n30    -6.0000000\n31     6.6666667\n32     6.6666667\n33     1.6666667\n34    -5.3333333\n35     0.3333333\n36    -4.6666667\n37     6.6666667\n38     8.6666667\n39     5.0000000\n40     7.3333333\n41     4.3333333\n42     0.3333333\n43    -1.3333333\n44     3.6666667\n45    -1.3333333\n46    -5.3333333\n47     1.6666667\n48     8.0000000\n49    -6.3333333\n50    -2.6666667\n51    -1.6666667\n52   -11.3333333\n53    -1.0000000\n54     6.6666667\n55     3.3333333\n56    -8.3333333\n57    -0.3333333\n58    -3.3333333\n59     4.0000000\n60     0.0000000\n61     3.3333333\n62    -2.0000000\n63    -4.0000000\n64     1.0000000\n65     6.3333333\n66     7.0000000\n67    -0.3333333\n68    -4.3333333\n69     2.3333333\n70    10.6666667\n71    -4.0000000\n72     4.3333333\n73    -5.0000000\n74    -7.3333333\n75    -1.6666667\n76     6.6666667\n77    -5.6666667\n78     9.3333333\n79    -4.0000000\n80     3.6666667\n81    -3.6666667\n82     1.0000000\n83    -5.3333333\n84     1.3333333\n85    -2.0000000\n86    -7.6666667\n87     0.0000000\n88     5.0000000\n89    -2.3333333\n90     3.3333333\n91    10.0000000\n92     8.6666667\n93     1.0000000\n94     1.6666667\n95     1.3333333\n96     4.3333333\n97    -2.0000000\n98    -6.3333333\n99     4.0000000\n100    5.3333333\n101   -3.3333333\n102    4.6666667\n103   -4.3333333\n104   -1.6666667\n105   -5.0000000\n106   -6.3333333\n107    1.3333333\n108    1.3333333\n109   -4.3333333\n110   -4.3333333\n111   -2.0000000\n112    2.3333333\n113    5.6666667\n114    7.3333333\n115   -1.0000000\n116    8.0000000\n117   10.3333333\n118    6.3333333\n119   -2.0000000\n120   -5.0000000\n121    1.6666667\n122    8.3333333\n123   -5.0000000\n124   -2.0000000\n125   -4.6666667\n126   10.0000000\n127   -4.3333333\n128   -2.0000000\n129   -1.3333333\n130    5.3333333\n131   -6.0000000\n132    1.0000000\n133   -4.3333333\n134   11.0000000\n135   -0.6666667\n136    4.0000000\n137   -6.0000000\n138   -1.3333333\n139   -1.0000000\n140    4.0000000\n141    9.3333333\n142   -1.0000000\n143   -8.0000000\n144   11.6666667\n145   -0.6666667\n146   -6.0000000\n147    4.0000000\n148    5.3333333\n149   -2.6666667\n150    4.6666667\n151   -0.3333333\n152    2.6666667\n153    4.3333333\n154    5.3333333\n155   -8.0000000\n156    0.0000000\n157   -3.0000000\n158   -2.0000000\n159   -3.0000000\n160    3.6666667\n161    8.0000000\n162   -2.0000000\n163   -6.3333333\n164    7.6666667\n165   -1.0000000\n166    1.3333333\n167   -0.3333333\n168   -3.0000000\n169    0.6666667\n170   -5.6666667\n171    5.0000000\n172   -4.0000000\n173    5.0000000\n174    1.3333333\n175   -2.3333333\n176    1.6666667\n177   -5.3333333\n178    2.3333333\n179   -6.3333333\n180    5.0000000\n181  -10.0000000\n182   -6.0000000\n183   -0.6666667\n184    8.6666667\n185   -5.0000000\n186   -1.0000000\n187   -5.6666667\n188    2.3333333\n189    4.0000000\n190   -8.0000000\n191    3.3333333\n192   -8.3333333\n193    0.0000000\n194    0.6666667\n195    2.3333333\n196    0.6666667\n197    8.0000000\n198    6.6666667\n199   -2.0000000\n200    0.3333333\n201   -0.6666667\n202    0.6666667\n203    9.0000000\n204   -8.6666667\n205    2.3333333\n206    8.0000000\n207    0.6666667\n208   -6.3333333\n209    3.0000000\n210    1.6666667\n211   -8.0000000\n212   -2.6666667\n213    1.3333333\n214   -3.0000000\n215    4.0000000\n216   -4.6666667\n217   -7.3333333\n218    5.0000000\n219    0.6666667\n220    0.0000000\n221    1.3333333\n222   -4.0000000\n223   -4.3333333\n224    8.3333333\n225   -1.0000000\n226   -5.3333333\n227    3.3333333\n228    2.6666667\n229   -1.3333333\n230   -2.0000000\n231    3.0000000\n232   -5.3333333\n233   -1.0000000\n234   -9.3333333\n235   -8.0000000\n236   -1.3333333\n237    0.6666667\n238    2.0000000\n239    2.0000000\n240    7.3333333\n241    1.6666667\n242    4.0000000\n243   -2.0000000\n244    4.6666667\n245    4.3333333\n246   -6.3333333\n247   -7.0000000\n248    3.0000000\n249   -7.0000000\n250   -3.3333333\n251   -4.0000000\n252   -7.0000000\n253    0.6666667\n254   -1.3333333\n255    2.0000000\n256    1.3333333\n257    3.6666667\n258    2.3333333\n259   -1.3333333\n260    7.6666667\n261    8.6666667\n262   -6.3333333\n263   -2.3333333\n264    4.0000000\n265    4.6666667\n266   -0.3333333\n267   -7.3333333\n268   -1.6666667\n269   -4.3333333\n270    1.0000000\n271   -7.6666667\n272    5.0000000\n273   -6.0000000\n274    3.0000000\n275   -1.0000000\n276    5.6666667\n277    2.3333333\n278    4.0000000\n279   -5.6666667\n280    3.6666667\n281    0.3333333\n282    8.0000000\n283   -4.0000000\n284   -3.0000000\n285   -9.0000000\n286  -11.6666667\n287   -2.3333333\n288    1.3333333\n289   -0.3333333\n290    2.0000000\n291    0.6666667\n292   -9.3333333\n293    2.3333333\n294    3.0000000\n295   -5.3333333\n296   -6.6666667\n297    4.0000000\n298    5.6666667\n299   -6.6666667\n300    3.3333333\n301   -5.3333333\n302   11.0000000\n303    0.3333333\n304   -3.6666667\n305   -0.3333333\n306   -4.3333333\n307    0.0000000\n308   -3.3333333\n309    7.0000000\n310   -5.3333333\n311   -5.0000000\n312   -3.3333333\n313   -6.0000000\n314    1.0000000\n315    6.0000000\n316   -3.6666667\n317    4.3333333\n318    1.0000000\n319   -3.0000000\n320    4.3333333\n321   -7.0000000\n322   -1.0000000\n323   -5.0000000\n324   -0.6666667\n325    1.0000000\n326   -3.0000000\n327    0.3333333\n328    3.6666667\n329    3.3333333\n330   -2.6666667\n331    0.0000000\n332   -4.0000000\n333   -0.6666667\n334    6.0000000\n335   -4.0000000\n336    1.3333333\n337   -0.3333333\n338    2.6666667\n339    9.3333333\n340   -5.0000000\n341    3.6666667\n342    5.6666667\n343    3.0000000\n344    1.6666667\n345    1.3333333\n346   -3.0000000\n347    7.0000000\n348   -6.0000000\n349    4.0000000\n350   -8.0000000\n351    1.6666667\n352   -4.0000000\n353   -0.3333333\n354   -5.3333333\n355    1.3333333\n356    6.0000000\n357   -4.0000000\n358    6.3333333\n359   -1.6666667\n360   -4.3333333\n361    0.0000000\n362   -5.6666667\n363   -2.3333333\n364    4.3333333\n365   -2.3333333\n366    1.0000000\n367    1.6666667\n368    8.3333333\n369    4.3333333\n370    0.6666667\n371   -0.6666667\n372   -9.6666667\n373   -6.3333333\n374    1.6666667\n375    3.6666667\n376   -0.6666667\n377   -1.6666667\n378   -3.6666667\n379   -8.6666667\n380    7.6666667\n381   -0.6666667\n382    5.3333333\n383    2.0000000\n384    2.3333333\n385    2.6666667\n386    5.6666667\n387   -3.6666667\n388    4.3333333\n389   -4.3333333\n390  -11.0000000\n391   -1.0000000\n392    1.3333333\n393    6.0000000\n394   10.6666667\n395   -2.3333333\n396   -2.3333333\n397    0.6666667\n398   -1.3333333\n399   -3.6666667\n400   -2.3333333\n401   -7.0000000\n402   -6.0000000\n403   -6.6666667\n404    1.3333333\n405    8.3333333\n406   -1.0000000\n407    3.6666667\n408    5.0000000\n409    0.3333333\n410   -4.6666667\n411   -8.3333333\n412    6.0000000\n413   -0.6666667\n414   -1.6666667\n415   -8.6666667\n416   -1.3333333\n417   -2.0000000\n418    7.3333333\n419   -3.6666667\n420    6.3333333\n421    1.6666667\n422    8.0000000\n423   -1.0000000\n424  -11.0000000\n425   -3.6666667\n426   -1.6666667\n427    0.0000000\n428   -2.3333333\n429   -7.0000000\n430    1.0000000\n431   -5.3333333\n432    5.0000000\n433    0.3333333\n434    3.0000000\n435    5.0000000\n436    3.0000000\n437    3.3333333\n438    6.3333333\n439    0.0000000\n440    6.0000000\n441    0.6666667\n442   -0.3333333\n443   -1.0000000\n444   -5.0000000\n445   -3.3333333\n446    2.0000000\n447    2.0000000\n448   -2.3333333\n449   -4.3333333\n450    0.0000000\n451    4.3333333\n452    3.3333333\n453   -2.0000000\n454    6.0000000\n455   -2.6666667\n456   -5.0000000\n457   -5.0000000\n458   -7.6666667\n459    7.0000000\n460   -2.0000000\n461    4.3333333\n462    4.3333333\n463    2.0000000\n464    3.6666667\n465   -6.3333333\n466    1.0000000\n467    6.3333333\n468    3.6666667\n469    5.6666667\n470   -2.0000000\n471   -8.6666667\n472   -4.3333333\n473   -6.3333333\n474   -1.6666667\n475    1.3333333\n476   -0.6666667\n477    6.0000000\n478    2.3333333\n479    3.0000000\n480   -5.3333333\n481    0.0000000\n482    6.6666667\n483    7.6666667\n484   -2.0000000\n485   -1.3333333\n486    1.0000000\n487   -8.6666667\n488   -3.0000000\n489   -3.6666667\n490  -10.0000000\n491    3.0000000\n492    0.3333333\n493   -5.0000000\n494    2.3333333\n495    0.6666667\n496   -6.6666667\n497   -5.0000000\n498    0.6666667\n499   -3.6666667\n500    4.0000000\n501    3.6666667\n502    2.3333333\n503    1.3333333\n504   -2.0000000\n505    6.6666667\n506   -5.6666667\n507   -5.6666667\n508   -8.0000000\n509   -4.6666667\n510    0.0000000\n511   -2.0000000\n512   -5.3333333\n513   -2.0000000\n514   -4.0000000\n515   -1.0000000\n516   -3.6666667\n517   -3.3333333\n518    1.0000000\n519    5.0000000\n520    3.3333333\n521   -2.0000000\n522   -5.6666667\n523    5.0000000\n524    3.0000000\n525   -1.3333333\n526    5.3333333\n527    3.0000000\n528    1.3333333\n529   -3.6666667\n530    2.3333333\n531  -10.0000000\n532   -4.0000000\n533   -4.0000000\n534   11.3333333\n535   -2.6666667\n536    0.0000000\n537   -2.6666667\n538   -2.6666667\n539    0.0000000\n540    2.6666667\n541   -4.6666667\n542    5.3333333\n543    0.0000000\n544   -0.6666667\n545   -1.3333333\n546    3.3333333\n547    1.0000000\n548  -10.3333333\n549    0.6666667\n550    5.6666667\n551   -3.0000000\n552    7.0000000\n553    3.0000000\n554    4.3333333\n555    6.6666667\n556    3.6666667\n557   -0.6666667\n558   -2.0000000\n559   -6.6666667\n560   -2.3333333\n561   -4.0000000\n562    4.3333333\n563    4.0000000\n564    4.0000000\n565   -2.0000000\n566   -2.3333333\n567   -2.3333333\n568   -2.0000000\n569  -11.0000000\n570   -5.0000000\n571   -2.0000000\n572    2.6666667\n573   -2.6666667\n574    5.6666667\n575    9.6666667\n576   -3.0000000\n577    9.6666667\n578    7.0000000\n579   -2.0000000\n580   -4.0000000\n581    3.3333333\n582   -2.0000000\n583   -0.3333333\n584    9.6666667\n585   -4.6666667\n586    3.3333333\n587   -8.6666667\n588    2.0000000\n589    0.0000000\n590    7.3333333\n591   -3.0000000\n592   -4.6666667\n593    0.0000000\n594   -0.3333333\n595    2.3333333\n596   -1.3333333\n597    1.6666667\n598    1.6666667\n599    6.0000000\n600    0.6666667\n601   -4.3333333\n602    1.6666667\n603   -7.0000000\n604   -5.0000000\n605   -4.3333333\n606   -5.3333333\n607   -2.3333333\n608   -1.0000000\n609    0.6666667\n610    3.0000000\n611    2.6666667\n612   -2.3333333\n613    0.0000000\n614    1.0000000\n615   -4.0000000\n616    0.3333333\n617    3.6666667\n618    0.0000000\n619   -0.6666667\n620   -1.3333333\n621   10.3333333\n622    4.3333333\n623   -0.6666667\n624   -0.6666667\n625    2.6666667\n626    2.6666667\n627    1.0000000\n628    4.3333333\n629   -4.3333333\n630    2.6666667\n631    6.3333333\n632    7.3333333\n633    9.3333333\n634   -5.3333333\n635   -5.6666667\n636    0.3333333\n637   -6.3333333\n638    6.0000000\n639    3.0000000\n640    1.0000000\n641   -2.0000000\n642   -4.3333333\n643   -5.0000000\n644   -3.0000000\n645    0.0000000\n646   -2.0000000\n647    2.6666667\n648   -1.3333333\n649    0.0000000\n650    0.3333333\n651   -9.6666667\n652   -4.6666667\n653    2.0000000\n654   -2.3333333\n655   -5.0000000\n656   -2.6666667\n657    7.6666667\n658   -5.0000000\n659    3.0000000\n660   -8.6666667\n661    0.3333333\n662    4.6666667\n663   -5.3333333\n664    2.3333333\n665   -2.6666667\n666   -3.3333333\n667   -6.6666667\n668    0.0000000\n669    1.0000000\n670    3.0000000\n671  -11.6666667\n672   -1.3333333\n673    4.0000000\n674   -5.6666667\n675   -5.6666667\n676   -2.6666667\n677   -4.0000000\n678    0.6666667\n679    2.3333333\n680    1.6666667\n681    7.0000000\n682   -2.6666667\n683    0.3333333\n684   -4.3333333\n685   -3.0000000\n686   -7.6666667\n687    6.3333333\n688   -4.6666667\n689   -6.6666667\n690    3.3333333\n691   -3.6666667\n692    5.3333333\n693    3.6666667\n694    8.3333333\n695    4.3333333\n696   -5.3333333\n697    5.6666667\n698   -5.3333333\n699    2.6666667\n700    7.3333333\n701    8.6666667\n702   -8.3333333\n703   -2.3333333\n704    3.0000000\n705   -1.6666667\n706    1.0000000\n707   -7.6666667\n708   -4.6666667\n709   -3.0000000\n710   -1.3333333\n711   -5.3333333\n712   -9.6666667\n713    2.6666667\n714    0.3333333\n715    1.6666667\n716   -5.3333333\n717   -8.6666667\n718    1.0000000\n719    1.3333333\n720    6.6666667\n721   -0.6666667\n722   -2.0000000\n723    5.3333333\n724   -2.6666667\n725    1.0000000\n726   -4.6666667\n727    0.3333333\n728    3.0000000\n729    7.6666667\n730   -2.3333333\n731    0.0000000\n732   -6.3333333\n733    3.3333333\n734   -0.3333333\n735    7.6666667\n736   -1.0000000\n737    8.3333333\n738   -0.3333333\n739   -6.0000000\n740    0.3333333\n741    8.0000000\n742    8.3333333\n743   -3.6666667\n744    6.0000000\n745    3.3333333\n746   -2.6666667\n747   -2.6666667\n748   -2.3333333\n749   -0.6666667\n750   -3.3333333\n751    0.3333333\n752    3.0000000\n753   -3.6666667\n754   -6.3333333\n755   -1.3333333\n756    2.3333333\n757   -0.3333333\n758    1.6666667\n759   -4.6666667\n760    2.6666667\n761   -3.0000000\n762   -0.6666667\n763    7.0000000\n764    3.3333333\n765   -2.6666667\n766    0.0000000\n767    0.0000000\n768    2.6666667\n769   -9.3333333\n770   -3.0000000\n771    3.3333333\n772   -4.6666667\n773    2.6666667\n774    1.3333333\n775    2.6666667\n776    5.3333333\n777   -2.6666667\n778    3.0000000\n779   -3.0000000\n780   -5.3333333\n781   -3.6666667\n782   -0.6666667\n783   -6.6666667\n784   -8.0000000\n785  -11.0000000\n786    1.3333333\n787    0.0000000\n788   -4.0000000\n789    4.6666667\n790   -0.3333333\n791    1.3333333\n792    4.3333333\n793   -5.6666667\n794   -2.0000000\n795   -6.6666667\n796   -1.3333333\n797   -4.3333333\n798    4.6666667\n799  -10.6666667\n800    0.6666667\n801   -5.0000000\n802    5.3333333\n803    6.3333333\n804   -0.6666667\n805   -9.3333333\n806    8.0000000\n807    3.6666667\n808   -4.6666667\n809    0.0000000\n810   -1.3333333\n811    4.6666667\n812    2.3333333\n813   -4.3333333\n814   -7.6666667\n815   -0.3333333\n816    5.0000000\n817   -4.6666667\n818    7.3333333\n819    5.6666667\n820   -2.6666667\n821   -2.3333333\n822   -4.3333333\n823    3.3333333\n824   -5.3333333\n825  -10.0000000\n826    4.3333333\n827   -4.3333333\n828   -2.3333333\n829   -5.6666667\n830   -3.3333333\n831    2.3333333\n832    5.3333333\n833   -2.0000000\n834    5.0000000\n835   -3.6666667\n836    0.3333333\n837   -7.3333333\n838    0.6666667\n839    2.6666667\n840   -7.0000000\n841   -5.0000000\n842   -1.6666667\n843    2.3333333\n844    1.6666667\n845   -3.6666667\n846   -5.3333333\n847    3.3333333\n848    0.3333333\n849    7.0000000\n850    0.6666667\n851   -0.6666667\n852    2.0000000\n853   -1.6666667\n854   -2.6666667\n855    2.3333333\n856  -10.0000000\n857    3.6666667\n858    2.0000000\n859    3.3333333\n860   -4.3333333\n861   -8.0000000\n862    3.3333333\n863    4.0000000\n864    4.0000000\n865   -5.3333333\n866    3.3333333\n867   -3.3333333\n868   10.0000000\n869   -4.0000000\n870   -1.6666667\n871   -2.6666667\n872  -10.6666667\n873    3.3333333\n874    7.6666667\n875    5.3333333\n876   -3.3333333\n877   -1.6666667\n878    2.6666667\n879    0.0000000\n880    6.0000000\n881   -2.3333333\n882    4.0000000\n883    2.6666667\n884   -0.3333333\n885   -4.3333333\n886    0.0000000\n887   -7.0000000\n888    2.0000000\n889    2.0000000\n890   -0.6666667\n891   -5.6666667\n892    6.3333333\n893    5.3333333\n894    0.6666667\n895    2.0000000\n896    7.3333333\n897   -2.0000000\n898    1.0000000\n899    1.6666667\n900    3.6666667\n901   -6.3333333\n902   -0.3333333\n903   -2.0000000\n904    4.0000000\n905   -2.6666667\n906   -2.6666667\n907    2.3333333\n908    2.0000000\n909   -7.3333333\n910   -1.6666667\n911    3.6666667\n912    4.3333333\n913    2.3333333\n914    3.3333333\n915   -7.3333333\n916    5.0000000\n917   -3.3333333\n918    4.0000000\n919   -2.6666667\n920   -4.6666667\n921   -3.6666667\n922    8.0000000\n923   -4.6666667\n924    0.3333333\n925   -0.3333333\n926    2.0000000\n927    8.6666667\n928   -8.0000000\n929   -1.0000000\n930    3.3333333\n931    3.0000000\n932   -3.6666667\n933    0.6666667\n934    2.0000000\n935    5.3333333\n936  -10.6666667\n937   -2.3333333\n938    3.0000000\n939   -2.6666667\n940    0.3333333\n941    1.6666667\n942    6.0000000\n943   -7.0000000\n944    2.0000000\n945    1.6666667\n946    1.6666667\n947   -5.3333333\n948   -2.6666667\n949    3.6666667\n950    5.6666667\n951   11.0000000\n952   -3.0000000\n953   -2.3333333\n954    0.0000000\n955   -5.0000000\n956    0.3333333\n957   -3.6666667\n958   -3.3333333\n959   -6.0000000\n960    2.3333333\n961   -3.0000000\n962    2.3333333\n963    6.6666667\n964   -8.6666667\n965    1.6666667\n966   -3.0000000\n967    4.6666667\n968    3.6666667\n969    3.6666667\n970   -8.3333333\n971   -5.6666667\n972    1.0000000\n973   -3.3333333\n974   -3.3333333\n975   -9.6666667\n976   -2.0000000\n977    7.6666667\n978   10.6666667\n979    0.6666667\n980   -9.6666667\n981   -6.3333333\n982    3.0000000\n983    2.0000000\n984    1.0000000\n985   -4.3333333\n986    2.3333333\n987    0.3333333\n988   -2.0000000\n989   -3.0000000\n990   -5.0000000\n991    9.6666667\n992   -5.3333333\n993    5.0000000\n994   -3.0000000\n995    1.3333333\n996    4.6666667\n997    4.3333333\n998    2.0000000\n999   -0.3333333\n1000   3.0000000\n1001   6.3333333\n1002   1.3333333\n1003  -3.0000000\n1004   5.3333333\n1005  -2.0000000\n1006  -2.3333333\n1007   8.3333333\n1008  -4.3333333\n1009  -1.6666667\n1010  -0.3333333\n1011  -1.6666667\n1012  -1.3333333\n1013  -5.0000000\n1014   0.0000000\n1015  -7.3333333\n1016   5.3333333\n1017   4.3333333\n1018   2.0000000\n1019   7.0000000\n1020   0.0000000\n1021   7.6666667\n1022   6.0000000\n1023   4.3333333\n1024   4.0000000\n1025 -10.0000000\n1026  -4.6666667\n1027   5.3333333\n1028   0.3333333\n1029   2.3333333\n1030  -9.6666667\n1031   2.0000000\n1032   2.0000000\n1033  -0.6666667\n1034  -1.6666667\n1035   1.6666667\n1036   0.0000000\n1037   1.6666667\n1038  -2.6666667\n1039   9.3333333\n1040   2.3333333\n1041   3.0000000\n1042   1.0000000\n1043  -4.6666667\n1044   4.0000000\n1045   0.6666667\n1046  -2.3333333\n1047   0.3333333\n1048   3.0000000\n1049   0.6666667\n1050   3.0000000\n1051   0.3333333\n1052  -0.3333333\n1053   4.6666667\n1054  -4.0000000\n1055  -0.3333333\n1056  -2.0000000\n1057   3.0000000\n1058   3.6666667\n1059   3.0000000\n1060   6.3333333\n1061  -6.3333333\n1062  -0.6666667\n1063   6.0000000\n1064 -10.6666667\n1065  -3.3333333\n1066  -6.3333333\n1067   0.3333333\n1068  -3.6666667\n1069  -1.0000000\n1070  -1.3333333\n1071  -4.0000000\n1072  -1.3333333\n1073   2.6666667\n1074   4.0000000\n1075   6.3333333\n1076  -1.6666667\n1077   2.6666667\n1078   3.0000000\n1079  -9.0000000\n1080  -6.3333333\n1081   5.6666667\n1082   0.3333333\n1083   0.6666667\n1084   0.3333333\n1085  -1.0000000\n1086   3.0000000\n1087   1.0000000\n1088   4.6666667\n1089   3.6666667\n1090   6.0000000\n1091   6.6666667\n1092   6.0000000\n1093  -7.0000000\n1094  -8.6666667\n1095  -2.0000000\n1096  10.3333333\n1097   1.6666667\n1098  -4.0000000\n1099  10.3333333\n1100   2.6666667\n1101 -11.0000000\n1102   3.3333333\n1103  -1.3333333\n1104  -9.0000000\n1105  -0.3333333\n1106  -4.6666667\n1107   1.3333333\n1108   0.0000000\n1109  -1.0000000\n1110  -2.6666667\n1111   4.0000000\n1112   2.0000000\n1113   4.6666667\n1114   3.0000000\n1115   6.0000000\n1116   4.0000000\n1117   6.6666667\n1118   3.6666667\n1119  -7.3333333\n1120  -6.3333333\n1121   3.0000000\n1122  -7.6666667\n1123  -6.3333333\n1124  14.0000000\n1125  -3.6666667\n1126  -7.0000000\n1127  -5.0000000\n1128  -1.6666667\n1129  -8.3333333\n1130  -5.3333333\n1131   7.6666667\n1132  -5.3333333\n1133  -2.0000000\n1134   1.3333333\n1135   0.6666667\n1136   5.3333333\n1137  -5.0000000\n1138  -1.0000000\n1139  -3.0000000\n1140  -4.3333333\n1141  -7.0000000\n1142   4.0000000\n1143   1.0000000\n1144  -4.0000000\n1145  -5.6666667\n1146   9.0000000\n1147  -4.0000000\n1148  -3.6666667\n1149   7.3333333\n1150   8.6666667\n1151   2.0000000\n1152   2.6666667\n1153   0.3333333\n1154  -5.3333333\n1155  -2.0000000\n1156   2.0000000\n1157   1.6666667\n1158  -4.0000000\n1159  -1.3333333\n1160  -0.3333333\n1161  -5.3333333\n1162  -9.6666667\n1163  -1.3333333\n1164  -1.6666667\n1165   4.3333333\n1166   5.0000000\n1167   0.6666667\n1168  -0.6666667\n1169  -4.3333333\n1170   5.3333333\n1171   5.0000000\n1172   1.0000000\n1173   0.6666667\n1174  -5.3333333\n1175   6.0000000\n1176   8.3333333\n1177   0.3333333\n1178   5.6666667\n1179  -0.6666667\n1180   3.3333333\n1181   6.6666667\n1182  -0.6666667\n1183  -2.3333333\n1184  -0.6666667\n1185   1.6666667\n1186   3.3333333\n1187  -1.3333333\n1188  -3.3333333\n1189   1.0000000\n1190  -6.0000000\n1191 -10.3333333\n1192   3.6666667\n1193   2.0000000\n1194   4.6666667\n1195   7.0000000\n1196   3.3333333\n1197  -9.3333333\n1198   1.6666667\n1199   2.0000000\n1200   0.3333333\n1201  -2.3333333\n1202   5.3333333\n1203  11.3333333\n1204   0.6666667\n1205   1.3333333\n1206  -6.3333333\n1207  -8.6666667\n1208   5.0000000\n1209 -10.0000000\n1210  -4.0000000\n1211   5.6666667\n1212  -0.6666667\n1213   4.3333333\n1214  -5.0000000\n1215   6.3333333\n1216   4.6666667\n1217  -5.3333333\n1218   0.3333333\n1219   2.3333333\n1220   8.3333333\n1221   1.0000000\n1222  -4.6666667\n1223  -3.3333333\n1224  -2.3333333\n1225   3.3333333\n1226   5.0000000\n1227   0.0000000\n1228   2.0000000\n1229  -4.6666667\n1230   2.0000000\n1231  -5.0000000\n1232 -10.6666667\n1233   1.6666667\n1234  -0.3333333\n1235   6.0000000\n1236  -5.6666667\n1237  -4.0000000\n1238  -3.0000000\n1239   4.0000000\n1240  -5.6666667\n1241   1.6666667\n1242  -3.0000000\n1243   1.0000000\n1244   4.6666667\n1245   5.6666667\n1246  -4.6666667\n1247  -0.3333333\n1248   8.0000000\n1249  -9.0000000\n1250  -1.3333333\n1251  -2.3333333\n1252  -1.6666667\n1253  -3.0000000\n1254   0.6666667\n1255  -3.3333333\n1256  -7.6666667\n1257   2.3333333\n1258  -9.3333333\n1259  -6.3333333\n1260  -1.6666667\n1261  10.6666667\n1262  -6.6666667\n1263  -9.0000000\n1264   0.0000000\n1265   2.6666667\n1266  -1.6666667\n1267   2.0000000\n1268  -9.3333333\n1269   9.0000000\n1270   2.3333333\n1271  -3.0000000\n1272  -4.0000000\n1273  -3.6666667\n1274   3.0000000\n1275  -5.3333333\n1276   6.6666667\n1277  -0.6666667\n1278  -3.3333333\n1279  -2.6666667\n1280  -1.0000000\n1281   2.0000000\n1282   1.0000000\n1283   3.0000000\n1284   1.3333333\n1285  -4.0000000\n1286  -8.0000000\n1287   2.0000000\n1288   4.6666667\n1289   5.0000000\n1290   6.6666667\n1291   2.0000000\n1292   3.0000000\n1293  -5.6666667\n1294  -4.3333333\n1295  -2.6666667\n1296  -0.3333333\n1297  -9.3333333\n1298  -2.3333333\n1299  -8.0000000\n1300   3.0000000\n1301   7.0000000\n1302  -3.6666667\n1303  -2.6666667\n1304   4.3333333\n1305  -7.6666667\n1306  -2.6666667\n1307  -1.3333333\n1308   0.0000000\n1309   8.0000000\n1310  -5.3333333\n1311  -3.0000000\n1312  -7.0000000\n1313   2.3333333\n1314  -5.0000000\n1315  -3.6666667\n1316  -2.3333333\n1317   5.6666667\n1318  -2.6666667\n1319   0.0000000\n1320  -1.6666667\n1321  -0.6666667\n1322  -4.3333333\n1323  -1.6666667\n1324  -1.6666667\n1325   0.3333333\n1326   1.3333333\n1327  -9.0000000\n1328  -3.3333333\n1329  -6.3333333\n1330   4.6666667\n1331  -2.3333333\n1332  -2.6666667\n1333  -1.0000000\n1334  -5.0000000\n1335  -4.3333333\n1336   4.3333333\n1337  -3.0000000\n1338 -10.6666667\n1339   0.6666667\n1340   0.0000000\n1341  -2.0000000\n1342   2.6666667\n1343  -2.0000000\n1344   0.0000000\n1345   2.3333333\n1346  -1.0000000\n1347   1.3333333\n1348   2.3333333\n1349  -0.3333333\n1350   3.0000000\n1351  -2.0000000\n1352  -5.6666667\n1353   0.0000000\n1354  -4.0000000\n1355   3.3333333\n1356   2.3333333\n1357   0.0000000\n1358  -4.0000000\n1359  -1.0000000\n1360   2.6666667\n1361  -3.3333333\n1362  -1.3333333\n1363  -5.0000000\n1364   3.6666667\n1365   1.6666667\n1366   1.3333333\n1367  -0.6666667\n1368   6.3333333\n1369  -5.3333333\n1370   1.0000000\n1371  -2.6666667\n1372  -7.3333333\n1373   5.3333333\n1374   0.3333333\n1375   2.0000000\n1376  -5.6666667\n1377  -8.3333333\n1378  -2.6666667\n1379   5.0000000\n1380   9.3333333\n1381   3.0000000\n1382  -7.3333333\n1383   2.6666667\n1384  -6.0000000\n1385   6.6666667\n1386   4.3333333\n1387   5.0000000\n1388   2.3333333\n1389   7.0000000\n1390  -3.3333333\n1391   1.6666667\n1392   5.0000000\n1393   3.6666667\n1394   2.0000000\n1395   2.6666667\n1396   2.6666667\n1397  -0.3333333\n1398   5.6666667\n1399   0.0000000\n1400   8.0000000\n1401   7.0000000\n1402   1.3333333\n1403  -1.6666667\n1404   4.3333333\n1405   5.0000000\n1406   7.3333333\n1407 -10.6666667\n1408   0.3333333\n1409  -3.3333333\n1410  -3.0000000\n1411  -2.3333333\n1412   4.6666667\n1413   3.6666667\n1414   4.0000000\n1415   5.3333333\n1416  -0.3333333\n1417   0.6666667\n1418  -2.3333333\n1419  -0.6666667\n1420   4.6666667\n1421   1.3333333\n1422  -8.0000000\n1423   1.6666667\n1424  -2.0000000\n1425   1.0000000\n1426   0.0000000\n1427   0.3333333\n1428  -3.0000000\n1429   0.3333333\n1430   1.6666667\n1431  -4.6666667\n1432   0.3333333\n1433   7.0000000\n1434   0.0000000\n1435   3.0000000\n1436  -3.6666667\n1437  -7.3333333\n1438   4.0000000\n1439   5.3333333\n1440   0.0000000\n1441  -2.0000000\n1442   4.0000000\n1443  -2.0000000\n1444  -2.6666667\n1445  -3.6666667\n1446  -3.6666667\n1447   4.6666667\n1448   8.0000000\n1449  -2.3333333\n1450   2.0000000\n1451   4.6666667\n1452   5.3333333\n1453  -5.6666667\n1454   3.6666667\n1455  -7.3333333\n1456   3.6666667\n1457  -4.0000000\n1458   2.0000000\n1459  -4.3333333\n1460  -2.3333333\n1461  -2.0000000\n1462   1.3333333\n1463   3.3333333\n1464  -1.0000000\n1465  -3.0000000\n1466  -0.6666667\n1467   3.6666667\n1468   6.6666667\n1469   2.0000000\n1470   4.0000000\n1471  -3.0000000\n1472   0.3333333\n1473   1.6666667\n1474  10.0000000\n1475   3.6666667\n1476  -2.0000000\n1477  -7.0000000\n1478   3.6666667\n1479  -4.0000000\n1480   5.6666667\n1481 -13.3333333\n1482   2.6666667\n1483   1.6666667\n1484   2.0000000\n1485  -0.3333333\n1486   5.6666667\n1487   2.3333333\n1488   4.0000000\n1489  10.3333333\n1490  -2.3333333\n1491  -0.3333333\n1492  -8.0000000\n1493  -3.3333333\n1494  -3.0000000\n1495  -3.0000000\n1496  -8.6666667\n1497   3.0000000\n1498   8.0000000\n1499   1.6666667\n1500  -2.6666667\n1501  -2.6666667\n1502   3.0000000\n1503  -0.3333333\n1504  -5.6666667\n1505   1.6666667\n1506   2.3333333\n1507   4.3333333\n1508  -4.3333333\n1509  -2.3333333\n1510  -2.0000000\n1511   0.3333333\n1512  -4.6666667\n1513   7.0000000\n1514   4.0000000\n1515   0.0000000\n1516  -6.3333333\n1517   3.6666667\n1518   1.6666667\n1519 -10.6666667\n1520  -8.6666667\n1521   7.6666667\n1522   5.6666667\n1523   0.3333333\n1524  -1.3333333\n1525   3.0000000\n1526  -5.0000000\n1527   1.6666667\n1528   3.0000000\n1529  11.6666667\n1530  -2.6666667\n1531   9.6666667\n1532   3.3333333\n1533   0.3333333\n1534   0.6666667\n1535  -3.0000000\n1536  -6.6666667\n1537   2.3333333\n1538   5.0000000\n1539   1.0000000\n1540   1.6666667\n1541   6.6666667\n1542   7.3333333\n1543   2.6666667\n1544  -1.0000000\n1545  -1.0000000\n1546   1.6666667\n1547   1.0000000\n1548  -0.3333333\n1549   3.6666667\n1550   1.6666667\n1551   0.6666667\n1552  10.6666667\n1553  -0.6666667\n1554 -10.3333333\n1555  -1.3333333\n1556  -5.3333333\n1557  -4.0000000\n1558  -4.6666667\n1559  -2.0000000\n1560   1.6666667\n1561   2.3333333\n1562  -7.0000000\n1563  -1.0000000\n1564  -5.6666667\n1565   1.6666667\n1566  -9.3333333\n1567   3.0000000\n1568   3.3333333\n1569   0.6666667\n1570  -4.3333333\n1571   7.6666667\n1572   6.3333333\n1573  -1.6666667\n1574   2.6666667\n1575  -6.6666667\n1576  -4.6666667\n1577  -3.3333333\n1578  -6.6666667\n1579   3.6666667\n1580   5.0000000\n1581  -0.3333333\n1582   5.3333333\n1583  -1.3333333\n1584   4.0000000\n1585   2.6666667\n1586   7.3333333\n1587  -6.6666667\n1588   3.0000000\n1589  -0.6666667\n1590   0.0000000\n1591   6.6666667\n1592   4.3333333\n1593  -0.3333333\n1594  -2.3333333\n1595  -4.3333333\n1596  -2.6666667\n1597   2.3333333\n1598   4.0000000\n1599   5.0000000\n1600   5.0000000\n1601  -2.3333333\n1602  -2.3333333\n1603   5.0000000\n1604  11.0000000\n1605   4.0000000\n1606  -6.0000000\n1607  -8.3333333\n1608  10.3333333\n1609  -0.3333333\n1610   2.6666667\n1611   7.3333333\n1612  -0.3333333\n1613  -6.3333333\n1614   6.3333333\n1615   2.6666667\n1616  10.0000000\n1617   3.0000000\n1618 -11.6666667\n1619   2.6666667\n1620   7.6666667\n1621   1.3333333\n1622  -5.3333333\n1623   2.6666667\n1624   6.6666667\n1625  -8.3333333\n1626  -7.0000000\n1627 -10.0000000\n1628  -0.6666667\n1629  -0.3333333\n1630   6.3333333\n1631   6.0000000\n1632   1.0000000\n1633   3.6666667\n1634  -3.0000000\n1635   2.6666667\n1636   5.6666667\n1637  -3.0000000\n1638   0.6666667\n1639  -5.3333333\n1640  -0.3333333\n1641  -7.3333333\n1642  -5.6666667\n1643   0.3333333\n1644   0.6666667\n1645  -2.0000000\n1646   4.0000000\n1647  -1.3333333\n1648   3.6666667\n1649   0.3333333\n1650   6.6666667\n1651   3.6666667\n1652  -0.3333333\n1653  -4.6666667\n1654   1.3333333\n1655   7.0000000\n1656  -1.0000000\n1657  -6.0000000\n1658   8.0000000\n1659  -2.0000000\n1660   7.0000000\n1661   3.6666667\n1662   1.3333333\n1663  -5.6666667\n1664   6.6666667\n1665  -2.6666667\n1666   6.3333333\n1667   4.3333333\n1668  -3.3333333\n1669  -2.3333333\n1670   5.0000000\n1671   4.3333333\n1672   0.0000000\n1673   0.0000000\n1674  -0.3333333\n1675   3.3333333\n1676   4.6666667\n1677  -1.0000000\n1678  -3.0000000\n1679  -1.0000000\n1680  -4.6666667\n1681  -2.3333333\n1682   8.0000000\n1683  -8.3333333\n1684   0.6666667\n1685  -1.6666667\n1686   4.6666667\n1687  11.0000000\n1688  -3.3333333\n1689   0.6666667\n1690   4.6666667\n1691  -7.6666667\n1692   2.0000000\n1693  -0.3333333\n1694   5.3333333\n1695  -0.6666667\n1696  -2.6666667\n1697   0.6666667\n1698  -0.3333333\n1699  -8.0000000\n1700   6.6666667\n1701  -8.6666667\n1702   1.0000000\n1703   1.0000000\n1704   9.6666667\n1705  -4.6666667\n1706   0.6666667\n1707   5.3333333\n1708   1.6666667\n1709  -0.6666667\n1710  -9.6666667\n1711  -5.6666667\n1712  -6.3333333\n1713   5.6666667\n1714   2.3333333\n1715  -1.3333333\n1716   7.0000000\n1717  -4.3333333\n1718   0.0000000\n1719   2.3333333\n1720   8.3333333\n1721  -2.3333333\n1722   5.0000000\n1723   0.6666667\n1724   0.3333333\n1725  -3.0000000\n1726  -4.3333333\n1727  -3.6666667\n1728  -3.3333333\n1729  -1.3333333\n1730  -4.0000000\n1731  -7.3333333\n1732  -3.3333333\n1733   4.0000000\n1734  -5.3333333\n1735  -3.6666667\n1736  -2.6666667\n1737  -1.0000000\n1738  -1.0000000\n1739  -4.6666667\n1740   1.6666667\n1741   6.6666667\n1742   1.0000000\n1743  -1.3333333\n1744   7.3333333\n1745 -10.0000000\n1746   4.6666667\n1747   7.0000000\n1748  -8.6666667\n1749   2.6666667\n1750   2.6666667\n1751  -0.6666667\n1752   0.3333333\n1753   5.0000000\n1754   3.0000000\n1755   2.6666667\n1756  -2.6666667\n1757  -7.3333333\n1758   2.0000000\n1759   5.6666667\n1760   1.3333333\n1761  -4.6666667\n1762   3.6666667\n1763  -1.3333333\n1764   0.3333333\n1765  -0.6666667\n1766   0.6666667\n1767   4.3333333\n1768  -0.3333333\n1769   2.3333333\n1770  -0.3333333\n1771   6.3333333\n1772   5.6666667\n1773  -8.0000000\n1774   3.6666667\n1775   0.6666667\n1776   5.6666667\n1777  -1.6666667\n1778  -4.3333333\n1779   6.3333333\n1780   6.3333333\n1781  -9.0000000\n1782  -1.0000000\n1783   2.6666667\n1784   1.3333333\n1785  -1.6666667\n1786  -5.3333333\n1787  -9.3333333\n1788  -5.0000000\n1789   4.6666667\n1790  -2.6666667\n1791   4.3333333\n1792  -5.3333333\n1793  -6.0000000\n1794  -1.3333333\n1795   2.3333333\n1796  -1.6666667\n1797   7.3333333\n1798 -11.6666667\n1799  -1.6666667\n1800   2.3333333\n1801   8.3333333\n1802  -2.3333333\n1803  -4.3333333\n1804   2.3333333\n1805  -5.0000000\n1806   4.0000000\n1807   6.6666667\n1808   3.6666667\n1809  -3.3333333\n1810  -6.6666667\n1811  -8.6666667\n1812  -2.0000000\n1813   2.0000000\n1814   4.3333333\n1815   2.3333333\n1816   1.6666667\n1817  -2.6666667\n1818   7.0000000\n1819  -7.0000000\n1820  -3.0000000\n1821 -10.0000000\n1822  -3.3333333\n1823  -1.0000000\n1824   5.3333333\n1825  -4.6666667\n1826   1.0000000\n1827  -7.0000000\n1828  -4.6666667\n1829  -5.0000000\n1830  -2.6666667\n1831   1.0000000\n1832  -4.0000000\n1833   4.0000000\n1834  -8.6666667\n1835   7.6666667\n1836   8.3333333\n1837   1.0000000\n1838  -2.3333333\n1839   7.3333333\n1840  -7.6666667\n1841   5.3333333\n1842   2.3333333\n1843  -0.3333333\n1844   2.0000000\n1845   7.0000000\n1846   4.6666667\n1847   3.3333333\n1848   3.6666667\n1849  -2.6666667\n1850   2.6666667\n1851  -4.6666667\n1852   8.6666667\n1853   7.3333333\n1854  -1.0000000\n1855  -8.3333333\n1856   3.0000000\n1857   3.0000000\n1858  -1.0000000\n1859   6.0000000\n1860   4.6666667\n1861  -3.3333333\n1862   6.6666667\n1863   1.3333333\n1864  -3.6666667\n1865   2.3333333\n1866   1.0000000\n1867  -3.3333333\n1868  -7.0000000\n1869   0.0000000\n1870   0.0000000\n1871  -7.0000000\n1872  -4.3333333\n1873  -8.3333333\n1874  -2.3333333\n1875   5.0000000\n1876   3.0000000\n1877   0.3333333\n1878   6.6666667\n1879  10.0000000\n1880  -5.0000000\n1881   0.3333333\n1882 -11.0000000\n1883  -4.3333333\n1884  -7.0000000\n1885   4.0000000\n1886  11.3333333\n1887   7.0000000\n1888   1.3333333\n1889   9.0000000\n1890  -5.6666667\n1891  -4.3333333\n1892  -6.3333333\n1893   4.0000000\n1894  -2.0000000\n1895  -0.6666667\n1896   4.0000000\n1897   5.0000000\n1898 -11.3333333\n1899  -2.3333333\n1900   0.0000000\n1901  -5.0000000\n1902  -0.6666667\n1903  -5.6666667\n1904   0.3333333\n1905   1.6666667\n1906  -4.0000000\n1907   4.6666667\n1908  -1.0000000\n1909   1.0000000\n1910   0.3333333\n1911  -2.3333333\n1912   4.0000000\n1913   3.0000000\n1914   5.0000000\n1915   5.0000000\n1916  -1.6666667\n1917   4.0000000\n1918  -8.3333333\n1919  -8.3333333\n1920   8.3333333\n1921  -3.6666667\n1922  -5.0000000\n1923   6.0000000\n1924   8.6666667\n1925   7.6666667\n1926   0.6666667\n1927  -2.3333333\n1928   4.6666667\n1929   0.6666667\n1930  -1.6666667\n1931  -0.6666667\n1932   1.6666667\n1933  -5.0000000\n1934  -1.3333333\n1935   3.0000000\n1936  -6.3333333\n1937  11.0000000\n1938  -5.3333333\n1939  -2.3333333\n1940  -1.6666667\n1941   2.0000000\n1942   1.0000000\n1943  -4.0000000\n1944  10.0000000\n1945  -6.3333333\n1946  -1.3333333\n1947  -1.6666667\n1948  -3.0000000\n1949  -8.3333333\n1950   0.3333333\n1951  -7.3333333\n1952  -6.0000000\n1953  16.3333333\n1954  -0.3333333\n1955   0.0000000\n1956  11.6666667\n1957   0.6666667\n1958   2.3333333\n1959   6.0000000\n1960   2.6666667\n1961   5.0000000\n1962   3.6666667\n1963  -9.0000000\n1964   2.6666667\n1965   3.6666667\n1966  -4.6666667\n1967  -3.6666667\n1968   3.3333333\n1969  -3.0000000\n1970   0.6666667\n1971   3.6666667\n1972   2.3333333\n1973   7.3333333\n1974  -2.6666667\n1975   1.6666667\n1976   0.3333333\n1977  -0.6666667\n1978   2.0000000\n1979   6.0000000\n1980  -2.3333333\n1981  -1.6666667\n1982  -9.6666667\n1983   6.0000000\n1984  -8.6666667\n1985   1.3333333\n1986  -7.0000000\n1987   2.0000000\n1988  -3.0000000\n1989  -3.0000000\n1990   2.3333333\n1991  -8.3333333\n1992  -4.0000000\n1993  -2.6666667\n1994   6.3333333\n1995  -2.6666667\n1996  -0.3333333\n1997  -1.0000000\n1998  10.6666667\n1999  -8.6666667\n2000   4.6666667\n2001  -2.0000000\n2002  -4.3333333\n2003   3.0000000\n2004  -0.6666667\n2005  -1.3333333\n2006   2.0000000\n2007  -2.6666667\n2008   3.3333333\n2009   0.6666667\n2010  -4.3333333\n2011  -5.0000000\n2012   8.0000000\n2013  -5.6666667\n2014   6.6666667\n2015  -3.0000000\n2016 -13.6666667\n2017  10.6666667\n2018  -3.0000000\n2019   1.0000000\n2020  -1.6666667\n2021   1.3333333\n2022  -4.6666667\n2023   1.6666667\n2024  -1.3333333\n2025  -7.6666667\n2026  -6.6666667\n2027  -0.3333333\n2028   4.0000000\n2029  -1.0000000\n2030   0.6666667\n2031   9.3333333\n2032   0.0000000\n2033   6.3333333\n2034   7.0000000\n2035   7.6666667\n2036  -3.6666667\n2037  -5.6666667\n2038  -5.3333333\n2039   4.3333333\n2040  -4.0000000\n2041   8.6666667\n2042  -4.0000000\n2043  -1.6666667\n2044   2.6666667\n2045  -4.3333333\n2046   1.3333333\n2047  -1.0000000\n2048   2.3333333\n2049   4.0000000\n2050   2.3333333\n2051  -6.3333333\n2052   2.3333333\n2053  -6.0000000\n2054  -2.3333333\n2055   4.3333333\n2056  -7.3333333\n2057  -3.6666667\n2058  -2.6666667\n2059  -3.0000000\n2060   7.6666667\n2061   1.3333333\n2062  -2.6666667\n2063   3.6666667\n2064 -12.0000000\n2065  -2.0000000\n2066 -10.0000000\n2067   0.3333333\n2068   5.6666667\n2069  -0.3333333\n2070  -0.3333333\n2071   4.0000000\n2072  -5.0000000\n2073   0.6666667\n2074   1.6666667\n2075  -5.0000000\n2076  -3.3333333\n2077   4.3333333\n2078   0.3333333\n2079  -1.6666667\n2080   3.6666667\n2081  -1.6666667\n2082  -3.0000000\n2083   2.3333333\n2084   2.0000000\n2085   0.6666667\n2086   3.3333333\n2087   6.3333333\n2088  -2.3333333\n2089   7.3333333\n2090   0.6666667\n2091  -6.0000000\n2092   5.6666667\n2093  -4.0000000\n2094 -10.6666667\n2095  -3.0000000\n2096  -3.6666667\n2097   5.3333333\n2098  -6.3333333\n2099  -5.3333333\n2100   2.0000000\n2101  -2.6666667\n2102   0.0000000\n2103  -3.6666667\n2104   1.3333333\n2105  -1.0000000\n2106   5.6666667\n2107   2.0000000\n2108  -6.0000000\n2109  -2.6666667\n2110  -5.6666667\n2111   8.6666667\n2112  -6.0000000\n2113   4.6666667\n2114  -9.0000000\n2115  -5.0000000\n2116  -9.6666667\n2117   2.6666667\n2118  -0.6666667\n2119  -2.0000000\n2120   0.0000000\n2121   5.0000000\n2122   2.6666667\n2123   4.0000000\n2124   1.6666667\n2125  -6.6666667\n2126   2.6666667\n2127  -3.6666667\n2128   8.3333333\n2129   1.0000000\n2130  -8.3333333\n2131   7.6666667\n2132  -0.6666667\n2133   2.3333333\n2134   1.0000000\n2135  -4.6666667\n2136  -4.3333333\n2137   0.3333333\n2138  -3.3333333\n2139  -3.6666667\n2140   7.6666667\n2141  -6.6666667\n2142  -1.3333333\n2143   8.0000000\n2144  -4.0000000\n2145   4.0000000\n2146  -0.3333333\n2147  -3.3333333\n2148  -1.3333333\n2149  -2.0000000\n2150   8.3333333\n2151  -1.3333333\n2152  -6.0000000\n2153  -3.0000000\n2154  -7.3333333\n2155  -6.0000000\n2156  -8.0000000\n2157  -3.0000000\n2158  -2.6666667\n2159   2.3333333\n2160   1.0000000\n2161   8.3333333\n2162  -1.0000000\n2163  -2.0000000\n2164  -5.3333333\n2165  -8.3333333\n2166   2.0000000\n2167   5.0000000\n2168   3.3333333\n2169   2.0000000\n2170   3.3333333\n2171   4.0000000\n2172  -6.6666667\n2173   2.0000000\n2174   5.3333333\n2175  -6.3333333\n2176  -5.6666667\n2177   6.6666667\n2178   4.6666667\n2179   0.3333333\n2180   4.3333333\n2181   3.0000000\n2182   6.0000000\n2183  -4.0000000\n2184   1.6666667\n2185  -6.6666667\n2186   5.0000000\n2187   5.3333333\n2188   1.3333333\n2189   7.3333333\n2190   6.6666667\n2191   0.6666667\n2192   3.3333333\n2193   6.6666667\n2194  -0.3333333\n2195   2.0000000\n2196  -5.6666667\n2197   4.0000000\n2198   2.3333333\n2199  -1.6666667\n2200   5.6666667\n2201  -6.3333333\n2202   1.3333333\n2203   5.3333333\n2204   5.3333333\n2205   4.3333333\n2206   1.3333333\n2207  -9.0000000\n2208   1.6666667\n2209  -1.6666667\n2210  -2.6666667\n2211   4.3333333\n2212   0.6666667\n2213  -2.6666667\n2214   6.0000000\n2215   9.6666667\n2216  -7.3333333\n2217   0.6666667\n2218  -2.6666667\n2219  -7.6666667\n2220  -7.0000000\n2221   2.6666667\n2222   0.6666667\n2223   2.3333333\n2224   0.6666667\n2225   0.0000000\n2226   7.3333333\n2227   1.6666667\n2228  -0.6666667\n2229  -0.3333333\n2230  -3.0000000\n2231   8.3333333\n2232  -9.6666667\n2233  -0.3333333\n2234   6.3333333\n2235   2.3333333\n2236   7.6666667\n2237  -5.0000000\n2238  -1.6666667\n2239   5.6666667\n2240  -0.6666667\n2241  -8.0000000\n2242   2.6666667\n2243   6.3333333\n2244   9.6666667\n2245  -6.3333333\n2246  -0.6666667\n2247   4.3333333\n2248  -5.0000000\n2249  -1.3333333\n2250   1.3333333\n2251   1.6666667\n2252  -9.6666667\n2253  -1.6666667\n2254   1.0000000\n2255   7.0000000\n2256   1.6666667\n2257  -1.0000000\n2258   3.3333333\n2259   2.3333333\n2260   1.6666667\n2261  -1.6666667\n2262   0.6666667\n2263  -5.3333333\n2264   4.6666667\n2265   6.0000000\n2266  -1.0000000\n2267  -3.0000000\n2268  -4.0000000\n2269  -8.6666667\n2270   7.6666667\n2271  -0.6666667\n2272  -2.0000000\n2273  -3.3333333\n2274  -1.3333333\n2275   2.0000000\n2276  -1.0000000\n2277   2.6666667\n2278  -3.3333333\n2279   7.3333333\n2280   9.6666667\n2281   0.3333333\n2282  -0.6666667\n2283   4.0000000\n2284  -0.6666667\n2285  -3.3333333\n2286  -1.3333333\n2287  -3.6666667\n2288   1.0000000\n2289  12.3333333\n2290  -5.0000000\n2291   2.3333333\n2292 -12.0000000\n2293   2.0000000\n2294   3.0000000\n2295  -1.3333333\n2296   1.6666667\n2297   2.0000000\n2298   7.0000000\n2299   9.0000000\n2300   0.0000000\n2301  -0.3333333\n2302  -1.6666667\n2303  -7.0000000\n2304   3.3333333\n2305   3.3333333\n2306   7.0000000\n2307   6.6666667\n2308  -1.3333333\n2309   1.3333333\n2310  -1.3333333\n2311  -2.3333333\n2312  -2.6666667\n2313   3.3333333\n2314  -2.0000000\n2315   2.6666667\n2316  -2.0000000\n2317   3.3333333\n2318   3.3333333\n2319   9.3333333\n2320   7.3333333\n2321  -0.3333333\n2322  -3.6666667\n2323   0.0000000\n2324  -1.6666667\n2325   9.0000000\n2326  -6.0000000\n2327  -5.0000000\n2328   7.0000000\n2329  -1.6666667\n2330   4.0000000\n2331  -3.0000000\n2332  -1.6666667\n2333   1.0000000\n2334  -0.3333333\n2335  -0.6666667\n2336  -0.3333333\n2337   1.0000000\n2338   1.3333333\n2339  -0.6666667\n2340   1.6666667\n2341   0.0000000\n2342   0.3333333\n2343   6.3333333\n2344   4.0000000\n2345   5.3333333\n2346   3.0000000\n2347   2.0000000\n2348   7.3333333\n2349  -6.0000000\n2350   4.6666667\n2351   6.0000000\n2352  -2.6666667\n2353 -10.0000000\n2354  -8.3333333\n2355  -2.3333333\n2356  -0.3333333\n2357  10.0000000\n2358   0.3333333\n2359  -3.0000000\n2360   7.3333333\n2361   0.3333333\n2362   1.0000000\n2363  -3.6666667\n2364  -4.0000000\n2365  -2.3333333\n2366   4.0000000\n2367  -8.3333333\n2368   0.0000000\n2369   0.0000000\n2370  -7.3333333\n2371   5.0000000\n2372  -5.0000000\n2373   2.3333333\n2374   4.3333333\n2375   3.6666667\n2376   1.6666667\n2377  -8.3333333\n2378   4.0000000\n2379  -5.6666667\n2380  -0.6666667\n2381  -6.0000000\n2382  -6.6666667\n2383   7.6666667\n2384   0.6666667\n2385   1.0000000\n2386   3.6666667\n2387   6.6666667\n2388   8.0000000\n2389  -6.6666667\n2390   6.0000000\n2391  -1.0000000\n2392   1.0000000\n2393  -0.6666667\n2394  -2.3333333\n2395  -4.3333333\n2396  -6.3333333\n2397   0.0000000\n2398   7.6666667\n2399   1.3333333\n2400  -1.0000000\n2401   6.3333333\n2402   0.6666667\n2403  -2.3333333\n2404  -1.0000000\n2405  -5.3333333\n2406   5.0000000\n2407  -5.6666667\n2408   3.0000000\n2409   8.3333333\n2410   2.0000000\n2411   3.0000000\n2412   3.6666667\n2413  -4.0000000\n2414  -5.6666667\n2415  -8.3333333\n2416  -5.6666667\n2417   5.0000000\n2418  -8.0000000\n2419   1.6666667\n2420   0.0000000\n2421   4.6666667\n2422   4.0000000\n2423  -6.3333333\n2424  -1.6666667\n2425   7.0000000\n2426  -9.0000000\n2427  -1.3333333\n2428  -2.0000000\n2429   5.6666667\n2430   8.0000000\n2431   7.3333333\n2432   9.3333333\n2433  -5.3333333\n2434   3.3333333\n2435   1.3333333\n2436   0.6666667\n2437  -3.6666667\n2438  -1.3333333\n2439  -6.0000000\n2440  -4.0000000\n2441   0.3333333\n2442   4.3333333\n2443   1.3333333\n2444  -5.0000000\n2445   7.6666667\n2446  -5.0000000\n2447   6.0000000\n2448   1.0000000\n2449   2.0000000\n2450  11.0000000\n2451   1.3333333\n2452   4.0000000\n2453   1.6666667\n2454   3.6666667\n2455  -4.6666667\n2456  10.0000000\n2457   1.0000000\n2458   6.0000000\n2459  -1.0000000\n2460   3.3333333\n2461   0.3333333\n2462   9.0000000\n2463  -6.6666667\n2464   2.6666667\n2465  -1.3333333\n2466   3.0000000\n2467  -5.6666667\n2468   1.0000000\n2469   0.0000000\n2470   1.6666667\n2471   6.3333333\n2472  -0.3333333\n2473   1.0000000\n2474  -6.0000000\n2475  -4.0000000\n2476  -2.3333333\n2477   1.0000000\n2478  -4.0000000\n2479   2.6666667\n2480  -8.0000000\n2481   7.3333333\n2482 -12.0000000\n2483  -9.6666667\n2484   5.6666667\n2485   2.6666667\n2486  -6.0000000\n2487   4.6666667\n2488  -2.6666667\n2489   7.6666667\n2490  -3.3333333\n2491  -0.6666667\n2492   2.3333333\n2493   4.6666667\n2494 -13.3333333\n2495   0.0000000\n2496   2.6666667\n2497  -0.6666667\n2498  -1.3333333\n2499  -7.3333333\n2500  -5.6666667\n2501   7.3333333\n2502   0.6666667\n2503   4.0000000\n2504   2.6666667\n2505  -2.0000000\n2506   1.6666667\n2507   1.6666667\n2508  -2.0000000\n2509   2.0000000\n2510   2.6666667\n2511   2.3333333\n2512  -0.3333333\n2513   4.6666667\n2514  -1.0000000\n2515  -0.3333333\n2516   3.3333333\n2517  -7.6666667\n2518  -4.0000000\n2519   2.0000000\n2520  -5.3333333\n2521  -1.6666667\n2522  -2.6666667\n2523  -2.3333333\n2524  -5.0000000\n2525   1.3333333\n2526   1.3333333\n2527   1.6666667\n2528  -5.3333333\n2529  -2.3333333\n2530 -10.3333333\n2531  -2.0000000\n2532  -1.0000000\n2533  -5.6666667\n2534  -5.3333333\n2535  -2.6666667\n2536  -3.3333333\n2537  -4.3333333\n2538   2.6666667\n2539   4.0000000\n2540  -0.6666667\n2541   0.6666667\n2542   0.6666667\n2543   6.6666667\n2544  -2.0000000\n2545  -0.6666667\n2546  -0.3333333\n2547  -1.3333333\n2548   2.0000000\n2549   3.0000000\n2550   2.3333333\n2551   0.6666667\n2552   3.3333333\n2553  -3.3333333\n2554   3.6666667\n2555   0.6666667\n2556   7.0000000\n2557  -5.0000000\n2558  -1.0000000\n2559  -3.3333333\n2560  -1.3333333\n2561   3.6666667\n2562  -3.0000000\n2563   5.3333333\n2564  -7.3333333\n2565   2.3333333\n2566  -2.6666667\n2567  -5.0000000\n2568   3.6666667\n2569  -0.6666667\n2570  -1.6666667\n2571   8.0000000\n2572   6.6666667\n2573   3.3333333\n2574   5.3333333\n2575  -0.6666667\n2576   6.6666667\n2577  -4.3333333\n2578  -3.3333333\n2579   5.6666667\n2580  -1.6666667\n2581   9.3333333\n2582   3.6666667\n2583  -1.3333333\n2584   8.6666667\n2585  -3.3333333\n2586   2.3333333\n2587  -4.0000000\n2588  -6.0000000\n2589  -4.0000000\n2590  -3.6666667\n2591   0.0000000\n2592  -1.0000000\n2593  -3.0000000\n2594  -3.6666667\n2595  -2.0000000\n2596  -1.3333333\n2597   2.3333333\n2598  -4.6666667\n2599  -0.3333333\n2600  -2.0000000\n2601  -1.3333333\n2602  -3.3333333\n2603  -3.3333333\n2604  -9.0000000\n2605  -1.3333333\n2606  -0.6666667\n2607  -4.0000000\n2608  -1.6666667\n2609  -6.6666667\n2610   8.6666667\n2611  -4.6666667\n2612   0.3333333\n2613   0.0000000\n2614  -3.3333333\n2615   4.0000000\n2616  10.6666667\n2617  -2.6666667\n2618  -2.6666667\n2619 -10.3333333\n2620   1.0000000\n2621  -2.3333333\n2622  -6.6666667\n2623   0.3333333\n2624   5.6666667\n2625   8.3333333\n2626  -9.0000000\n2627  -7.3333333\n2628  -4.0000000\n2629   3.6666667\n2630  -9.6666667\n2631 -11.3333333\n2632  -0.3333333\n2633   1.6666667\n2634  -3.0000000\n2635  -1.3333333\n2636  -0.6666667\n2637  -1.3333333\n2638  -3.3333333\n2639  -3.0000000\n2640  -7.0000000\n2641   2.3333333\n2642   3.0000000\n2643   2.3333333\n2644   4.6666667\n2645   6.6666667\n2646  -7.0000000\n2647  -8.6666667\n2648  -2.3333333\n2649  -0.3333333\n2650   5.0000000\n2651  -7.6666667\n2652  -2.3333333\n2653   5.3333333\n2654   5.0000000\n2655  -0.6666667\n2656   1.6666667\n2657   2.3333333\n2658   4.6666667\n2659  -3.3333333\n2660  -3.6666667\n2661  -5.6666667\n2662  -4.0000000\n2663  -0.3333333\n2664  -2.0000000\n2665   1.0000000\n2666   3.0000000\n2667  -1.0000000\n2668   9.6666667\n2669   3.0000000\n2670   3.3333333\n2671  -2.3333333\n2672  -5.0000000\n2673   3.6666667\n2674   6.3333333\n2675  -0.3333333\n2676   7.3333333\n2677  -0.3333333\n2678   6.6666667\n2679  -0.3333333\n2680  -2.3333333\n2681   3.6666667\n2682   1.0000000\n2683   6.3333333\n2684  -8.3333333\n2685  -4.3333333\n2686   7.0000000\n2687   6.6666667\n2688  -1.0000000\n2689   3.0000000\n2690   4.0000000\n2691   0.0000000\n2692   8.6666667\n2693   0.0000000\n2694   2.6666667\n2695  -4.0000000\n2696   0.3333333\n2697   6.0000000\n2698   6.6666667\n2699  -5.0000000\n2700   2.6666667\n2701   0.3333333\n2702   0.0000000\n2703  -1.3333333\n2704   4.0000000\n2705   5.3333333\n2706   0.6666667\n2707  -8.0000000\n2708   0.6666667\n2709   3.3333333\n2710   2.6666667\n2711  -1.6666667\n2712  -7.3333333\n2713  -3.3333333\n2714  -4.6666667\n2715   8.6666667\n2716  -4.6666667\n2717   6.3333333\n2718   1.0000000\n2719   6.0000000\n2720  -0.6666667\n2721   2.3333333\n2722  -1.0000000\n2723   0.0000000\n2724  -4.6666667\n2725   9.3333333\n2726  -0.6666667\n2727  -0.6666667\n2728  -6.3333333\n2729  -4.3333333\n2730  -8.0000000\n2731  -4.0000000\n2732  -0.6666667\n2733   2.6666667\n2734  -3.6666667\n2735  -2.6666667\n2736  -2.6666667\n2737   5.0000000\n2738   1.0000000\n2739   0.0000000\n2740  -3.6666667\n2741   1.6666667\n2742  -5.3333333\n2743   2.3333333\n2744   3.0000000\n2745  -5.3333333\n2746   2.3333333\n2747   5.0000000\n2748   3.6666667\n2749  -1.3333333\n2750   3.3333333\n2751   3.3333333\n2752   3.0000000\n2753  -3.3333333\n2754   3.6666667\n2755  -4.6666667\n2756  -1.6666667\n2757  -6.0000000\n2758  -6.0000000\n2759  -2.6666667\n2760  10.6666667\n2761   1.0000000\n2762   1.6666667\n2763   5.6666667\n2764  -2.6666667\n2765   1.3333333\n2766  -1.3333333\n2767   2.0000000\n2768   7.6666667\n2769  -7.3333333\n2770  -2.6666667\n2771   5.3333333\n2772  -5.3333333\n2773  -3.3333333\n2774  -0.6666667\n2775   2.0000000\n2776  -1.3333333\n2777   4.3333333\n2778   1.0000000\n2779   1.0000000\n2780   6.0000000\n2781   2.6666667\n2782  -4.6666667\n2783  -4.3333333\n2784   5.3333333\n2785  -2.0000000\n2786  -1.3333333\n2787  -5.3333333\n2788   2.0000000\n2789   8.6666667\n2790   2.3333333\n2791  -8.3333333\n2792  -3.6666667\n2793  -1.0000000\n2794  -4.0000000\n2795   0.3333333\n2796   3.0000000\n2797  -6.0000000\n2798  -2.3333333\n2799  -4.3333333\n2800   2.0000000\n2801   8.6666667\n2802  -4.3333333\n2803  -7.6666667\n2804  -0.3333333\n2805   2.3333333\n2806   0.6666667\n2807  -7.3333333\n2808  -7.6666667\n2809   3.6666667\n2810   3.3333333\n2811  -4.0000000\n2812   7.0000000\n2813  -0.6666667\n2814   4.3333333\n2815   4.3333333\n2816   1.0000000\n2817   8.3333333\n2818   1.6666667\n2819  -2.3333333\n2820   0.3333333\n2821  -2.3333333\n2822  -4.6666667\n2823  -2.0000000\n2824  -1.6666667\n2825   0.0000000\n2826  -7.0000000\n2827  -3.0000000\n2828   0.6666667\n2829  -6.6666667\n2830  -6.0000000\n2831  -2.6666667\n2832  -2.6666667\n2833 -10.0000000\n2834  -1.0000000\n2835  -5.6666667\n2836   1.6666667\n2837  -1.3333333\n2838   0.3333333\n2839  12.3333333\n2840  -2.6666667\n2841   4.6666667\n2842   4.3333333\n2843  -2.3333333\n2844  -9.6666667\n2845  -2.6666667\n2846  -9.6666667\n2847  -6.6666667\n2848  -1.3333333\n2849   3.3333333\n2850  -6.0000000\n2851  -1.3333333\n2852   3.0000000\n2853 -11.6666667\n2854  -6.3333333\n2855   3.3333333\n2856  -1.3333333\n2857   2.0000000\n2858  -2.0000000\n2859   0.3333333\n2860   2.0000000\n2861  -2.6666667\n2862   3.6666667\n2863   5.0000000\n2864  -0.3333333\n2865  10.6666667\n2866   4.3333333\n2867  -3.0000000\n2868   4.0000000\n2869   7.6666667\n2870   4.3333333\n2871  -2.6666667\n2872   1.3333333\n2873  -1.6666667\n2874   3.6666667\n2875   4.3333333\n2876  -1.6666667\n2877   3.0000000\n2878   0.6666667\n2879   5.0000000\n2880   0.0000000\n2881   2.0000000\n2882   5.6666667\n2883  -3.0000000\n2884  -1.0000000\n2885   0.3333333\n2886  -9.0000000\n2887  -5.6666667\n2888   1.3333333\n2889   8.6666667\n2890  -8.6666667\n2891   5.0000000\n2892  -6.6666667\n2893   6.3333333\n2894  -4.0000000\n2895   1.6666667\n2896   2.6666667\n2897  -0.6666667\n2898  -5.3333333\n2899   5.6666667\n2900  -3.0000000\n2901  -0.3333333\n2902  -6.0000000\n2903  -1.0000000\n2904   2.0000000\n2905  -0.3333333\n2906   6.3333333\n2907   3.6666667\n2908   2.6666667\n2909  -3.3333333\n2910   3.3333333\n2911  -5.3333333\n2912  -9.6666667\n2913  -1.0000000\n2914  -2.6666667\n2915  -4.3333333\n2916  -0.3333333\n2917   8.3333333\n2918  -3.6666667\n2919  -6.0000000\n2920   5.3333333\n2921  -1.6666667\n2922   2.0000000\n2923  -3.3333333\n2924   5.6666667\n2925  -6.0000000\n2926  -0.6666667\n2927   2.6666667\n2928   1.3333333\n2929  -4.0000000\n2930  -1.0000000\n2931   5.6666667\n2932   6.0000000\n2933   2.6666667\n2934  -0.6666667\n2935  -1.6666667\n2936   3.6666667\n2937  -0.6666667\n2938  -5.6666667\n2939   3.3333333\n2940  -1.3333333\n2941   3.6666667\n2942   1.0000000\n2943   4.6666667\n2944  -2.3333333\n2945  -2.3333333\n2946  -5.6666667\n2947  -3.0000000\n2948   6.0000000\n2949  -4.6666667\n2950  -3.0000000\n2951   2.6666667\n2952  -9.6666667\n2953  -0.6666667\n2954  -1.0000000\n2955   4.6666667\n2956   0.6666667\n2957  -1.3333333\n2958  -7.3333333\n2959  -0.6666667\n2960   0.3333333\n2961  -5.0000000\n2962   2.3333333\n2963  -1.3333333\n2964   5.3333333\n2965   0.6666667\n2966  -1.3333333\n2967  -3.0000000\n2968  -6.6666667\n2969  -4.6666667\n2970   3.0000000\n2971   0.6666667\n2972   4.3333333\n2973   1.3333333\n2974  -7.0000000\n2975  -4.0000000\n2976  -4.0000000\n2977   2.0000000\n2978   2.6666667\n2979  -0.6666667\n2980  -5.6666667\n2981   8.0000000\n2982   6.6666667\n2983  -0.3333333\n2984   1.3333333\n2985   2.6666667\n2986   2.3333333\n2987   2.0000000\n2988   1.6666667\n2989   3.6666667\n2990   7.0000000\n2991  -4.0000000\n2992  -4.3333333\n2993  -2.0000000\n2994  -3.6666667\n2995  -2.3333333\n2996  -6.3333333\n2997   2.3333333\n2998  -5.3333333\n2999  -6.6666667\n3000   2.3333333\n3001  -0.6666667\n3002  -0.3333333\n3003  -6.0000000\n3004  -0.6666667\n3005   4.3333333\n3006  -8.6666667\n3007  -4.3333333\n3008   1.6666667\n3009   6.0000000\n3010  -7.0000000\n3011  -6.0000000\n3012   2.6666667\n3013  -1.6666667\n3014   8.0000000\n3015  -4.6666667\n3016   0.6666667\n3017  -1.0000000\n3018  -6.6666667\n3019  -3.0000000\n3020   6.3333333\n3021  -2.0000000\n3022   0.0000000\n3023   5.0000000\n3024  -6.3333333\n3025   3.6666667\n3026   3.0000000\n3027   6.6666667\n3028  -5.3333333\n3029   0.0000000\n3030   1.3333333\n3031   5.3333333\n3032   1.0000000\n3033   4.6666667\n3034   4.3333333\n3035  -5.0000000\n3036   1.3333333\n3037  -1.0000000\n3038   0.6666667\n3039  -1.0000000\n3040   4.0000000\n3041  -7.0000000\n3042   6.3333333\n3043  -0.3333333\n3044  -0.6666667\n3045  -5.0000000\n3046  -0.3333333\n3047   4.3333333\n3048   6.0000000\n3049   6.6666667\n3050   2.3333333\n3051  -2.3333333\n3052  -6.3333333\n3053  -1.6666667\n3054   3.0000000\n3055   0.3333333\n3056   8.3333333\n3057   5.3333333\n3058  -9.3333333\n3059  -4.0000000\n3060  -5.0000000\n3061  -2.0000000\n3062   2.3333333\n3063   6.6666667\n3064   3.0000000\n3065   0.6666667\n3066  -0.6666667\n3067   3.0000000\n3068  -3.0000000\n3069   1.0000000\n3070  -0.3333333\n3071  -1.6666667\n3072  -9.6666667\n3073   0.0000000\n3074  -3.0000000\n3075  -2.3333333\n3076   1.0000000\n3077  -7.3333333\n3078   1.6666667\n3079  -1.3333333\n3080   4.0000000\n3081   8.6666667\n3082   3.0000000\n3083   2.6666667\n3084   6.6666667\n3085  -1.6666667\n3086  -1.0000000\n3087  -2.0000000\n3088  -4.0000000\n3089   1.6666667\n3090   1.6666667\n3091  -1.3333333\n3092   2.6666667\n3093  -1.0000000\n3094  -4.3333333\n3095  -5.3333333\n3096   1.3333333\n3097   6.0000000\n3098  -2.6666667\n3099   8.6666667\n3100   1.3333333\n3101  -9.3333333\n3102  -4.0000000\n3103   1.0000000\n3104   6.3333333\n3105  -1.0000000\n3106   1.0000000\n3107  -1.0000000\n3108  -8.0000000\n3109   0.3333333\n3110   2.0000000\n3111   0.6666667\n3112  -3.3333333\n3113  -3.6666667\n3114   3.6666667\n3115   4.6666667\n3116   6.3333333\n3117   9.3333333\n3118  -3.6666667\n3119   1.3333333\n3120  -2.3333333\n3121   4.3333333\n3122   3.6666667\n3123   1.3333333\n3124  -3.3333333\n3125  -0.3333333\n3126   6.3333333\n3127   7.6666667\n3128  -3.3333333\n3129   1.0000000\n3130  -7.0000000\n3131  -4.0000000\n3132   2.6666667\n3133  -0.6666667\n3134  -7.0000000\n3135   1.3333333\n3136   2.6666667\n3137   4.6666667\n3138  -4.6666667\n3139  -4.6666667\n3140  -0.6666667\n3141  -5.0000000\n3142   1.6666667\n3143  -2.0000000\n3144  -1.0000000\n3145   7.3333333\n3146   0.0000000\n3147  -0.6666667\n3148  -5.0000000\n3149   1.6666667\n3150   1.6666667\n3151  -1.0000000\n3152  11.0000000\n3153   3.6666667\n3154  -0.3333333\n3155  -6.3333333\n3156  -2.6666667\n3157  -0.6666667\n3158   3.0000000\n3159  -6.6666667\n3160   5.6666667\n3161  -3.3333333\n3162  -7.6666667\n3163   3.3333333\n3164   2.0000000\n3165   0.0000000\n3166   6.0000000\n3167   4.3333333\n3168   0.0000000\n3169  -2.6666667\n3170   5.3333333\n3171  -1.0000000\n3172   0.0000000\n3173  -0.6666667\n3174   3.6666667\n3175  -3.0000000\n3176   3.0000000\n3177   1.0000000\n3178  -4.0000000\n3179  -0.6666667\n3180   3.0000000\n3181   0.0000000\n3182   2.6666667\n3183  -2.6666667\n3184  -2.6666667\n3185  -2.0000000\n3186   5.3333333\n3187  -4.3333333\n3188   3.6666667\n3189  -4.0000000\n3190   9.0000000\n3191   1.0000000\n3192  -4.3333333\n3193   3.6666667\n3194   8.3333333\n3195   4.6666667\n3196  -5.3333333\n3197   4.6666667\n3198   1.6666667\n3199  -5.6666667\n3200   3.3333333\n3201  -1.6666667\n3202  -7.6666667\n3203  -3.3333333\n3204   1.3333333\n3205   1.3333333\n3206   2.0000000\n3207   4.0000000\n3208  -8.0000000\n3209  -2.0000000\n3210   6.0000000\n3211   4.0000000\n3212  -1.0000000\n3213  -6.0000000\n3214  -3.0000000\n3215  -1.6666667\n3216  -6.6666667\n3217  -3.3333333\n3218   4.0000000\n3219  -7.3333333\n3220   7.6666667\n3221   2.6666667\n3222  -0.6666667\n3223  -5.0000000\n3224   0.6666667\n3225   5.3333333\n3226   1.6666667\n3227   0.0000000\n3228   2.6666667\n3229  -8.3333333\n3230  -4.0000000\n3231   0.6666667\n3232  -1.6666667\n3233  -0.6666667\n3234  -1.0000000\n3235  -8.3333333\n3236  -5.0000000\n3237   8.3333333\n3238   7.0000000\n3239   0.3333333\n3240   1.3333333\n3241  -4.3333333\n3242  -2.6666667\n3243   0.3333333\n3244   1.3333333\n3245  -3.6666667\n3246   5.3333333\n3247  -8.3333333\n3248  -6.3333333\n3249  -1.6666667\n3250  -8.6666667\n3251   4.6666667\n3252   0.0000000\n3253   6.3333333\n3254   4.6666667\n3255   5.0000000\n3256  -4.6666667\n3257  -4.6666667\n3258  -8.6666667\n3259   2.6666667\n3260   4.6666667\n3261  -0.6666667\n3262   3.3333333\n3263  -1.3333333\n3264   8.0000000\n3265  -1.3333333\n3266   1.0000000\n3267  -2.3333333\n3268  -8.3333333\n3269   3.3333333\n3270  -3.6666667\n3271   7.3333333\n3272  -4.6666667\n3273  -7.3333333\n3274  -6.3333333\n3275   4.6666667\n3276   0.0000000\n3277   4.3333333\n3278  -5.0000000\n3279   3.0000000\n3280 -12.0000000\n3281   1.6666667\n3282   0.6666667\n3283   6.3333333\n3284  -1.6666667\n3285  -0.3333333\n3286   1.6666667\n3287   1.3333333\n3288   4.3333333\n3289  -4.3333333\n3290  -3.3333333\n3291   5.0000000\n3292  -7.0000000\n3293  -6.0000000\n3294   0.3333333\n3295   7.0000000\n3296   6.3333333\n3297  -1.6666667\n3298  -4.6666667\n3299   6.6666667\n3300  -6.0000000\n3301   4.6666667\n3302   4.6666667\n3303  -1.3333333\n3304   6.0000000\n3305  -6.6666667\n3306   9.3333333\n3307  -0.6666667\n3308  -0.3333333\n3309   3.6666667\n3310   7.0000000\n3311  -1.3333333\n3312  -3.0000000\n3313   1.6666667\n3314   1.6666667\n3315   1.3333333\n3316   4.0000000\n3317  -7.3333333\n3318  -3.6666667\n3319  -7.0000000\n3320   1.0000000\n3321   8.3333333\n3322   2.6666667\n3323   5.0000000\n3324  -2.0000000\n3325   3.0000000\n3326  -4.6666667\n3327  -0.3333333\n3328   6.3333333\n3329  10.0000000\n3330   6.6666667\n3331  -1.6666667\n3332   1.0000000\n3333   1.3333333\n3334  -3.3333333\n3335   3.0000000\n3336   5.0000000\n3337  -4.6666667\n3338  -1.3333333\n3339   7.6666667\n3340  -2.3333333\n3341   7.6666667\n3342   0.6666667\n3343  -1.0000000\n3344   2.3333333\n3345  -3.0000000\n3346   8.6666667\n3347  -3.0000000\n3348   8.6666667\n3349   0.0000000\n3350   3.6666667\n3351  -7.0000000\n3352  -1.6666667\n3353   2.0000000\n3354   2.3333333\n3355   6.6666667\n3356  -1.3333333\n3357   2.6666667\n3358  -1.0000000\n3359   2.6666667\n3360   0.0000000\n3361   5.3333333\n3362  -4.3333333\n3363   0.6666667\n3364  -2.6666667\n3365  -3.3333333\n3366   5.6666667\n3367   1.3333333\n3368  -6.0000000\n3369  -0.6666667\n3370  -1.0000000\n3371  -6.3333333\n3372   1.6666667\n3373  -1.3333333\n3374  -5.3333333\n3375 -10.6666667\n3376   8.6666667\n3377  -3.0000000\n3378   9.3333333\n3379  -0.3333333\n3380   0.3333333\n3381  -4.6666667\n3382  -0.6666667\n3383  -3.0000000\n3384   8.6666667\n3385   9.6666667\n3386   7.6666667\n3387   1.3333333\n3388   4.6666667\n3389  -3.6666667\n3390   9.3333333\n3391   3.6666667\n3392  -1.0000000\n3393   2.0000000\n3394   3.3333333\n3395   5.3333333\n3396   1.6666667\n3397  -2.0000000\n3398  -4.0000000\n3399   6.6666667\n3400   2.0000000\n3401  -0.6666667\n3402  -4.6666667\n3403   2.3333333\n3404   7.0000000\n3405   1.3333333\n3406   2.0000000\n3407  -8.6666667\n3408  -3.0000000\n3409   1.6666667\n3410  -8.0000000\n3411  -0.6666667\n3412   1.6666667\n3413  -0.6666667\n3414  -2.6666667\n3415  -7.0000000\n3416  -6.6666667\n3417  -8.0000000\n3418   5.0000000\n3419   2.6666667\n3420   2.3333333\n3421   1.3333333\n3422  -3.3333333\n3423  -4.0000000\n3424   4.3333333\n3425  -6.0000000\n3426   5.0000000\n3427  -1.3333333\n3428  -8.3333333\n3429  -2.3333333\n3430   2.0000000\n3431  -7.0000000\n3432   4.3333333\n3433  -1.3333333\n3434   4.6666667\n3435   0.0000000\n3436   0.6666667\n3437   3.6666667\n3438   4.3333333\n3439  -2.3333333\n3440   9.6666667\n3441  -4.3333333\n3442  -0.6666667\n3443  -2.3333333\n3444   1.3333333\n3445  -2.0000000\n3446  -5.3333333\n3447  -0.3333333\n3448  -8.6666667\n3449   0.6666667\n3450  -1.3333333\n3451  -2.0000000\n3452   2.0000000\n3453   3.3333333\n3454   1.3333333\n3455   1.3333333\n3456  -2.0000000\n3457   0.6666667\n3458  -2.0000000\n3459   0.6666667\n3460  -4.0000000\n3461   3.3333333\n3462  -0.6666667\n3463   7.3333333\n3464   1.0000000\n3465  -5.3333333\n3466   1.3333333\n3467   8.3333333\n3468   0.6666667\n3469  -4.6666667\n3470  -0.3333333\n3471  -4.3333333\n3472  -1.6666667\n3473   7.6666667\n3474  -1.0000000\n3475  -1.6666667\n3476  11.3333333\n3477  -0.3333333\n3478  -2.6666667\n3479   0.0000000\n3480   9.0000000\n3481  -6.6666667\n3482   6.3333333\n3483  -1.3333333\n3484   1.3333333\n3485   2.6666667\n3486   2.6666667\n3487  -7.3333333\n3488   7.6666667\n3489  -2.3333333\n3490   6.0000000\n3491  -3.0000000\n3492   3.0000000\n3493   0.0000000\n3494   1.6666667\n3495   0.3333333\n3496   3.0000000\n3497   0.6666667\n3498   4.3333333\n3499   5.3333333\n3500  -3.6666667\n3501   3.3333333\n3502  -2.0000000\n3503   6.6666667\n3504  -1.0000000\n3505   3.3333333\n3506   0.0000000\n3507   7.3333333\n3508   0.6666667\n3509   4.6666667\n3510   8.6666667\n3511  -0.3333333\n3512 -11.6666667\n3513   2.6666667\n3514   6.6666667\n3515   4.6666667\n3516  -1.3333333\n3517   3.0000000\n3518   0.0000000\n3519  -2.0000000\n3520  -5.0000000\n3521   0.3333333\n3522  -2.3333333\n3523  -1.6666667\n3524   9.6666667\n3525  -1.6666667\n3526   0.6666667\n3527   3.3333333\n3528   6.0000000\n3529  -5.3333333\n3530   8.0000000\n3531   7.6666667\n3532   5.3333333\n3533  -0.3333333\n3534  -5.3333333\n3535   3.6666667\n3536  -6.3333333\n3537   0.6666667\n3538  -5.0000000\n3539   3.0000000\n3540   3.3333333\n3541  -3.3333333\n3542  -0.6666667\n3543   0.0000000\n3544   7.3333333\n3545  -5.3333333\n3546  -1.6666667\n3547   5.0000000\n3548   5.6666667\n3549   1.3333333\n3550  -4.6666667\n3551  -1.0000000\n3552  10.6666667\n3553  -3.6666667\n3554   8.0000000\n3555  -1.0000000\n3556  -2.0000000\n3557  -8.3333333\n3558  -0.3333333\n3559  -1.0000000\n3560  -0.6666667\n3561   5.3333333\n3562   1.0000000\n3563  -0.3333333\n3564   0.0000000\n3565  -2.3333333\n3566   2.6666667\n3567  -0.3333333\n3568  -5.6666667\n3569   1.6666667\n3570   2.0000000\n3571  -2.3333333\n3572   5.0000000\n3573  -2.3333333\n3574   0.0000000\n3575  -7.3333333\n3576  -7.6666667\n3577  -2.3333333\n3578   5.0000000\n3579   3.0000000\n3580   0.6666667\n3581  -1.0000000\n3582  -2.3333333\n3583  -3.3333333\n3584  -5.0000000\n3585  -8.0000000\n3586   2.3333333\n3587  -2.0000000\n3588  -1.3333333\n3589  -9.3333333\n3590  -5.0000000\n3591  -7.0000000\n3592   6.6666667\n3593  -3.0000000\n3594   2.0000000\n3595  -4.6666667\n3596  -2.0000000\n3597  -1.6666667\n3598  -0.6666667\n3599   0.0000000\n3600  -7.0000000\n3601  -9.6666667\n3602  -7.6666667\n3603  -2.6666667\n3604   2.3333333\n3605  -1.3333333\n3606  -1.6666667\n3607  -4.6666667\n3608   2.0000000\n3609  -4.3333333\n3610   0.3333333\n3611   4.0000000\n3612  -6.6666667\n3613   3.6666667\n3614  -6.0000000\n3615   1.3333333\n3616  -3.0000000\n3617  -8.6666667\n3618  -4.0000000\n3619  -2.0000000\n3620  -3.3333333\n3621   7.0000000\n3622  -6.6666667\n3623  10.3333333\n3624  -2.6666667\n3625  -1.3333333\n3626   2.6666667\n3627   7.0000000\n3628   6.0000000\n3629   0.0000000\n3630  -3.3333333\n3631   1.6666667\n3632  -4.6666667\n3633  -3.6666667\n3634   3.3333333\n3635  -5.0000000\n3636   8.3333333\n3637 -10.0000000\n3638   0.6666667\n3639  -1.3333333\n3640  -3.3333333\n3641  -7.6666667\n3642   3.6666667\n3643  -6.0000000\n3644  -8.0000000\n3645   1.6666667\n3646  -8.0000000\n3647  -2.0000000\n3648  12.6666667\n3649   5.3333333\n3650   0.6666667\n3651  -2.3333333\n3652   6.0000000\n3653  -7.3333333\n3654   4.3333333\n3655  -1.0000000\n3656   5.0000000\n3657  -1.6666667\n3658  -4.6666667\n3659  -6.0000000\n3660   6.0000000\n3661  -6.6666667\n3662   4.0000000\n3663   4.6666667\n3664  -5.6666667\n3665   6.3333333\n3666   4.6666667\n3667   2.3333333\n3668  -3.0000000\n3669   1.6666667\n3670  -5.6666667\n3671  -5.6666667\n3672   0.0000000\n3673   3.0000000\n3674   3.6666667\n3675   1.6666667\n3676   5.0000000\n3677   5.0000000\n3678  -4.0000000\n3679  -4.0000000\n3680   4.6666667\n3681   2.3333333\n3682  -9.6666667\n3683   4.3333333\n3684  -1.3333333\n3685  -3.3333333\n3686   5.0000000\n3687   0.0000000\n3688  -3.3333333\n3689   4.0000000\n3690  -0.3333333\n3691  -3.6666667\n3692  -8.6666667\n3693  -0.6666667\n3694  -4.0000000\n3695   1.6666667\n3696   2.3333333\n3697   0.6666667\n3698  -3.3333333\n3699   9.3333333\n3700  -1.3333333\n3701  -2.3333333\n3702   0.3333333\n3703  -8.0000000\n3704  -2.0000000\n3705  -9.6666667\n3706  -3.0000000\n3707   4.3333333\n3708   0.0000000\n3709  -2.6666667\n3710   8.6666667\n3711   5.3333333\n3712   1.6666667\n3713  -2.3333333\n3714   2.6666667\n3715   8.6666667\n3716  -2.6666667\n3717  -1.0000000\n3718  -3.6666667\n3719   2.6666667\n3720   0.3333333\n3721   0.3333333\n3722  -2.3333333\n3723  -2.3333333\n3724  -1.6666667\n3725   1.3333333\n3726  -3.6666667\n3727  -3.6666667\n3728   2.6666667\n3729   3.3333333\n3730   5.3333333\n3731  -9.3333333\n3732  -6.3333333\n3733   8.3333333\n3734  -6.6666667\n3735   4.3333333\n3736  -1.3333333\n3737  -6.6666667\n3738  -9.0000000\n3739  -4.3333333\n3740   4.0000000\n3741   1.6666667\n3742   7.6666667\n3743  -6.3333333\n3744  -2.3333333\n3745   3.3333333\n3746   1.6666667\n3747  -4.0000000\n3748   7.6666667\n3749   1.3333333\n3750  -3.6666667\n3751  -5.3333333\n3752  -2.6666667\n3753   0.6666667\n3754   3.0000000\n3755  -0.3333333\n3756   1.0000000\n3757  -2.6666667\n3758   3.3333333\n3759  -0.3333333\n3760 -10.0000000\n3761   9.6666667\n3762   0.6666667\n3763  -0.6666667\n3764  -0.6666667\n3765   0.3333333\n3766   4.6666667\n3767   3.0000000\n3768  -0.3333333\n3769   1.6666667\n3770   0.3333333\n3771  -4.3333333\n3772  -1.6666667\n3773  -2.3333333\n3774   2.3333333\n3775  -3.3333333\n3776   2.3333333\n3777   7.6666667\n3778  -8.3333333\n3779   0.6666667\n3780   6.6666667\n3781   2.3333333\n3782   1.6666667\n3783  -2.6666667\n3784  -7.3333333\n3785  -1.0000000\n3786  -5.3333333\n3787   4.6666667\n3788  -8.3333333\n3789   4.3333333\n3790  -3.3333333\n3791  -2.0000000\n3792   6.6666667\n3793   3.6666667\n3794   3.3333333\n3795  -6.6666667\n3796  -4.3333333\n3797  -5.6666667\n3798  -0.6666667\n3799  -5.3333333\n3800  -0.3333333\n3801  -1.0000000\n3802   0.0000000\n3803  -6.0000000\n3804   2.0000000\n3805   2.0000000\n3806  -6.0000000\n3807   0.3333333\n3808 -11.0000000\n3809   4.0000000\n3810  -3.3333333\n3811   2.0000000\n3812   6.6666667\n3813   0.0000000\n3814  -4.0000000\n3815  -3.6666667\n3816  -3.6666667\n3817  -0.6666667\n3818  -3.6666667\n3819   4.6666667\n3820  -7.6666667\n3821   5.6666667\n3822   2.0000000\n3823  -2.6666667\n3824  -6.3333333\n3825   3.0000000\n3826  -0.3333333\n3827  -0.3333333\n3828  -6.3333333\n3829   0.0000000\n3830  -4.3333333\n3831  -5.0000000\n3832   6.6666667\n3833   2.6666667\n3834  11.6666667\n3835  -2.3333333\n3836   4.0000000\n3837   1.6666667\n3838  -7.6666667\n3839   7.0000000\n3840  -1.6666667\n3841   3.3333333\n3842  -7.3333333\n3843  -3.0000000\n3844  -5.0000000\n3845  -1.0000000\n3846  -9.0000000\n3847   3.0000000\n3848  -2.0000000\n3849  -4.3333333\n3850   5.0000000\n3851  -3.3333333\n3852  -4.6666667\n3853   6.6666667\n3854   2.0000000\n3855   5.0000000\n3856 -11.0000000\n3857  -4.0000000\n3858  -4.6666667\n3859   5.3333333\n3860   3.3333333\n3861  -2.0000000\n3862   1.3333333\n3863   1.0000000\n3864   0.0000000\n3865  -2.3333333\n3866  -3.3333333\n3867   4.3333333\n3868  -4.6666667\n3869  -4.3333333\n3870   5.0000000\n3871  -6.0000000\n3872   9.0000000\n3873  -1.0000000\n3874  -7.6666667\n3875   1.6666667\n3876   2.6666667\n3877   1.6666667\n3878  -3.6666667\n3879   0.6666667\n3880   0.0000000\n3881   4.6666667\n3882   0.0000000\n3883  -0.6666667\n3884  -2.3333333\n3885   0.6666667\n3886  -0.3333333\n3887  -3.0000000\n3888   6.0000000\n3889   1.6666667\n3890   3.3333333\n3891   1.6666667\n3892   5.3333333\n3893  10.0000000\n3894   3.0000000\n3895  -5.3333333\n3896  -8.0000000\n3897   4.6666667\n3898   5.0000000\n3899   2.3333333\n3900  -0.3333333\n3901   6.0000000\n3902   9.6666667\n3903   4.6666667\n3904   8.6666667\n3905   4.3333333\n3906  -0.6666667\n3907   2.6666667\n3908   7.0000000\n3909  -7.6666667\n3910   0.0000000\n3911  -1.0000000\n3912   0.6666667\n3913   2.0000000\n3914  -5.3333333\n3915  -5.6666667\n3916  -6.6666667\n3917  -4.6666667\n3918  -2.3333333\n3919  -1.6666667\n3920   8.0000000\n3921   5.6666667\n3922  -2.3333333\n3923  -5.0000000\n3924  -6.0000000\n3925  -1.6666667\n3926   2.0000000\n3927   0.0000000\n3928   2.6666667\n3929  -1.6666667\n3930  -3.0000000\n3931  -4.6666667\n3932  -2.3333333\n3933   2.6666667\n3934   3.3333333\n3935   7.6666667\n3936 -10.3333333\n3937   9.3333333\n3938   4.3333333\n3939  -0.3333333\n3940  -1.0000000\n3941   1.3333333\n3942   3.6666667\n3943   2.6666667\n3944   5.0000000\n3945  -9.3333333\n3946   0.3333333\n3947   2.3333333\n3948  -2.0000000\n3949   7.0000000\n3950   3.6666667\n3951   2.0000000\n3952   0.0000000\n3953   0.3333333\n3954   2.6666667\n3955  -2.0000000\n3956  -4.6666667\n3957   8.6666667\n3958  -2.0000000\n3959   4.3333333\n3960   2.0000000\n3961   0.0000000\n3962  -1.6666667\n3963  -1.0000000\n3964  -4.0000000\n3965   0.0000000\n3966   4.0000000\n3967   3.6666667\n3968   5.0000000\n3969  -7.3333333\n3970   3.6666667\n3971   1.0000000\n3972  -7.0000000\n3973   7.0000000\n3974  -2.6666667\n3975   3.3333333\n3976  -5.3333333\n3977  -4.6666667\n3978  -2.3333333\n3979  -5.6666667\n3980   2.6666667\n3981  -6.3333333\n3982   3.3333333\n3983   4.0000000\n3984   1.0000000\n3985   1.6666667\n3986  -1.3333333\n3987   1.6666667\n3988   1.6666667\n3989   0.0000000\n3990   0.3333333\n3991   0.0000000\n3992  -3.6666667\n3993  -2.6666667\n3994   0.6666667\n3995  -3.3333333\n3996   5.6666667\n3997  -1.0000000\n3998   0.6666667\n3999   3.6666667\n4000   5.3333333\n4001  -2.3333333\n4002   0.3333333\n4003   0.6666667\n4004  -1.0000000\n4005  -1.3333333\n4006   1.0000000\n4007   6.3333333\n4008  -1.0000000\n4009  -3.0000000\n4010   0.0000000\n4011   3.6666667\n4012   1.0000000\n4013  -4.0000000\n4014  -2.3333333\n4015  -1.6666667\n4016  -1.6666667\n4017  -8.3333333\n4018  -1.6666667\n4019   0.3333333\n4020   2.0000000\n4021   0.3333333\n4022   2.6666667\n4023  -0.3333333\n4024  -8.6666667\n4025   2.0000000\n4026   6.6666667\n4027   0.3333333\n4028   7.6666667\n4029   1.3333333\n4030  10.0000000\n4031   3.3333333\n4032   0.6666667\n4033  -3.3333333\n4034   3.0000000\n4035  -4.6666667\n4036  -4.0000000\n4037   4.0000000\n4038  -6.0000000\n4039   6.3333333\n4040   0.0000000\n4041  -1.6666667\n4042   6.0000000\n4043  -1.3333333\n4044  -9.0000000\n4045   3.0000000\n4046  -7.6666667\n4047   7.3333333\n4048  -9.0000000\n4049   2.6666667\n4050   2.3333333\n4051  -5.6666667\n4052   3.3333333\n4053  -0.3333333\n4054   0.6666667\n4055  -1.6666667\n4056   6.3333333\n4057  -4.6666667\n4058  -8.6666667\n4059  -6.3333333\n4060   3.3333333\n4061  -8.3333333\n4062   8.0000000\n4063  -2.6666667\n4064   2.3333333\n4065   3.6666667\n4066  -1.6666667\n4067   1.3333333\n4068   5.3333333\n4069   0.3333333\n4070  -4.6666667\n4071  -6.3333333\n4072   1.0000000\n4073  -2.0000000\n4074  -2.6666667\n4075  -3.3333333\n4076   1.6666667\n4077  -1.3333333\n4078   0.6666667\n4079   1.3333333\n4080   1.0000000\n4081  -8.6666667\n4082  -5.3333333\n4083  -1.6666667\n4084  -2.0000000\n4085  -2.6666667\n4086  -3.3333333\n4087   2.0000000\n4088   5.3333333\n4089   6.0000000\n4090 -11.6666667\n4091   6.6666667\n4092   0.3333333\n4093  -5.6666667\n4094   2.0000000\n4095   3.0000000\n4096  -2.3333333\n4097   7.6666667\n4098   3.3333333\n4099  -2.6666667\n4100  -2.0000000\n4101  -3.3333333\n4102  -7.6666667\n4103   1.3333333\n4104   5.3333333\n4105   5.0000000\n4106  -3.3333333\n4107   0.0000000\n4108  -6.6666667\n4109   4.3333333\n4110  -4.3333333\n4111   2.0000000\n4112   0.0000000\n4113   0.6666667\n4114   4.0000000\n4115  -2.3333333\n4116   0.6666667\n4117  -8.3333333\n4118  10.6666667\n4119   5.6666667\n4120  -4.3333333\n4121   0.3333333\n4122   3.3333333\n4123  -4.3333333\n4124  -3.0000000\n4125   0.6666667\n4126   4.6666667\n4127  -2.0000000\n4128  -1.3333333\n4129  12.0000000\n4130   4.3333333\n4131   2.0000000\n4132  -1.0000000\n4133  -9.6666667\n4134  -8.6666667\n4135  -0.3333333\n4136   2.6666667\n4137   7.3333333\n4138  -3.6666667\n4139  -4.3333333\n4140  -6.0000000\n4141  -2.6666667\n4142  -5.0000000\n4143   0.6666667\n4144   5.0000000\n4145   6.6666667\n4146  -4.6666667\n4147  -6.3333333\n4148   3.6666667\n4149  -6.3333333\n4150   2.0000000\n4151  -1.3333333\n4152   6.3333333\n4153  10.3333333\n4154  -0.6666667\n4155   1.6666667\n4156   4.0000000\n4157   3.3333333\n4158  -2.3333333\n4159   2.3333333\n4160   5.0000000\n4161  -3.6666667\n4162  -0.6666667\n4163   1.3333333\n4164  -1.0000000\n4165  -4.3333333\n4166  -7.3333333\n4167  -5.0000000\n4168   8.0000000\n4169   3.6666667\n4170  -0.6666667\n4171   5.0000000\n4172   5.3333333\n4173   5.0000000\n4174  -1.0000000\n4175  -3.0000000\n4176   1.0000000\n4177   4.0000000\n4178  -1.6666667\n4179  -5.0000000\n4180  -3.0000000\n4181  -4.3333333\n4182   8.6666667\n4183   2.6666667\n4184   4.6666667\n4185   1.6666667\n4186   3.3333333\n4187  -2.6666667\n4188  -6.3333333\n4189  -2.0000000\n4190  -3.0000000\n4191   1.6666667\n4192  -2.6666667\n4193   2.6666667\n4194  -4.6666667\n4195  -3.6666667\n4196 -10.3333333\n4197  -4.0000000\n4198   5.6666667\n4199  -2.0000000\n4200  10.0000000\n4201  -4.6666667\n4202   7.3333333\n4203  -2.6666667\n4204  -3.0000000\n4205   2.6666667\n4206  -6.6666667\n4207  -3.3333333\n4208  -3.0000000\n4209  -3.6666667\n4210  -0.3333333\n4211   2.0000000\n4212   1.0000000\n4213   8.3333333\n4214   9.3333333\n4215  -4.3333333\n4216  -3.3333333\n4217   0.3333333\n4218  -8.0000000\n4219   2.0000000\n4220  10.3333333\n4221   3.3333333\n4222  -6.3333333\n4223  -0.3333333\n4224  -5.6666667\n4225  -4.6666667\n4226  -2.6666667\n4227   0.0000000\n4228   0.6666667\n4229   6.3333333\n4230  -5.6666667\n4231  -2.3333333\n4232  -0.3333333\n4233  -3.3333333\n4234   7.3333333\n4235  -7.0000000\n4236  -0.6666667\n4237  -1.3333333\n4238  -1.6666667\n4239   0.0000000\n4240   3.6666667\n4241  -7.6666667\n4242  -3.6666667\n4243  -5.3333333\n4244  -3.0000000\n4245  -5.0000000\n4246  -8.3333333\n4247   7.3333333\n4248  -2.6666667\n4249  -1.0000000\n4250  -0.3333333\n4251  -3.3333333\n4252 -11.0000000\n4253  -6.0000000\n4254   5.0000000\n4255   3.0000000\n4256  -2.6666667\n4257  -4.3333333\n4258  -2.6666667\n4259  -0.3333333\n4260  -9.3333333\n4261  -2.6666667\n4262   3.3333333\n4263   2.0000000\n4264  -4.6666667\n4265  -2.0000000\n4266   7.3333333\n4267  -0.6666667\n4268  -4.3333333\n4269   4.3333333\n4270   3.0000000\n4271   4.6666667\n4272   0.0000000\n4273  -3.3333333\n4274  -5.0000000\n4275   2.6666667\n4276  -6.3333333\n4277  -7.0000000\n4278  -8.3333333\n4279  -5.6666667\n4280  -2.3333333\n4281  -0.3333333\n4282   6.3333333\n4283  -5.6666667\n4284   2.3333333\n4285   7.6666667\n4286   2.3333333\n4287   0.3333333\n4288  -4.3333333\n4289   1.3333333\n4290  10.3333333\n4291  -2.6666667\n4292   0.6666667\n4293   2.3333333\n4294   1.6666667\n4295   8.3333333\n4296  -7.0000000\n4297  -2.6666667\n4298   0.6666667\n4299   4.0000000\n4300  -0.6666667\n4301   1.0000000\n4302   0.0000000\n4303  -2.6666667\n4304   0.0000000\n4305  -2.0000000\n4306   9.3333333\n4307   8.3333333\n4308   6.6666667\n4309   1.6666667\n4310   6.3333333\n4311   8.3333333\n4312  -1.3333333\n4313   1.0000000\n4314  -0.6666667\n4315   0.6666667\n4316  -5.6666667\n4317  -1.6666667\n4318  -9.0000000\n4319  -1.0000000\n4320   4.3333333\n4321   5.0000000\n4322  -3.3333333\n4323  -4.6666667\n4324   5.3333333\n4325   1.0000000\n4326   7.3333333\n4327   2.6666667\n4328   0.6666667\n4329  -0.3333333\n4330  -4.0000000\n4331   3.6666667\n4332   2.3333333\n4333   0.6666667\n4334  -0.6666667\n4335   0.6666667\n4336  -0.3333333\n4337  -7.3333333\n4338   5.6666667\n4339   9.3333333\n4340  -4.6666667\n4341   4.0000000\n4342   4.3333333\n4343  -1.3333333\n4344   1.3333333\n4345  -3.0000000\n4346  -2.3333333\n4347  -2.0000000\n4348   2.6666667\n4349   0.6666667\n4350  -1.3333333\n4351  -3.3333333\n4352   5.0000000\n4353   0.0000000\n4354  -1.0000000\n4355  -3.6666667\n4356  -0.3333333\n4357  -4.6666667\n4358   1.3333333\n4359   3.3333333\n4360  -0.3333333\n4361   0.3333333\n4362   3.3333333\n4363   0.3333333\n4364  -1.3333333\n4365  -1.0000000\n4366   2.6666667\n4367  -2.3333333\n4368   7.3333333\n4369   6.6666667\n4370   0.0000000\n4371   8.6666667\n4372  -3.3333333\n4373  -0.6666667\n4374  -1.0000000\n4375   4.0000000\n4376  -1.6666667\n4377   1.0000000\n4378  -8.0000000\n4379  -9.3333333\n4380   2.0000000\n4381   1.3333333\n4382  -2.3333333\n4383  -7.6666667\n4384   7.0000000\n4385   6.6666667\n4386   8.3333333\n4387  -2.6666667\n4388   0.6666667\n4389   4.3333333\n4390  -3.0000000\n4391   3.0000000\n4392  -5.6666667\n4393  -1.3333333\n4394  -7.3333333\n4395  -6.6666667\n4396   3.3333333\n4397  -1.3333333\n4398  -1.6666667\n4399  -3.0000000\n4400   1.3333333\n4401  -2.3333333\n4402   2.0000000\n4403  -4.0000000\n4404   8.6666667\n4405  10.6666667\n4406  -3.6666667\n4407   8.6666667\n4408  -0.6666667\n4409   9.6666667\n4410   0.0000000\n4411   2.3333333\n4412   0.3333333\n4413   5.3333333\n4414  -1.3333333\n4415   1.3333333\n4416  -4.3333333\n4417   3.3333333\n4418   3.3333333\n4419  -5.3333333\n4420  -7.6666667\n4421   1.0000000\n4422   2.6666667\n4423  -5.3333333\n4424   1.0000000\n4425  -4.0000000\n4426   1.6666667\n4427   4.0000000\n4428   6.3333333\n4429   5.3333333\n4430   5.3333333\n4431   4.6666667\n4432  -3.3333333\n4433   6.0000000\n4434  -5.6666667\n4435   3.6666667\n4436   3.0000000\n4437  -4.0000000\n4438   2.0000000\n4439   8.0000000\n4440  -3.0000000\n4441  -4.3333333\n4442  -1.0000000\n4443  -4.6666667\n4444   5.3333333\n4445  -2.3333333\n4446   2.0000000\n4447  -4.6666667\n4448   3.6666667\n4449   4.3333333\n4450   1.6666667\n4451   0.3333333\n4452   6.6666667\n4453  -1.3333333\n4454  -5.3333333\n4455   2.6666667\n4456   7.6666667\n4457   3.0000000\n4458  -2.0000000\n4459  -1.0000000\n4460  -9.0000000\n4461  -4.6666667\n4462   0.6666667\n4463  10.3333333\n4464   6.0000000\n4465   0.6666667\n4466   7.3333333\n4467   1.6666667\n4468   5.3333333\n4469   1.3333333\n4470  -1.3333333\n4471  -1.6666667\n4472   3.6666667\n4473   2.6666667\n4474  -5.6666667\n4475   8.3333333\n4476   2.6666667\n4477   3.6666667\n4478   1.3333333\n4479   1.3333333\n4480   5.0000000\n4481  -4.3333333\n4482   3.3333333\n4483  -3.3333333\n4484  -1.0000000\n4485   0.0000000\n4486   8.3333333\n4487  -1.0000000\n4488   4.0000000\n4489   3.0000000\n4490  -1.0000000\n4491   7.3333333\n4492  -4.3333333\n4493   6.0000000\n4494   0.3333333\n4495  -1.0000000\n4496  -2.6666667\n4497   0.0000000\n4498  -0.6666667\n4499   4.0000000\n4500   2.0000000\n4501  -5.0000000\n4502  -7.0000000\n4503  -2.0000000\n4504  -1.6666667\n4505   2.3333333\n4506 -11.0000000\n4507  -6.3333333\n4508   1.0000000\n4509  -1.6666667\n4510   3.0000000\n4511   4.6666667\n4512  -1.6666667\n4513   5.6666667\n4514  -5.0000000\n4515 -12.0000000\n4516   6.6666667\n4517  -3.0000000\n4518   3.6666667\n4519  -6.3333333\n4520   1.0000000\n4521  -3.6666667\n4522   2.3333333\n4523   3.6666667\n4524   1.6666667\n4525  -1.6666667\n4526   2.6666667\n4527   4.6666667\n4528  -6.6666667\n4529   5.3333333\n4530  -1.0000000\n4531  -0.3333333\n4532   3.6666667\n4533   3.0000000\n4534  -6.3333333\n4535   8.3333333\n4536   7.0000000\n4537  -3.6666667\n4538  -9.6666667\n4539   5.3333333\n4540   1.0000000\n4541  -3.3333333\n4542   1.3333333\n4543   5.3333333\n4544   5.6666667\n4545   7.0000000\n4546   1.0000000\n4547   8.3333333\n4548  -3.3333333\n4549   6.6666667\n4550  -6.0000000\n4551  -1.3333333\n4552   4.6666667\n4553  -3.0000000\n4554   5.0000000\n4555   0.3333333\n4556  -3.6666667\n4557  -2.0000000\n4558   5.3333333\n4559   3.0000000\n4560   0.0000000\n4561   3.0000000\n4562  -1.0000000\n4563   1.3333333\n4564  -5.0000000\n4565  -2.3333333\n4566  -1.3333333\n4567  -2.0000000\n4568  -1.6666667\n4569  -2.6666667\n4570  -7.6666667\n4571  -5.0000000\n4572   0.6666667\n4573   1.6666667\n4574  -4.3333333\n4575   0.6666667\n4576   3.6666667\n4577   6.0000000\n4578  -3.6666667\n4579  -4.0000000\n4580   5.0000000\n4581  -6.6666667\n4582   5.3333333\n4583  -0.6666667\n4584  -0.6666667\n4585   4.0000000\n4586   4.6666667\n4587   1.0000000\n4588   5.3333333\n4589   0.3333333\n4590   4.6666667\n4591  -6.3333333\n4592   1.6666667\n4593   4.0000000\n4594   6.3333333\n4595   3.3333333\n4596  -4.3333333\n4597  -1.3333333\n4598  -2.3333333\n4599   6.3333333\n4600  -6.3333333\n4601   4.0000000\n4602  -5.0000000\n4603   2.0000000\n4604   2.3333333\n4605   3.6666667\n4606  -2.3333333\n4607   4.3333333\n4608  -1.3333333\n4609  -3.6666667\n4610  -1.0000000\n4611   4.6666667\n4612   3.6666667\n4613  -3.6666667\n4614   3.0000000\n4615  -2.0000000\n4616  -4.3333333\n4617  -1.3333333\n4618   3.3333333\n4619   8.0000000\n4620   4.6666667\n4621  -1.6666667\n4622   6.3333333\n4623   2.0000000\n4624   4.3333333\n4625 -11.3333333\n4626  -6.3333333\n4627  -5.6666667\n4628   3.6666667\n4629   1.6666667\n4630   1.6666667\n4631   7.3333333\n4632   7.3333333\n4633  -2.0000000\n4634   1.6666667\n4635   7.6666667\n4636  -0.6666667\n4637  -7.3333333\n4638   6.6666667\n4639   5.6666667\n4640  -3.0000000\n4641   7.6666667\n4642   6.0000000\n4643  -1.0000000\n4644   2.0000000\n4645   1.6666667\n4646  -2.0000000\n4647  -1.0000000\n4648  -5.0000000\n4649   3.3333333\n4650  -4.6666667\n4651  -6.6666667\n4652  -3.6666667\n4653   0.0000000\n4654   6.3333333\n4655   8.3333333\n4656  -4.6666667\n4657   1.0000000\n4658  -4.3333333\n4659  -1.3333333\n4660   4.3333333\n4661  -2.0000000\n4662   5.3333333\n4663  -3.3333333\n4664   2.6666667\n4665   0.0000000\n4666   0.6666667\n4667  -5.6666667\n4668   1.3333333\n4669  -3.0000000\n4670   5.3333333\n4671   3.3333333\n4672  -3.6666667\n4673   0.6666667\n4674   5.3333333\n4675   2.3333333\n4676   0.3333333\n4677   6.0000000\n4678  -0.3333333\n4679  -0.3333333\n4680 -11.0000000\n4681   5.6666667\n4682  -2.0000000\n4683   4.3333333\n4684  -1.6666667\n4685  -1.3333333\n4686   1.3333333\n4687  -0.3333333\n4688  -2.6666667\n4689  -6.6666667\n4690   4.0000000\n4691  -4.6666667\n4692   2.6666667\n4693  -6.0000000\n4694   9.6666667\n4695   3.3333333\n4696   1.0000000\n4697  -6.0000000\n4698  -6.6666667\n4699  -4.0000000\n4700  -6.3333333\n4701   2.6666667\n4702   1.0000000\n4703  10.0000000\n4704   1.6666667\n4705  -0.3333333\n4706   4.3333333\n4707   4.0000000\n4708  11.0000000\n4709   2.6666667\n4710   1.0000000\n4711  -2.0000000\n4712  -1.0000000\n4713  -4.6666667\n4714   2.3333333\n4715   3.6666667\n4716   0.0000000\n4717  -2.6666667\n4718   8.3333333\n4719  -1.3333333\n4720   1.3333333\n4721 -13.3333333\n4722   1.0000000\n4723  -5.0000000\n4724   1.6666667\n4725   0.3333333\n4726   6.0000000\n4727   2.0000000\n4728  -2.6666667\n4729  -8.6666667\n4730  -9.3333333\n4731   7.6666667\n4732   4.0000000\n4733  -2.6666667\n4734  -2.6666667\n4735  -3.6666667\n4736  -2.3333333\n4737   1.3333333\n4738  -8.6666667\n4739   9.0000000\n4740   1.6666667\n4741  -1.3333333\n4742   1.6666667\n4743  -0.6666667\n4744  -3.0000000\n4745  10.0000000\n4746   7.3333333\n4747   2.6666667\n4748  -0.3333333\n4749   6.6666667\n4750   3.0000000\n4751   6.3333333\n4752  -5.0000000\n4753   4.0000000\n4754   1.3333333\n4755  -9.3333333\n4756   1.0000000\n4757   1.3333333\n4758   6.6666667\n4759  -9.0000000\n4760   3.3333333\n4761  -2.3333333\n4762  -8.3333333\n4763   3.6666667\n4764   7.6666667\n4765  -3.3333333\n4766   9.0000000\n4767   3.3333333\n4768  -2.6666667\n4769   9.3333333\n4770   6.6666667\n4771  -6.3333333\n4772   4.6666667\n4773   1.3333333\n4774  -3.6666667\n4775   8.0000000\n4776  -3.0000000\n4777   7.6666667\n4778  -2.3333333\n4779  -2.6666667\n4780  -7.0000000\n4781   2.3333333\n4782   1.6666667\n4783  -7.6666667\n4784   2.0000000\n4785  -2.3333333\n4786 -10.6666667\n4787   3.0000000\n4788  -1.0000000\n4789  -3.0000000\n4790   6.6666667\n4791  -8.3333333\n4792  -1.6666667\n4793   5.6666667\n4794  -3.3333333\n4795  -2.6666667\n4796   2.6666667\n4797   0.0000000\n4798  -4.0000000\n4799   1.3333333\n4800   1.0000000\n4801   4.0000000\n4802   3.6666667\n4803  -1.6666667\n4804   6.6666667\n4805  -2.6666667\n4806  -0.6666667\n4807   0.3333333\n4808   2.0000000\n4809   9.3333333\n4810   6.3333333\n4811   0.6666667\n4812 -10.3333333\n4813  -2.0000000\n4814  -0.3333333\n4815   5.0000000\n4816  -3.0000000\n4817  -3.6666667\n4818   5.0000000\n4819   2.6666667\n4820  -2.6666667\n4821   0.0000000\n4822  -1.3333333\n4823  -3.3333333\n4824  -5.6666667\n4825  -6.0000000\n4826   7.0000000\n4827  -7.6666667\n4828   1.3333333\n4829  -3.0000000\n4830  -6.0000000\n4831   1.0000000\n4832   3.0000000\n4833  -4.6666667\n4834   1.0000000\n4835   7.0000000\n4836   1.0000000\n4837  -0.3333333\n4838 -12.6666667\n4839   6.0000000\n4840   0.6666667\n4841  -0.6666667\n4842  -6.0000000\n4843   1.3333333\n4844   0.3333333\n4845   4.6666667\n4846  -3.3333333\n4847  -9.6666667\n4848  -3.3333333\n4849   0.3333333\n4850   2.6666667\n4851   6.0000000\n4852  -0.6666667\n4853   4.6666667\n4854  -0.6666667\n4855  -2.6666667\n4856  -5.6666667\n4857  -6.0000000\n4858   3.3333333\n4859  -3.3333333\n4860  -1.6666667\n4861  -1.3333333\n4862  -5.3333333\n4863  -0.3333333\n4864   3.3333333\n4865   3.0000000\n4866   2.6666667\n4867  13.0000000\n4868   6.3333333\n4869   3.6666667\n4870  -7.3333333\n4871  -1.0000000\n4872 -10.6666667\n4873   3.0000000\n4874  -2.3333333\n4875   3.6666667\n4876   0.6666667\n4877   2.3333333\n4878   5.0000000\n4879   1.3333333\n4880  -8.3333333\n4881   8.3333333\n4882   1.6666667\n4883  -5.3333333\n4884  -2.6666667\n4885   3.6666667\n4886   1.3333333\n4887   0.6666667\n4888   4.0000000\n4889   5.3333333\n4890  -2.6666667\n4891  -3.0000000\n4892   3.0000000\n4893   4.0000000\n4894  -3.6666667\n4895  -1.3333333\n4896  -1.3333333\n4897  -3.6666667\n4898  -2.6666667\n4899  -7.3333333\n4900  -4.0000000\n4901  -1.6666667\n4902  -4.0000000\n4903   5.0000000\n4904  -0.3333333\n4905  -8.3333333\n4906  -3.6666667\n4907  -5.3333333\n4908   2.6666667\n4909   1.3333333\n4910  -1.6666667\n4911   1.0000000\n4912   3.3333333\n4913  -1.0000000\n4914   2.0000000\n4915  -6.0000000\n4916   7.6666667\n4917  -0.6666667\n4918   4.0000000\n4919   1.6666667\n4920  -0.6666667\n4921  -3.0000000\n4922   0.6666667\n4923   0.6666667\n4924   1.6666667\n4925   5.3333333\n4926   2.6666667\n4927   0.0000000\n4928  -1.6666667\n4929   3.6666667\n4930   2.0000000\n4931  -6.3333333\n4932   9.0000000\n4933  -0.6666667\n4934   1.6666667\n4935  -1.0000000\n4936   5.6666667\n4937   4.0000000\n4938  -6.3333333\n4939  -4.0000000\n4940   6.3333333\n4941  -2.3333333\n4942   1.0000000\n4943  -1.6666667\n4944  -6.3333333\n4945   3.0000000\n4946   0.6666667\n4947   2.0000000\n4948   3.6666667\n4949  -1.0000000\n4950  -4.6666667\n4951  -4.3333333\n4952  -1.3333333\n4953   0.0000000\n4954   2.6666667\n4955   2.0000000\n4956  -2.3333333\n4957   2.3333333\n4958   8.0000000\n4959  -4.0000000\n4960  -2.0000000\n4961 -13.0000000\n4962  -1.3333333\n4963  -7.6666667\n4964  -2.0000000\n4965  -5.0000000\n4966   2.3333333\n4967   2.3333333\n4968  -1.3333333\n4969   0.0000000\n4970  -5.6666667\n4971  -0.3333333\n4972   1.0000000\n4973  -2.6666667\n4974  -2.3333333\n4975  -4.3333333\n4976   1.6666667\n4977   2.6666667\n4978   4.6666667\n4979   7.3333333\n4980  -4.3333333\n4981  -7.3333333\n4982   4.6666667\n4983  -2.3333333\n4984  -6.6666667\n4985   3.0000000\n4986   3.3333333\n4987  -5.6666667\n4988  -3.3333333\n4989   4.6666667\n4990  -0.6666667\n4991   7.3333333\n4992  -1.0000000\n4993   5.6666667\n4994  -4.3333333\n4995  -1.6666667\n4996  -2.3333333\n4997  -8.0000000\n4998 -10.0000000\n4999   4.6666667\n\n\n\ngf_histogram(data =tips_permute, ~ diffmean, bins = 25) %&gt;%\n  gf_vline(xintercept = diff_tip, \n           colour = \"red\", linewidth = 1,\n           title = \"Null Distribution by Permutation\", \n           subtitle = \"Histogram\") %&gt;% \n  gf_labs(x = \"Difference in Means\")\n\n\n\n\n\n\n\n###\ngf_ecdf(data = tips_permute, ~ diffmean, \n        linewidth = 1) %&gt;%\n  gf_vline(xintercept = diff_tip, \n           colour = \"red\", linewidth = 1,\n           title = \"Null Distribution by Permutation\", \n           subtitle = \"Cumulative Density\") %&gt;% \n  gf_labs(x = \"Difference in Means\")\n\n\n\n\n\n\n\n\n\nHere, the difference in the averages of tips by both food preferences is 2.33. (We knew that.) We can see that the actual mean difference is something that could easily be generated randomly. Which means that we can achieve this distribution without a bias, i.e. without non-vegetarians being more generous. The null hypothesis is not disproved.\n\n\nSo we CANNOT say that the hunch is true."
  },
  {
    "objectID": "posts/Octafolder/index.html#section",
    "href": "posts/Octafolder/index.html#section",
    "title": "Tips by Food",
    "section": "————————————————————————-",
    "text": "————————————————————————-"
  }
]