[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/Trifolder/index.html",
    "href": "posts/Trifolder/index.html",
    "title": "Counting",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing"
  },
  {
    "objectID": "posts/Duofolder/index.html",
    "href": "posts/Duofolder/index.html",
    "title": "Data Summaries",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following object is masked from 'package:scales':\n\n    rescale\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(kableExtra)\n\n\nAttaching package: 'kableExtra'\n\nThe following object is masked from 'package:dplyr':\n\n    group_rows\n\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\n\n\nViewing data about Cars…\n\nmpg\n\n# A tibble: 234 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n# ℹ 224 more rows\n\n\n\nmpg %&gt;% \n  head(10)\n\n# A tibble: 10 × 11\n   manufacturer model      displ  year   cyl trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt;\n 1 audi         a4           1.8  1999     4 auto… f        18    29 p     comp…\n 2 audi         a4           1.8  1999     4 manu… f        21    29 p     comp…\n 3 audi         a4           2    2008     4 manu… f        20    31 p     comp…\n 4 audi         a4           2    2008     4 auto… f        21    30 p     comp…\n 5 audi         a4           2.8  1999     6 auto… f        16    26 p     comp…\n 6 audi         a4           2.8  1999     6 manu… f        18    26 p     comp…\n 7 audi         a4           3.1  2008     6 auto… f        18    27 p     comp…\n 8 audi         a4 quattro   1.8  1999     4 manu… 4        18    26 p     comp…\n 9 audi         a4 quattro   1.8  1999     4 auto… 4        16    25 p     comp…\n10 audi         a4 quattro   2    2008     4 manu… 4        20    28 p     comp…\n\n\n\nglimpse(mpg)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;chr&gt; \"auto(l5)\", \"manual(m5)\", \"manual(m6)\", \"auto(av)\", \"auto…\n$ drv          &lt;chr&gt; \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"f\", \"4\", \"4\", \"4\", \"4\", \"4…\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;chr&gt; \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p\", \"p…\n$ class        &lt;chr&gt; \"compact\", \"compact\", \"compact\", \"compact\", \"compact\", \"c…\n\n\n\ninspect(mpg)\n\n\ncategorical variables:  \n          name     class levels   n missing\n1 manufacturer character     15 234       0\n2        model character     38 234       0\n3        trans character     10 234       0\n4          drv character      3 234       0\n5           fl character      5 234       0\n6        class character      7 234       0\n                                   distribution\n1 dodge (15.8%), toyota (14.5%) ...            \n2 caravan 2wd (4.7%) ...                       \n3 auto(l4) (35.5%), manual(m5) (24.8%) ...     \n4 f (45.3%), 4 (44%), r (10.7%)                \n5 r (71.8%), p (22.2%), e (3.4%) ...           \n6 suv (26.5%), compact (20.1%) ...             \n\nquantitative variables:  \n   name   class    min     Q1 median     Q3  max        mean       sd   n\n1 displ numeric    1.6    2.4    3.3    4.6    7    3.471795 1.291959 234\n2  year integer 1999.0 1999.0 2003.5 2008.0 2008 2003.500000 4.509646 234\n3   cyl integer    4.0    4.0    6.0    8.0    8    5.888889 1.611534 234\n4   cty integer    9.0   14.0   17.0   19.0   35   16.858974 4.255946 234\n5   hwy integer   12.0   18.0   24.0   27.0   44   23.440171 5.954643 234\n  missing\n1       0\n2       0\n3       0\n4       0\n5       0\n\n\n\nskim(mpg)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n0\n1\n4\n10\n0\n15\n0\n\n\nmodel\n0\n1\n2\n22\n0\n38\n0\n\n\ntrans\n0\n1\n8\n10\n0\n10\n0\n\n\ndrv\n0\n1\n1\n1\n0\n3\n0\n\n\nfl\n0\n1\n1\n1\n0\n5\n0\n\n\nclass\n0\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n0\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n▇▆▆▃▁\n\n\nyear\n0\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n▇▁▁▁▇\n\n\ncyl\n0\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n▇▁▇▁▇\n\n\ncty\n0\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n▆▇▃▁▁\n\n\nhwy\n0\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n▅▅▇▁▁\n\n\n\n\n\n\nmpg_modified &lt;- mpg %&gt;% \n  dplyr::mutate(\n    cyl = as_factor(cyl),\n    fl = as_factor(fl),\n    drv = as_factor(drv),\n    class = as_factor(class),\n    trans = as_factor(trans)\n    )\nglimpse(mpg_modified)\n\nRows: 234\nColumns: 11\n$ manufacturer &lt;chr&gt; \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"audi\", \"…\n$ model        &lt;chr&gt; \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4\", \"a4 quattro\", \"…\n$ displ        &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0, 2.0, 2.…\n$ year         &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1999, 200…\n$ cyl          &lt;fct&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6, 8, 8, …\n$ trans        &lt;fct&gt; auto(l5), manual(m5), manual(m6), auto(av), auto(l5), man…\n$ drv          &lt;fct&gt; f, f, f, f, f, f, f, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, r, …\n$ cty          &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 17, 17, 1…\n$ hwy          &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 25, 25, 2…\n$ fl           &lt;fct&gt; p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, p, r, …\n$ class        &lt;fct&gt; compact, compact, compact, compact, compact, compact, com…\n\n\n\nTrying out functions…\n\nmpg_modified %&gt;% filter(class=='suv') \n\n# A tibble: 62 × 11\n   manufacturer model      displ  year cyl   trans drv     cty   hwy fl    class\n   &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;\n 1 chevrolet    c1500 sub…   5.3  2008 8     auto… r        14    20 r     suv  \n 2 chevrolet    c1500 sub…   5.3  2008 8     auto… r        11    15 e     suv  \n 3 chevrolet    c1500 sub…   5.3  2008 8     auto… r        14    20 r     suv  \n 4 chevrolet    c1500 sub…   5.7  1999 8     auto… r        13    17 r     suv  \n 5 chevrolet    c1500 sub…   6    2008 8     auto… r        12    17 r     suv  \n 6 chevrolet    k1500 tah…   5.3  2008 8     auto… 4        14    19 r     suv  \n 7 chevrolet    k1500 tah…   5.3  2008 8     auto… 4        11    14 e     suv  \n 8 chevrolet    k1500 tah…   5.7  1999 8     auto… 4        11    15 r     suv  \n 9 chevrolet    k1500 tah…   6.5  1999 8     auto… 4        14    17 d     suv  \n10 dodge        durango 4…   3.9  1999 6     auto… 4        13    17 r     suv  \n# ℹ 52 more rows\n\n\n\n\nMaking lines on graphs. This one gives highway mileages per each segment in Chevrolet\n\nmpg_modified %&gt;% filter(manufacturer=='chevrolet') %&gt;% \n  gf_line(model~hwy)\n\n\n\n\n\n\n\n\n\n\nLet us look at some more mileage information across manufacturers…\n\nmpg_modified %&gt;%\n  group_by(manufacturer,cyl) %&gt;%\n  summarize(average_hwy = mean(hwy), avg_city= mean(cty), count = n())\n\n`summarise()` has grouped output by 'manufacturer'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 32 × 5\n# Groups:   manufacturer [15]\n   manufacturer cyl   average_hwy avg_city count\n   &lt;chr&gt;        &lt;fct&gt;       &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n 1 audi         4            28.1     19.1     8\n 2 audi         6            25.3     16.4     9\n 3 audi         8            23       16       1\n 4 chevrolet    4            28.5     20.5     2\n 5 chevrolet    6            27       17.7     3\n 6 chevrolet    8            19.9     13.6    14\n 7 dodge        4            24       18       1\n 8 dodge        6            20.7     15      15\n 9 dodge        8            15.7     11.6    21\n10 ford         6            20.7     15.3    10\n# ℹ 22 more rows\n\n\n\n\nWe can see from above table that regardless of manufacturer, both the City & Highway mileages decrease in cars as cylinders are increased. That makes sense. Also, the highway mileages suffer more than city mileages.\n\n\nOn average, can we say that 6 cylinder Audis & Chevys are better than Dodges & Fords? Most likely. But we only have 3 Chevys. So we need more data do be sure.\n\nmpg_modified %&gt;% filter(manufacturer =='audi') %&gt;% \n  group_by(manufacturer,class,year) %&gt;% \n  summarise(avg_high= mean(hwy), avg_city= mean(cty), count=n())\n\n`summarise()` has grouped output by 'manufacturer', 'class'. You can override\nusing the `.groups` argument.\n\n\n# A tibble: 4 × 6\n# Groups:   manufacturer, class [2]\n  manufacturer class    year avg_high avg_city count\n  &lt;chr&gt;        &lt;fct&gt;   &lt;int&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;int&gt;\n1 audi         compact  1999     26.4     17.4     8\n2 audi         compact  2008     27.6     18.6     7\n3 audi         midsize  1999     24       15       1\n4 audi         midsize  2008     24       16.5     2\n\n#The filter command filters out all rows with manufacturers as audi (common sense)\n\n#When you use the group_by function, it makes groups of each each year for each class for each manufacturer.\n#E.g. Here it filtered out all the audis, then made a group for each class of an audi (compact & midsize) and then further made a separate row for each year for both the classes.\n\n# The summarize command takes 2 arguments (New_Column_Name ~ Function) \n#Here it has made an average of highway & city mileages separately for: \n#All compact Audis from 1999\n#All compact Audis from 2008\n#All midsize Audis from 1999\n#All midsize Audis from 2008\n\n#Remember that even if this table only shows 4 rows, that is because they were grouped by class & year. But there are still differences between cylinders, engine displacement, fuel type in the cars & actually there are a lot of Audi types.\n\n\n\nSo the above table helps us understand about avg mileages in Audi car types;\n\n\nBoth highway and city mileages have increased (or remained the same) for both car types from 1999 to 2008. I believe it is expected, as cars become more fuel efficient with technological improvements.\n\n\nBut why has highway mileage in midsize Audis not increased? Let us try to investigate.\n\n\nLook at the count column. We only have data of 1 Audi Midsize from 1999 & 2 from 2008.\n\nmpg_modified %&gt;% filter(manufacturer =='audi', class=='midsize')\n\n# A tibble: 3 × 11\n  manufacturer model      displ  year cyl   trans  drv     cty   hwy fl    class\n  &lt;chr&gt;        &lt;chr&gt;      &lt;dbl&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;  &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;fct&gt; &lt;fct&gt;\n1 audi         a6 quattro   2.8  1999 6     auto(… 4        15    24 p     mids…\n2 audi         a6 quattro   3.1  2008 6     auto(… 4        17    25 p     mids…\n3 audi         a6 quattro   4.2  2008 8     auto(… 4        16    23 p     mids…\n\n\n\n\nThe cars have from 1999, 2008, 2008 have highway mileages 24,23,25 respectively. So coincidentally, both years average out to 24.\n\n\nThis is why it is better to have a large sample size so we can get more accurate results.\n\n\n====================================================================\n\n\n\nAnalyzing Math Anxiety Data\n\nmath_ax &lt;- read_delim(file = '../../datasets/MathAnxiety.csv', delim = ';')\n\nRows: 599 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\nchr (2): Gender, Grade\ndbl (3): AMAS, RCMAS, Arith\nnum (1): Age\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmath_ax\n\n# A tibble: 599 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1379 Girl   Secondary    23    26     5\n 4  1428 Girl   Secondary    19    18     7\n 5  1356 Boy    Secondary    23    20     1\n 6  1350 Girl   Secondary    27    33     1\n 7  1336 Boy    Secondary    22    23     4\n 8  1393 Boy    Secondary    17    11     7\n 9  1317 Girl   Secondary    28    32     2\n10  1348 Boy    Secondary    20    30     6\n# ℹ 589 more rows\n\n\n\nglimpse(math_ax)\n\nRows: 599\nColumns: 6\n$ Age    &lt;dbl&gt; 1378, 1407, 1379, 1428, 1356, 1350, 1336, 1393, 1317, 1348, 141…\n$ Gender &lt;chr&gt; \"Boy\", \"Boy\", \"Girl\", \"Girl\", \"Boy\", \"Girl\", \"Boy\", \"Boy\", \"Gir…\n$ Grade  &lt;chr&gt; \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\", \"Secondary\"…\n$ AMAS   &lt;dbl&gt; 9, 18, 23, 19, 23, 27, 22, 17, 28, 20, 16, 20, 21, 36, 16, 27, …\n$ RCMAS  &lt;dbl&gt; 20, 8, 26, 18, 20, 33, 23, 11, 32, 30, 10, 4, 23, 26, 24, 21, 3…\n$ Arith  &lt;dbl&gt; 6, 6, 5, 7, 1, 1, 4, 7, 2, 6, 2, 5, 2, 6, 2, 7, 2, 4, 7, 3, 8, …\n\n\n\ninspect(math_ax)\n\n\ncategorical variables:  \n    name     class levels   n missing\n1 Gender character      2 599       0\n2  Grade character      2 599       0\n                                   distribution\n1 Boy (53.9%), Girl (46.1%)                    \n2 Primary (66.9%), Secondary (33.1%)           \n\nquantitative variables:  \n   name   class min     Q1 median     Q3  max       mean         sd   n missing\n1   Age numeric  37 1061.5   1208 1418.5 1875 1246.49249 223.112183 599       0\n2  AMAS numeric   4   18.0     22   26.5   45   21.98164   6.597962 599       0\n3 RCMAS numeric   1   14.0     19   25.0   41   19.24040   7.566802 599       0\n4 Arith numeric   0    4.0      6    7.0    8    5.30217   2.105220 599       0\n\n\n\nskim(math_ax)\n\n\nData summary\n\n\nName\nmath_ax\n\n\nNumber of rows\n599\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nGender\n0\n1\n3\n4\n0\n2\n0\n\n\nGrade\n0\n1\n7\n9\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nAge\n0\n1\n1246.49\n223.11\n37\n1061.5\n1208\n1418.5\n1875\n▁▁▇▇▃\n\n\nAMAS\n0\n1\n21.98\n6.60\n4\n18.0\n22\n26.5\n45\n▂▆▇▃▁\n\n\nRCMAS\n0\n1\n19.24\n7.57\n1\n14.0\n19\n25.0\n41\n▂▇▇▅▁\n\n\nArith\n0\n1\n5.30\n2.11\n0\n4.0\n6\n7.0\n8\n▂▃▃▇▇\n\n\n\n\n\n\nmath_ax %&gt;% \n  group_by(Gender, Grade) %&gt;% \n  summarise(avg_amas = mean(AMAS), avg_rcm= mean(RCMAS))\n\n`summarise()` has grouped output by 'Gender'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 4 × 4\n# Groups:   Gender [2]\n  Gender Grade     avg_amas avg_rcm\n  &lt;chr&gt;  &lt;chr&gt;        &lt;dbl&gt;   &lt;dbl&gt;\n1 Boy    Primary       20.9    18.6\n2 Boy    Secondary     21.5    17.4\n3 Girl   Primary       22.7    20.6\n4 Girl   Secondary     23.5    20.3\n\n\n\nBased on this, can we say that girls on average have a higher anxiety than boys their age? Probably. We also know that the math anxiety increases in secondary school as math concepts get tougher.\n\nmath_ax %&gt;% filter( Gender=='Boy')\n\n# A tibble: 323 × 6\n     Age Gender Grade      AMAS RCMAS Arith\n   &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  1378 Boy    Secondary     9    20     6\n 2  1407 Boy    Secondary    18     8     6\n 3  1356 Boy    Secondary    23    20     1\n 4  1336 Boy    Secondary    22    23     4\n 5  1393 Boy    Secondary    17    11     7\n 6  1348 Boy    Secondary    20    30     6\n 7  1413 Boy    Secondary    16    10     2\n 8  1580 Boy    Secondary    20     4     5\n 9  1551 Boy    Secondary    21    23     2\n10  1327 Boy    Secondary    36    26     6\n# ℹ 313 more rows\n\n\n\n\nAnd the number of girls & boys in the dataset is close enough. (323 vs 276 ) So if it is the data of a school, it is not like the girls are in the minority and hence not given proper attention while teaching concepts. That is irrelevant.\n\n\n=============================================================================="
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PogBlog",
    "section": "",
    "text": "Data Summaries\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nQuant\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCounting\n\n\n\n\n\n\n\n\n\n\n\nVarad Akolkar\n\n\n\n\n\n\n\n\n\n\n\n\nEntitled\n\n\n\n\n\n\n\n\n\n\n\nVarad\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/Unfolder/index.html",
    "href": "posts/Unfolder/index.html",
    "title": "Entitled",
    "section": "",
    "text": "There are two types of people in this world. Those who can extrapolate from incomplete data…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\n\nbabynames %&gt;% filter(name=='Varad') %&gt;%\n  gf_line(n~year)\n\n\n\n\n\n\n\n\n\nbabynames %&gt;% filter(name ==\"Varad\"| name ==\"Warad\"|name ==\"Varadh\") \n\n# A tibble: 7 × 5\n   year sex   name      n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n1  2007 M     Varad     5 0.00000226\n2  2012 M     Varad     7 0.00000346\n3  2013 M     Varad     6 0.00000298\n4  2014 M     Varad     6 0.00000293\n5  2015 M     Varad     7 0.00000343\n6  2016 M     Varad     5 0.00000248\n7  2017 M     Varad     6 0.00000306"
  },
  {
    "objectID": "posts/Unfolder/index.html#introduction--data-analysis",
    "href": "posts/Unfolder/index.html#introduction--data-analysis",
    "title": "Entitled",
    "section": "",
    "text": "There are two types of people in this world. Those who can extrapolate from incomplete data…\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggformula)\n\nLoading required package: scales\n\nAttaching package: 'scales'\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\nLoading required package: ggridges\n\nNew to ggformula?  Try the tutorials: \n    learnr::run_tutorial(\"introduction\", package = \"ggformula\")\n    learnr::run_tutorial(\"refining\", package = \"ggformula\")\n\nlibrary(babynames)\n\n\nbabynames\n\n# A tibble: 1,924,665 × 5\n    year sex   name          n   prop\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;     &lt;int&gt;  &lt;dbl&gt;\n 1  1880 F     Mary       7065 0.0724\n 2  1880 F     Anna       2604 0.0267\n 3  1880 F     Emma       2003 0.0205\n 4  1880 F     Elizabeth  1939 0.0199\n 5  1880 F     Minnie     1746 0.0179\n 6  1880 F     Margaret   1578 0.0162\n 7  1880 F     Ida        1472 0.0151\n 8  1880 F     Alice      1414 0.0145\n 9  1880 F     Bertha     1320 0.0135\n10  1880 F     Sarah      1288 0.0132\n# ℹ 1,924,655 more rows\n\n\n\nbabynames %&gt;% filter(name=='Varad') %&gt;%\n  gf_line(n~year)\n\n\n\n\n\n\n\n\n\nbabynames %&gt;% filter(name ==\"Varad\"| name ==\"Warad\"|name ==\"Varadh\") \n\n# A tibble: 7 × 5\n   year sex   name      n       prop\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;      &lt;dbl&gt;\n1  2007 M     Varad     5 0.00000226\n2  2012 M     Varad     7 0.00000346\n3  2013 M     Varad     6 0.00000298\n4  2014 M     Varad     6 0.00000293\n5  2015 M     Varad     7 0.00000343\n6  2016 M     Varad     5 0.00000248\n7  2017 M     Varad     6 0.00000306"
  },
  {
    "objectID": "posts/Quartofolder/index.html",
    "href": "posts/Quartofolder/index.html",
    "title": "Quant",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(mosaic)\n\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n\nlibrary(ggformula)\nlibrary(skimr)\n\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n\nlibrary(crosstable) # Fast stats for multiple variables in table form\n\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n\n\n\n(diamonds)\n\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   &lt;dbl&gt; &lt;ord&gt;     &lt;ord&gt; &lt;ord&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n\n\n\nglimpse(diamonds)\n\nRows: 53,940\nColumns: 10\n$ carat   &lt;dbl&gt; 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     &lt;ord&gt; Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   &lt;ord&gt; E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity &lt;ord&gt; SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   &lt;dbl&gt; 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   &lt;dbl&gt; 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   &lt;int&gt; 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       &lt;dbl&gt; 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       &lt;dbl&gt; 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       &lt;dbl&gt; 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n\n\n\ninspect(diamonds)\n\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n\n\n\n##\ngf_histogram(~price, data = diamonds) %&gt;%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n## More bins\ngf_histogram(~price,\n  data = diamonds,\n  bins = 100\n#Bins is basically the number of classes. Note that the Y Axis also changes because as we increase number of price classes, each class has a smaller price range. So the number of diamonds in each price range reduces.\n  \n) %&gt;%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\n##\ndiamonds %&gt;%\n  gf_histogram(~carat) %&gt;%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~carat,\n    bins = 100\n  ) %&gt;%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n\n\ngf_histogram(~price, fill = ~cut, data = diamonds) %&gt;%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, alpha = 1) %&gt;%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n\n\n\n\n\n\n\n##Alpha is the opacity\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut) %&gt;%\n  ## The wrap function just takes each category within the same variable (Categories like 'Fair','Good' from the Variable 'Cut') and makes a separate graph for each category. (Similar to the 'variable | variable' function, except that one uses multiple variables and this uses only one)\n  \n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n    #Gf_Labs is for altering the title & text\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n    ## Gf_theme is for altering the aesthetics\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust decides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %&gt;%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 4) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 2 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_facet_wrap(~cut, nrow = 2) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\ndiamonds %&gt;%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %&gt;%\n  gf_facet_wrap(~cut, nrow = 1) %&gt;%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %&gt;%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n\n\n\n\n\n\n\n\n\nrace_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nrank_df &lt;- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n(race_df)\n\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\n\n\nglimpse(race_df)\n\nRows: 1,207\nColumns: 13\n$ race_year_id   &lt;dbl&gt; 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          &lt;chr&gt; \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           &lt;chr&gt; \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           &lt;chr&gt; \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        &lt;chr&gt; \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           &lt;date&gt; 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     &lt;time&gt; 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  &lt;chr&gt; \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       &lt;dbl&gt; 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain &lt;dbl&gt; 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss &lt;dbl&gt; -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   &lt;dbl&gt; 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   &lt;dbl&gt; 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n\n\n\n(rank_df)\n\n# A tibble: 137,803 × 8\n   race_year_id  rank runner      time    age gender nationality time_in_seconds\n          &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;       &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;                 &lt;dbl&gt;\n 1        68140     1 VERHEUL Ja… 26H …    30 M      GBR                   95725\n 2        68140     2 MOULDING J… 27H …    43 M      GBR                   97229\n 3        68140     3 RICHARDSON… 28H …    38 M      GBR                  103747\n 4        68140     4 DYSON Fiona 30H …    55 W      GBR                  111217\n 5        68140     5 FRONTERAS … 32H …    48 W      GBR                  117981\n 6        68140     6 THOMAS Lei… 32H …    31 M      GBR                  118000\n 7        68140     7 SHORT Debo… 33H …    55 W      GBR                  120601\n 8        68140     8 CROSSLEY C… 33H …    40 W      GBR                  120803\n 9        68140     9 BUTCHER Ke… 34H …    47 M      GBR                  125656\n10        68140    10 Hendry Bill 34H …    29 M      GBR                  125979\n# ℹ 137,793 more rows\n\nglimpse(rank_df)\n\nRows: 137,803\nColumns: 8\n$ race_year_id    &lt;dbl&gt; 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          &lt;chr&gt; \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            &lt;chr&gt; \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             &lt;dbl&gt; 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          &lt;chr&gt; \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     &lt;chr&gt; \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds &lt;dbl&gt; 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n\n\n\nrace_df %&gt;%\n  favstats(~distance, data = .)\n\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n\n#Favstats gives common stats such as median & mode for that variable\n\n\n##\nrace_df %&gt;%\n  favstats(~participants, data = .)\n\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n\n\n\n##\nrank_df %&gt;% \n  drop_na() %&gt;% \n  favstats(time_in_seconds ~ gender, data = .)\n\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n\n\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %&gt;%\n  crosstable::as_flextable()\n\nlabelvariablegenderMWNAtime_in_secondsMin / Max3600.0 / 2.9e+059191.0 / 3.0e+058131.0 / 2.2e+05Med [IQR]1.2e+05 [9.7e+04;1.5e+05]1.1e+05 [9.7e+04;1.3e+05]1.2e+05 [9.9e+04;1.5e+05]Mean (std)1.2e+05 (3.8e+04)1.2e+05 (3.5e+04)1.2e+05 (4.4e+04)N (NA)101643 (15073)18341 (2716)28 (2)ageMin / Max0 / 133.00 / 81.029.0 / 59.0Med [IQR]47.0 [40.0;53.0]45.0 [39.0;52.0]40.5 [36.0;50.5]Mean (std)46.4 (10.2)45.3 (9.7)41.7 (9.0)N (NA)116716 (0)21057 (0)30 (0)\n\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n\n#So Crosstable is like Drop_na but you can have the stats as subrows under a variable row. I.E It compares subcategories of variables across stats (The variables on left side of tilde~ become rows & the subgroups under the variable on right side of tilde~ become columns), i.e. (Here Time & Age are variables on Y Axis & Stats as subrows. It has Gender as a primary column & M/F as subcolumns)\n\n#The Flex_table simply makes the table in a readable form\n\n\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) \n\n# A tibble: 8 × 6\n  .id             label           variable   M                       W     `NA` \n  &lt;chr&gt;           &lt;chr&gt;           &lt;chr&gt;      &lt;chr&gt;                   &lt;chr&gt; &lt;chr&gt;\n1 time_in_seconds time_in_seconds Min / Max  3600.0 / 2.9e+05        9191… 8131…\n2 time_in_seconds time_in_seconds Med [IQR]  1.2e+05 [9.7e+04;1.5e+… 1.1e… 1.2e…\n3 time_in_seconds time_in_seconds Mean (std) 1.2e+05 (3.8e+04)       1.2e… 1.2e…\n4 time_in_seconds time_in_seconds N (NA)     101643 (15073)          1834… 28 (…\n5 age             age             Min / Max  0 / 133.0               0 / … 29.0…\n6 age             age             Med [IQR]  47.0 [40.0;53.0]        45.0… 40.5…\n7 age             age             Mean (std) 46.4 (10.2)             45.3… 41.7…\n8 age             age             N (NA)     116716 (0)              2105… 30 (…\n\n#Without using the Flex_table command\n\n\n#Which countries host the maximum number of races? \n\nrace_df %&gt;%\n  count(country) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 61 × 2\n   country            n\n   &lt;chr&gt;          &lt;int&gt;\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n\n\n\n#Which countries send the maximum number of participants??\n\nrank_df %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 133 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n\n\n\n#Which countries have the maximum number of winners (top 3 ranks)?\n\nrank_df %&gt;%\n  filter(rank %in% c(1, 2, 3)) %&gt;%\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 69 × 2\n   nationality     n\n   &lt;chr&gt;       &lt;int&gt;\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n\n#Remember in c(i,j,k) , the 'c' combines the elements inside & treats it as a list. So then it checks if the rank is included in the whole list using the %in% command.\n\n\n#Which countries have had the most top-3 finishes in the longest distance race?\n\n#Here we see we have ranks in one dataset, and race details in another! How do we do this now? We have to JOIN the two data frames into one data frame, using a common variable that uniquely identifies observations in both datasets.\n\n\nlongest_races &lt;- race_df %&gt;%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt; &lt;chr&gt; &lt;chr&gt;   &lt;date&gt;     &lt;time&gt;     &lt;chr&gt;        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance &lt;dbl&gt;, elevation_gain &lt;dbl&gt;,\n#   elevation_loss &lt;dbl&gt;, aid_stations &lt;dbl&gt;, participants &lt;dbl&gt;\n\nlongest_races %&gt;%\n  left_join(., rank_df, by = \"race_year_id\") %&gt;% \n  # total participants in longest 4 races\n  \n  #The . on left side of ~ basically considers the 'aforementioned' dataset, which in this case is race_df. Since we already told it to consider race_df in longest_races, we don't have to specify the name race_df again.\n  \n  filter(rank %in% c(1:10)) %&gt;% # Top 10 ranks\n  count(nationality) %&gt;%\n  arrange(desc(n))\n\n# A tibble: 9 × 2\n  nationality     n\n  &lt;chr&gt;       &lt;int&gt;\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n\n#Join function connects both datasets, similar to SQL\n\n\n#Familiar Histogram\n#Bins is number of classes\n\nrank_df %&gt;%\n  gf_histogram(~time_in_seconds, bins = 75) %&gt;%\n  gf_labs(title = \"Histogram of Race Times\")\n\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n\n\n\n\n\n\n\n\n#Time 1e+05 seconds basically means \n\n\n#What is the distribution of race distances?\n\n\nrace_df %&gt;%\n  gf_histogram(~distance, bins = 50) %&gt;%\n  gf_labs(title = \"Histogram of Race Distances\")\n\n\n\n\n\n\n\n#The races with 0 distance were probably cancelled\n\n\n#For all races that have a distance around 150, what is the distribution of finishing times? Can these be split/facetted using start_time of the race (i.e. morning / evening) ?\n\n\n\nrace_times &lt;- race_df %&gt;%\n  count(start_time) %&gt;%\n  arrange(desc(n))\nrace_times\n\n# A tibble: 39 × 2\n   start_time     n\n   &lt;time&gt;     &lt;int&gt;\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n\n\n\n#Let’s convert start_time into a factor with levels: early_morning(0200:0600), late_morning(0600:1000), midday(1000:1400), afternoon(1400: 1800), evening(1800:2200), and night(2200:0200)\n\n\n\nrace_start_factor &lt;- race_df %&gt;%\n  filter(distance == 0) %&gt;% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time &gt; hms(\"02:00:00\") &\n          start_time &lt;= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time &gt; hms(\"06:00:01\") &\n          start_time &lt;= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time &gt; hms(\"10:00:01\") &\n          start_time &lt;= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time &gt; hms(\"14:00:01\") &\n          start_time &lt;= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time &gt; hms(\"18:00:01\") &\n          start_time &lt;= hms(\"22:00:00\") ~ \"evening\",\n        start_time &gt; hms(\"22:00:01\") &\n          start_time &lt;= hms(\"23:59:59\") ~ \"night\",\n        start_time &gt;= hms(\"00:00:00\") &\n          start_time &lt;= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %&gt;%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %&gt;%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%&gt;%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n\n##\n# Join with rank_df\nrace_start_factor %&gt;%\n  left_join(rank_df, by = \"race_year_id\") %&gt;%\n  drop_na(time_in_seconds) %&gt;%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %&gt;%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %&gt;%\n  gf_labs(title = \"Race Times by Start-Time\")\n\n\n\n\n\n\n\n#We see that finish times tend to be longer for afternoon and evening start races; these are lower for early morning and night time starts. Mid-day starts show a curious double hump in finish times that should be studied."
  },
  {
    "objectID": "posts/Trifolder/index.html#taxi-data-in-united-states",
    "href": "posts/Trifolder/index.html#taxi-data-in-united-states",
    "title": "Counting",
    "section": "Taxi Data in United States",
    "text": "Taxi Data in United States\n\ntaxi &lt;- read.csv(\"https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv\")\n\nhead(taxi)\n\n  rownames tip distance              company local dow month hour\n1        1 yes    17.19 Chicago Independents    no Thu   Feb   16\n2        2 yes     0.88         City Service   yes Thu   Mar    8\n3        3 yes    18.11                other    no Mon   Feb   18\n4        4 yes    20.70 Chicago Independents    no Mon   Apr    8\n5        5 yes    12.23 Chicago Independents    no Sun   Mar   21\n6        6 yes     0.94             Sun Taxi   yes Sat   Apr   23\n\n\n\ninspect(taxi)\n\n\ncategorical variables:  \n     name     class levels     n missing\n1     tip character      2 10000       0\n2 company character      7 10000       0\n3   local character      2 10000       0\n4     dow character      7 10000       0\n5   month character      4 10000       0\n                                   distribution\n1 yes (92.1%), no (7.9%)                       \n2 other (27.1%) ...                            \n3 no (81.2%), yes (18.8%)                      \n4 Thu (19.6%), Wed (17.5%), Tue (16.3%) ...    \n5 Apr (31.8%), Mar (31.4%), Feb (20.4%) ...    \n\nquantitative variables:  \n      name   class min      Q1  median        Q3     max        mean\n1 rownames integer   1 2500.75 5000.50 7500.2500 10000.0 5000.500000\n2 distance numeric   0    0.94    1.78   15.5625    42.3    6.224144\n3     hour integer   0   11.00   15.00   18.0000    23.0   14.177300\n           sd     n missing\n1 2886.895680 10000       0\n2    7.381397 10000       0\n3    4.359904 10000       0\n\n\n\nglimpse(taxi)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;chr&gt; \"no\", \"yes\", \"no\", \"no\", \"no\", \"yes\", \"no\", \"no\", \"no\", \"no\",…\n$ dow      &lt;chr&gt; \"Thu\", \"Thu\", \"Mon\", \"Mon\", \"Sun\", \"Sat\", \"Fri\", \"Sun\", \"Fri\"…\n$ month    &lt;chr&gt; \"Feb\", \"Mar\", \"Feb\", \"Apr\", \"Mar\", \"Apr\", \"Mar\", \"Jan\", \"Apr\"…\n$ hour     &lt;int&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\nskim(taxi)\n\n\nData summary\n\n\nName\ntaxi\n\n\nNumber of rows\n10000\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\nnumeric\n3\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\ntip\n0\n1\n2\n3\n0\n2\n0\n\n\ncompany\n0\n1\n5\n28\n0\n7\n0\n\n\nlocal\n0\n1\n2\n3\n0\n2\n0\n\n\ndow\n0\n1\n3\n3\n0\n7\n0\n\n\nmonth\n0\n1\n3\n3\n0\n4\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nrownames\n0\n1\n5000.50\n2886.90\n1\n2500.75\n5000.50\n7500.25\n10000.0\n▇▇▇▇▇\n\n\ndistance\n0\n1\n6.22\n7.38\n0\n0.94\n1.78\n15.56\n42.3\n▇▁▂▁▁\n\n\nhour\n0\n1\n14.18\n4.36\n0\n11.00\n15.00\n18.00\n23.0\n▁▃▅▇▃\n\n\n\n\n\n\nWe need to modify a few variables such as DoW, Local & Months into Factors so we can process them\n\ntaxi_modified &lt;- taxi %&gt;% \n  mutate(\n    dow= factor(dow,\n    levels= c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),\n    labels= c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"),          \n    ordered= TRUE\n    ),\n    \n    \n    local= factor(local,\n    levels= c(\"yes\",\"no\"),\n    labels= c(\"Yes\",\"No\"),\n    ordered= TRUE\n    ),\n    \n    month= factor(month,\n    levels= c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n    labels= c(\"Jan\", \"Feb\", \"Mar\", \"Apr\"),\n    ordered= TRUE\n    )\n  )\n\nglimpse(taxi_modified)\n\nRows: 10,000\nColumns: 8\n$ rownames &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18…\n$ tip      &lt;chr&gt; \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\", \"yes\"…\n$ distance &lt;dbl&gt; 17.19, 0.88, 18.11, 20.70, 12.23, 0.94, 17.47, 17.67, 1.85, 1…\n$ company  &lt;chr&gt; \"Chicago Independents\", \"City Service\", \"other\", \"Chicago Ind…\n$ local    &lt;ord&gt; No, Yes, No, No, No, Yes, No, No, No, No, No, No, No, Yes, No…\n$ dow      &lt;ord&gt; Thu, Thu, Mon, Mon, Sun, Sat, Fri, Sun, Fri, Tue, Tue, Sun, W…\n$ month    &lt;ord&gt; Feb, Mar, Feb, Apr, Mar, Apr, Mar, Jan, Apr, Mar, Mar, Apr, A…\n$ hour     &lt;int&gt; 16, 8, 18, 8, 21, 23, 12, 6, 12, 14, 18, 11, 12, 19, 17, 13, …\n\n\n\n\nNow Let’s Plot Stuff…\n\nCounting rides with or without a Tip:\n\ngf_bar(~ tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data from\n\n\n\nNow we have to check if the tips are local or not. So we are adding another variable to the graph, by changing the color…\n\ngf_bar(~ tip, color = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only. [Color= ~Variable_Name] Tells which variable to colorize\n\n#Gf labs is for altering text & titles\n\n\n\nDoes not look good, does it? Because the color command is only for outline. If we want to color the full bar, we use the ‘fill’ command…\n\ngf_bar(~ tip, fill = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nMuch Better!\n\n\nWhat if we want the data of all local rides & then see how much of them tipped? Let us try that.\n\ngf_bar(~ local, fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nAs you can see, we just put the ‘locality’ variable on X Axis. We can change graphs using these tools, if we have the right questions to ask.\n\n\nJust how many variables can we add to the graph? You can only use one on each axis, one for outline color & one for fill…\n\ngf_bar(~ dow, fill = ~tip, color = ~local, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#Here we have used Color & Fill both at the same time\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#gf_labs is for altering text & titles\n\n\n\nThat… is chaotic good.\n\n\nLet’s keep it simple and keep the Tips on X Axis and segregate the Locality by filled color. But I don’t what the color divided graphs on top of each other. How to shift them? We use the Dodge command;\n\ngf_bar(~ tip, fill = ~local,position=\"dodge\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command under position places colorized bar graphs beside each other instead of on top\n\n#gf_labs is for altering text & titles\n\n\n\nHow convenient.\n\n\nBut you might be thinking, what if I want to know actually how much of the tips are coming from local rides and how many outside? You want to know the proportion, not the actual numbers. For that, we can make bars the same size and then see the ratios. (Note that in this case, we cannot use the dodge command)\n\ngf_bar(~ tip, fill = ~local, position=\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top\n\n#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages\n\n##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION\n\n#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE\n#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE\n\n#gf_labs is for altering text & titles\n\n\n\nNow we can actually see that whenever the cab is tipped, it is more likely to be interstate & not local. And also, whenever it is not tipped, it is slightly more likely to be local. But this is not enough to conclude that local rides always have less tips.\n\n\nLet us now see proportions of tips according to taxi services.\n\ngf_bar(~ company, fill = ~tip, position=\"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nLooks like Chicago Independence is most tipped by proportion in general.\n\n\nHow about we factor in the hour of day?\n\ngf_bar(~hour , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nAccording to the graph, most tips happen in the afternoon & least at midnight. But this is because most rides happen in the afternoon! Let us see the proportions again.\n\ngf_bar(~hour , fill = ~tip,position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nWell well well. Looks like the highest proportion of tips actually occur when the driver & the taxi both burn midnight oil… People are more grateful for catching a ride at these hours.\n\n\nLooking at Tips by Month;\n\ngf_bar(~month , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nAgain, proportions;\n\ngf_bar(~month , fill = ~tip, position='fill', data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nEh, the proportions of Tips is basically same in all months of the first quadrimester of the year.\n\n\nNow, I want to see the number of tips on every day of every month separately:(E.g. Jan Mondays vs Feb Mondays)\n\ngf_bar(~month | dow , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)\n#The data on left side of tilde~ sign is data on x axis\n\n#When you put 2 variables after tilde~, [Var_1 | Var_2], it makes separate graphs based on Var_2 & each graph has Var_1 on X Axis\n\n#Data='Database_Name' tells it where to find data.\n\n#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize\n\n#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully\n#Fill & Color thus do same thing but for whole bar or only outline\n\n#The Position function decides position of bars\n#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top\n\n#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages\n\n##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION\n\n#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE\n#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE\n\n\n#gf_labs is for altering text & titles\n\n\n\nPerhaps if we wanted to see an average per month, we should sort the months according to that and put days on X-Axis instead?\n\ngf_bar(~dow | month , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts of Tips\")\n\n\n\n\n\n\n\n\n\n\nNow instead of months, let us separate it by Taxi Services\n\ngf_bar(~dow | company , fill = ~tip, data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips by Company & Day\")\n\n\n\n\n\n\n\n\n\n\nAnd now I want to see the actual number of taxi rides per day for each service and not the tips;\n\ngf_bar(~dow | company ,  data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts\")\n\n\n\n\n\n\n\n\n\n\nLooks like among the listed services, (not the Others) Taxi Affiliation Services have most rides on average in a week.\n\n\nWhat if switched variables on X-Axis & the graphs?\n\ngf_bar(~company | dow ,  data = taxi_modified) %&gt;%\n  gf_labs(title = \"Plot 1A: Counts\")\n\n\n\n\n\n\n\n\n\n\nWoops. While this data may be true, it might not be usually be required. Also it is PAINFUL to read.\n\n\nIf I want to see the proportion of Tips per Day & by Company?\n\ngf_bar(~dow | company , fill = ~tip, position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips Proportion by Company & Day\")\n\n\n\n\n\n\n\n\n\n\nFrom this, can we say that Sunday is most tipped day (proportion of tips to number of rides) for every service? Yeah.\n\n\nWould be a shame if someone switched the location of variables…\n\ngf_bar(~company | dow , fill = ~tip, position = \"fill\", data = taxi_modified) %&gt;%\n  gf_labs(title = \"Tips Proportion by Company & Day\")\n\n\n\n\n\n\n\n\n\n\n*Evil Laughter* Read the graph at your own risk.\n\n\n\n===================================================================="
  },
  {
    "objectID": "posts/Trifolder/index.html#now-onto-a-new-data-set",
    "href": "posts/Trifolder/index.html#now-onto-a-new-data-set",
    "title": "Counting",
    "section": "Now, onto a new data set:",
    "text": "Now, onto a new data set:"
  },
  {
    "objectID": "posts/Trifolder/index.html#chess",
    "href": "posts/Trifolder/index.html#chess",
    "title": "Counting",
    "section": "CHESS!",
    "text": "CHESS!\n\nchesso &lt;- read_delim(file = '../../datasets/openings.csv', delim = ',')\n\nNew names:\nRows: 1884 Columns: 26\n── Column specification\n──────────────────────────────────────────────────────── Delimiter: \",\" chr\n(13): Opening, Colour, ECO, Moves, moves_list, move1w, move1b, move2w, ... dbl\n(12): ...1, Num Games, Perf Rating, Avg Player, Player Win %, Draw %, O... date\n(1): Last Played\nℹ Use `spec()` to retrieve the full column specification for this data. ℹ\nSpecify the column types or set `show_col_types = FALSE` to quiet this message.\n• `` -&gt; `...1`\n\nchesso\n\n# A tibble: 1,884 × 26\n    ...1 Opening            Colour `Num Games` ECO   `Last Played` `Perf Rating`\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;\n 1     0 Alekhine Defense,… white          692 B03   2018-06-22             2247\n 2     1 Alekhine Defense,… black          228 B02   2018-06-27             2145\n 3     2 Alekhine Defense,… white         6485 B03   2018-07-06             2244\n 4     3 Alekhine Defense,… white          881 B03   2018-06-20             2187\n 5     4 Alekhine Defense,… black          259 B03   2018-05-20             2122\n 6     5 Alekhine Defense,… white         1207 B03   2018-07-01             2243\n 7     6 Alekhine Defense,… black          323 B03   2018-05-10             2231\n 8     7 Alekhine Defense,… black          524 B02   2018-06-29             2032\n 9     8 Alekhine Defense,… white          334 B02   2018-06-27             2205\n10     9 Alekhine Defense,… white          931 B02   2018-07-09             2174\n# ℹ 1,874 more rows\n# ℹ 19 more variables: `Avg Player` &lt;dbl&gt;, `Player Win %` &lt;dbl&gt;,\n#   `Draw %` &lt;dbl&gt;, `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;,\n#   move1w &lt;chr&gt;, move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;,\n#   move3b &lt;chr&gt;, move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;,\n#   `Black_win%` &lt;dbl&gt;, White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\nnames(chesso)\n\n [1] \"...1\"           \"Opening\"        \"Colour\"         \"Num Games\"     \n [5] \"ECO\"            \"Last Played\"    \"Perf Rating\"    \"Avg Player\"    \n [9] \"Player Win %\"   \"Draw %\"         \"Opponent Win %\" \"Moves\"         \n[13] \"moves_list\"     \"move1w\"         \"move1b\"         \"move2w\"        \n[17] \"move2b\"         \"move3w\"         \"move3b\"         \"move4w\"        \n[21] \"move4b\"         \"White_win%\"     \"Black_win%\"     \"White_odds\"    \n[25] \"White_Wins\"     \"Black_Wins\"    \n\n\n\nRemoving the blank column & glimpsing the database…\n\nchesso_modified &lt;-chesso %&gt;% \n  select(-1)\nchesso_modified\n\n# A tibble: 1,884 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Alekhine D… white          692 B03   2018-06-22             2247         2225\n 2 Alekhine D… black          228 B02   2018-06-27             2145         2193\n 3 Alekhine D… white         6485 B03   2018-07-06             2244         2194\n 4 Alekhine D… white          881 B03   2018-06-20             2187         2130\n 5 Alekhine D… black          259 B03   2018-05-20             2122         2178\n 6 Alekhine D… white         1207 B03   2018-07-01             2243         2190\n 7 Alekhine D… black          323 B03   2018-05-10             2231         2277\n 8 Alekhine D… black          524 B02   2018-06-29             2032         2077\n 9 Alekhine D… white          334 B02   2018-06-27             2205         2178\n10 Alekhine D… white          931 B02   2018-07-09             2174         2174\n# ℹ 1,874 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\nglimpse(chesso_modified)\n\nRows: 1,884\nColumns: 25\n$ Opening          &lt;chr&gt; \"Alekhine Defense, Balogh Variation\", \"Alekhine Defen…\n$ Colour           &lt;chr&gt; \"white\", \"black\", \"white\", \"white\", \"black\", \"white\",…\n$ `Num Games`      &lt;dbl&gt; 692, 228, 6485, 881, 259, 1207, 323, 524, 334, 931, 5…\n$ ECO              &lt;chr&gt; \"B03\", \"B02\", \"B03\", \"B03\", \"B03\", \"B03\", \"B03\", \"B02…\n$ `Last Played`    &lt;date&gt; 2018-06-22, 2018-06-27, 2018-07-06, 2018-06-20, 2018…\n$ `Perf Rating`    &lt;dbl&gt; 2247, 2145, 2244, 2187, 2122, 2243, 2231, 2032, 2205,…\n$ `Avg Player`     &lt;dbl&gt; 2225, 2193, 2194, 2130, 2178, 2190, 2277, 2077, 2178,…\n$ `Player Win %`   &lt;dbl&gt; 40.8, 29.8, 40.8, 39.7, 37.8, 41.0, 35.9, 42.2, 34.1,…\n$ `Draw %`         &lt;dbl&gt; 24.3, 22.4, 27.7, 23.2, 21.2, 25.9, 24.8, 25.0, 23.6,…\n$ `Opponent Win %` &lt;dbl&gt; 35.0, 47.8, 31.5, 37.1, 40.9, 33.1, 39.3, 32.8, 42.2,…\n$ Moves            &lt;chr&gt; \"1.e4 Nf6 2.e5 Nd5 3.d4 d6 4.Bc4\", \"1.e4 Nf6 2.e5 Ng8…\n$ moves_list       &lt;chr&gt; \"['1.e4', 'Nf6', '2.e5', 'Nd5', '3.d4', 'd6', '4.Bc4'…\n$ move1w           &lt;chr&gt; \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\", \"e4\",…\n$ move1b           &lt;chr&gt; \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6\", \"Nf6…\n$ move2w           &lt;chr&gt; \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", \"e5\", NA, \"e5\", \"…\n$ move2b           &lt;chr&gt; \"Nd5\", \"Ng8\", \"Nd5\", \"Nd5\", \"Nd5\", \"Nd5\", \"Nd5\", NA, …\n$ move3w           &lt;chr&gt; \"d4\", NA, \"d4\", \"d4\", \"d4\", \"d4\", \"d4\", NA, \"c4\", NA,…\n$ move3b           &lt;chr&gt; \"d6\", NA, \"d6\", \"d6\", \"d6\", \"d6\", \"d6\", NA, \"Nb6\", NA…\n$ move4w           &lt;chr&gt; \"Bc4\", NA, \"c4\", \"c4\", \"c4\", \"c4\", \"c4\", NA, \"c5\", NA…\n$ move4b           &lt;chr&gt; NA, NA, \"Nb6\", \"Nb6\", \"Nb6\", \"Nb6\", \"Nb6\", NA, \"Nd5\",…\n$ `White_win%`     &lt;dbl&gt; 40.8, 47.8, 40.8, 39.7, 40.9, 41.0, 39.3, 32.8, 34.1,…\n$ `Black_win%`     &lt;dbl&gt; 35.0, 29.8, 31.5, 37.1, 37.8, 33.1, 35.9, 42.2, 42.2,…\n$ White_odds       &lt;dbl&gt; 1.1657143, 1.6040268, 1.2952381, 1.0700809, 1.0820106…\n$ White_Wins       &lt;dbl&gt; 282.336, 108.984, 2645.880, 349.757, 105.931, 494.870…\n$ Black_Wins       &lt;dbl&gt; 242.200, 67.944, 2042.775, 326.851, 97.902, 399.517, …\n\n\n\ninspect(chesso_modified)\n\n\ncategorical variables:  \n         name     class levels    n missing\n1     Opening character   1755 1884       0\n2      Colour character      2 1884       0\n3         ECO character    493 1884       0\n4       Moves character   1884 1884       0\n5  moves_list character   1884 1884       0\n6      move1w character     17 1884       0\n7      move1b character     13 1869      15\n8      move2w character     31 1814      70\n9      move2b character     41 1744     140\n10     move3w character     43 1628     256\n11     move3b character     61 1501     383\n12     move4w character     67 1340     544\n13     move4b character     81 1186     698\n                                    distribution\n1   (%) ...                                     \n2  black (52.7%), white (47.3%)                 \n3  A00 (1.8%), B00 (1.2%), B01 (1.2%) ...       \n4  1.00E+03 (0.1%), 1.00E+04 (0.1%) ...         \n5  ['1.00E+03'] (0.1%) ...                      \n6  e4 (50.4%), d4 (39%), c4 (5.5%) ...          \n7  Nf6 (24.4%), e5 (22.8%), d5 (17.8%) ...      \n8  c4 (35.3%), Nf3 (33.1%), d4 (13.2%) ...      \n9  Nc6 (19.4%), e6 (19.2%), d5 (11.6%) ...      \n10 Nc3 (32.3%), d4 (16.1%), Nf3 (11.3%) ...     \n11 Nf6 (20%), cxd4 (11.4%), a6 (6.8%) ...       \n12 Nxd4 (13.7%), Nf3 (12.8%), Nc3 (6.6%) ...    \n13 Nf6 (20.6%), d6 (9.3%), Bg7 (7.3%) ...       \n\nDate variables:  \n         name class      first       last min_diff  max_diff    n missing\n1 Last Played  Date 2010-04-10 2018-07-09   0 days 1799 days 1884       0\n\nquantitative variables:  \n             name   class         min          Q1      median          Q3\n1       Num Games numeric  100.000000  314.750000  788.500000 2225.000000\n2     Perf Rating numeric 1583.000000 2157.000000 2252.500000 2329.000000\n3      Avg Player numeric 1577.000000 2166.000000 2255.000000 2326.000000\n4    Player Win % numeric    7.500000   28.900000   35.100000   41.125000\n5          Draw % numeric    4.000000   24.500000   29.400000   34.625000\n6  Opponent Win % numeric    6.700000   28.900000   34.650000   40.525000\n7      White_win% numeric   13.600000   34.800000   39.100000   44.000000\n8      Black_win% numeric    6.700000   25.100000   29.900000   35.000000\n9      White_odds numeric    0.308642    1.037277    1.325008    1.674116\n10     White_Wins numeric   21.000000  124.740500  310.274000  824.243000\n11     Black_Wins numeric    8.946000   91.026250  230.952000  651.262750\n            max        mean           sd    n missing\n1  22482.000000 1846.019108 2739.1034624 1884       0\n2   2536.000000 2235.945860  135.2603918 1884       0\n3   2492.000000 2236.531847  127.7237108 1884       0\n4     77.600000   35.159395    9.0771393 1884       0\n5     68.500000   29.914066    8.0430433 1884       0\n6     77.500000   34.928715    9.1804503 1884       0\n7     77.600000   39.745701    7.6711076 1884       0\n8     64.800000   30.342410    7.9763046 1884       0\n9      9.810127    1.448725    0.6739913 1884       0\n10  8295.858000  708.835970 1037.0276692 1884       0\n11  8700.534000  557.051955  866.7888314 1884       0\n\n\n\nskim(chesso_modified)\n\n\nData summary\n\n\nName\nchesso_modified\n\n\nNumber of rows\n1884\n\n\nNumber of columns\n25\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n13\n\n\nDate\n1\n\n\nnumeric\n11\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nOpening\n0\n1.00\n11\n90\n0\n1755\n0\n\n\nColour\n0\n1.00\n5\n5\n0\n2\n0\n\n\nECO\n0\n1.00\n3\n6\n0\n493\n0\n\n\nMoves\n0\n1.00\n4\n143\n0\n1884\n0\n\n\nmoves_list\n0\n1.00\n8\n225\n0\n1884\n0\n\n\nmove1w\n0\n1.00\n2\n6\n0\n17\n0\n\n\nmove1b\n15\n0.99\n2\n3\n0\n13\n0\n\n\nmove2w\n70\n0.96\n2\n4\n0\n31\n0\n\n\nmove2b\n140\n0.93\n2\n4\n0\n41\n0\n\n\nmove3w\n256\n0.86\n2\n4\n0\n43\n0\n\n\nmove3b\n383\n0.80\n2\n4\n0\n61\n0\n\n\nmove4w\n544\n0.71\n2\n5\n0\n67\n0\n\n\nmove4b\n698\n0.63\n2\n5\n0\n81\n0\n\n\n\nVariable type: Date\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nmedian\nn_unique\n\n\n\n\nLast Played\n0\n1\n2010-04-10\n2018-07-09\n2018-06-29\n195\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nNum Games\n0\n1\n1846.02\n2739.10\n100.00\n314.75\n788.50\n2225.00\n22482.00\n▇▁▁▁▁\n\n\nPerf Rating\n0\n1\n2235.95\n135.26\n1583.00\n2157.00\n2252.50\n2329.00\n2536.00\n▁▁▃▇▃\n\n\nAvg Player\n0\n1\n2236.53\n127.72\n1577.00\n2166.00\n2255.00\n2326.00\n2492.00\n▁▁▂▇▅\n\n\nPlayer Win %\n0\n1\n35.16\n9.08\n7.50\n28.90\n35.10\n41.12\n77.60\n▁▇▇▁▁\n\n\nDraw %\n0\n1\n29.91\n8.04\n4.00\n24.50\n29.40\n34.62\n68.50\n▁▇▇▁▁\n\n\nOpponent Win %\n0\n1\n34.93\n9.18\n6.70\n28.90\n34.65\n40.52\n77.50\n▁▇▇▁▁\n\n\nWhite_win%\n0\n1\n39.75\n7.67\n13.60\n34.80\n39.10\n44.00\n77.60\n▁▇▇▁▁\n\n\nBlack_win%\n0\n1\n30.34\n7.98\n6.70\n25.10\n29.90\n35.00\n64.80\n▁▇▇▁▁\n\n\nWhite_odds\n0\n1\n1.45\n0.67\n0.31\n1.04\n1.33\n1.67\n9.81\n▇▁▁▁▁\n\n\nWhite_Wins\n0\n1\n708.84\n1037.03\n21.00\n124.74\n310.27\n824.24\n8295.86\n▇▁▁▁▁\n\n\nBlack_Wins\n0\n1\n557.05\n866.79\n8.95\n91.03\n230.95\n651.26\n8700.53\n▇▁▁▁▁\n\n\n\n\n\n\n\nNow, I want to find all the variations of a particular opening. So I will have to filter the rows which contain that name in the Opening column, but it is not their entire name. How to do that??\n\n## HOW TO FILTER OPENINGS WHICH INCLUDE A SPECIFIC NAME BUT NOT WHOLE NAME IS SAME?\n## E.g. ALL OPENING VARIATIONS WITH WORDS 'NIMZO-INDIAN' IN THEM? \n\n#chesso_modified %&gt;% filter(dplyr::contains(vars = Opening, \"Nimzo-Indian Defense\"))\n#This does not work\n\n\n#chesso_modified %&gt;% select(contains('Nimzo-Indian Defense'))\n#This does not work\n\n\nchesso_modified %&gt;% filter(grepl('Nimzo-Indian Defense', Opening))\n\n# A tibble: 66 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Nimzo-Indi… white         9585 E32   2018-07-08             2352         2311\n 2 Nimzo-Indi… black         4205 E38   2018-07-09             2246         2286\n 3 Nimzo-Indi… white          380 E39   2018-06-26             2521         2475\n 4 Nimzo-Indi… black         4742 E32   2018-07-08             2380         2411\n 5 Nimzo-Indi… black         1913 E39   2018-06-20             2358         2381\n 6 Nimzo-Indi… black         1483 E33   2018-07-09             2293         2327\n 7 Nimzo-Indi… black         2253 E34   2018-07-08             2291         2328\n 8 Nimzo-Indi… white          696 E37   2018-07-05             2475         2407\n 9 Nimzo-Indi… white          760 E36   2018-07-05             2389         2350\n10 Nimzo-Indi… black          924 E35   2018-07-08             2415         2466\n# ℹ 56 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN\n\n\n\nThere we go! We can also create a mini database which contain all variations of the Vienna Opening:\n\n\n\nVienna Opening\n\n\n\nchesso_vienna &lt;- chesso_modified %&gt;% filter(grepl('Vienna Game', Opening))\n\n#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN\n\n(chesso_vienna) #Database of all variations under the Vienna Game\n\n# A tibble: 21 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Vienna Gam… black          835 C25   2018-07-09             2167         2195\n 2 Vienna Gam… black          188 C26   2018-07-01             2102         2053\n 3 Vienna Gam… white          846 C27   2018-04-29             2154         2104\n 4 Vienna Gam… white         2821 C26   2018-07-08             2293         2267\n 5 Vienna Gam… white          133 C25   2018-07-07             2219         2154\n 6 Vienna Gam… white         1012 C25   2018-07-03             2273         2228\n 7 Vienna Gam… white          527 C26   2018-06-21             2053         2008\n 8 Vienna Gam… white          100 C27   2018-03-02             2258         2231\n 9 Vienna Gam… black          124 C27   2018-04-02             2206         2243\n10 Vienna Gam… black          201 C27   2018-06-30             2103         2076\n# ℹ 11 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\n\nWhich variation of Vienna is played the most?\n\nchesso_vienna %&gt;% arrange(desc(`Num Games`))\n\n# A tibble: 21 × 25\n   Opening     Colour `Num Games` ECO   `Last Played` `Perf Rating` `Avg Player`\n   &lt;chr&gt;       &lt;chr&gt;        &lt;dbl&gt; &lt;chr&gt; &lt;date&gt;                &lt;dbl&gt;        &lt;dbl&gt;\n 1 Vienna Gam… white         2821 C26   2018-07-08             2293         2267\n 2 Vienna Gam… white         1012 C25   2018-07-03             2273         2228\n 3 Vienna Gam… black          865 C29   2018-07-09             2179         2193\n 4 Vienna Gam… white          846 C27   2018-04-29             2154         2104\n 5 Vienna Gam… black          835 C25   2018-07-09             2167         2195\n 6 Vienna Gam… white          671 C28   2018-07-02             1999         1941\n 7 Vienna Gam… black          546 C29   2018-07-06             2235         2259\n 8 Vienna Gam… white          527 C26   2018-06-21             2053         2008\n 9 Vienna Gam… white          523 C29   2018-07-01             2189         2159\n10 Vienna Gam… black          327 C26   2018-05-08             2132         2156\n# ℹ 11 more rows\n# ℹ 18 more variables: `Player Win %` &lt;dbl&gt;, `Draw %` &lt;dbl&gt;,\n#   `Opponent Win %` &lt;dbl&gt;, Moves &lt;chr&gt;, moves_list &lt;chr&gt;, move1w &lt;chr&gt;,\n#   move1b &lt;chr&gt;, move2w &lt;chr&gt;, move2b &lt;chr&gt;, move3w &lt;chr&gt;, move3b &lt;chr&gt;,\n#   move4w &lt;chr&gt;, move4b &lt;chr&gt;, `White_win%` &lt;dbl&gt;, `Black_win%` &lt;dbl&gt;,\n#   White_odds &lt;dbl&gt;, White_Wins &lt;dbl&gt;, Black_Wins &lt;dbl&gt;\n\n\n\n\nSo apparently the Mieses- Falkbeer Variation is played most often among all Vienna Games:\n\n\n\nVienna Game Mieses, Falkbeer Variation\n\n\n\n\nLet’s plot the Opening v/s Number of Games Bar Graph…\n\n#chesso_vienna %&gt;%\n  #gf_histogram( ~ `Num Games` , fill = ~ Colour) %&gt;%\n # gf_labs(\n  #  title = \"Openings\",\n  #  caption = \"Vienna\"\n # )\n\n#This code does not give desired result\n\n\n#chesso_vienna %&gt;% \n # gf_line(Opening ~ `Num Games`)\n\n#This code does not give desired result\n\n\n  #gf_bar( Opening ~ 'Num Games', data = chesso_vienna)\n\n  #This code does not give desired result\n\n\nlibrary(ggplot2)\n\n# Assuming 'chesso_vienna' has a column 'Opening' for opening names and 'Num_Games' for the number of games\nggplot(chesso_vienna, aes(x = Opening, y = `Num Games`)) +\n  geom_bar(stat = \"identity\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels if needed\n  labs(x = \"Opening Names\", y = \"Number of Games\", title = \"Number of Games per Opening\")\n\n\n\n\n\n\n\n#I used ChatGPT to write this code as I could not figure it myself after numerous tries\n\n\n\nFinally! We have got the information of all openings vs the amount of times they were played."
  }
]