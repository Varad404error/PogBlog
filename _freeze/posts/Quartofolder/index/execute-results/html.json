{
  "hash": "3b31ca9010ff4d6c3107464c2806ca1f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quant\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(mosaic)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 method overwritten by 'mosaic':\n  method                           from   \n  fortify.SpatialPolygonsDataFrame ggplot2\n\nThe 'mosaic' package masks several functions from core packages in order to add \nadditional features.  The original behavior of these functions should not be affected by this.\n\nAttaching package: 'mosaic'\n\nThe following object is masked from 'package:Matrix':\n\n    mean\n\nThe following objects are masked from 'package:dplyr':\n\n    count, do, tally\n\nThe following object is masked from 'package:purrr':\n\n    cross\n\nThe following object is masked from 'package:ggplot2':\n\n    stat\n\nThe following objects are masked from 'package:stats':\n\n    binom.test, cor, cor.test, cov, fivenum, IQR, median, prop.test,\n    quantile, sd, t.test, var\n\nThe following objects are masked from 'package:base':\n\n    max, mean, min, prod, range, sample, sum\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(ggformula)\nlibrary(skimr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'skimr'\n\nThe following object is masked from 'package:mosaic':\n\n    n_missing\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(crosstable) # Fast stats for multiple variables in table form\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'crosstable'\n\nThe following object is masked from 'package:purrr':\n\n    compact\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 53,940 × 10\n   carat cut       color clarity depth table price     x     y     z\n   <dbl> <ord>     <ord> <ord>   <dbl> <dbl> <int> <dbl> <dbl> <dbl>\n 1  0.23 Ideal     E     SI2      61.5    55   326  3.95  3.98  2.43\n 2  0.21 Premium   E     SI1      59.8    61   326  3.89  3.84  2.31\n 3  0.23 Good      E     VS1      56.9    65   327  4.05  4.07  2.31\n 4  0.29 Premium   I     VS2      62.4    58   334  4.2   4.23  2.63\n 5  0.31 Good      J     SI2      63.3    58   335  4.34  4.35  2.75\n 6  0.24 Very Good J     VVS2     62.8    57   336  3.94  3.96  2.48\n 7  0.24 Very Good I     VVS1     62.3    57   336  3.95  3.98  2.47\n 8  0.26 Very Good H     SI1      61.9    55   337  4.07  4.11  2.53\n 9  0.22 Fair      E     VS2      65.1    61   337  3.87  3.78  2.49\n10  0.23 Very Good H     VS1      59.4    61   338  4     4.05  2.39\n# ℹ 53,930 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 53,940\nColumns: 10\n$ carat   <dbl> 0.23, 0.21, 0.23, 0.29, 0.31, 0.24, 0.24, 0.26, 0.22, 0.23, 0.…\n$ cut     <ord> Ideal, Premium, Good, Premium, Good, Very Good, Very Good, Ver…\n$ color   <ord> E, E, E, I, J, J, I, H, E, H, J, J, F, J, E, E, I, J, J, J, I,…\n$ clarity <ord> SI2, SI1, VS1, VS2, SI2, VVS2, VVS1, SI1, VS2, VS1, SI1, VS1, …\n$ depth   <dbl> 61.5, 59.8, 56.9, 62.4, 63.3, 62.8, 62.3, 61.9, 65.1, 59.4, 64…\n$ table   <dbl> 55, 61, 65, 58, 58, 57, 57, 55, 61, 61, 55, 56, 61, 54, 62, 58…\n$ price   <int> 326, 326, 327, 334, 335, 336, 336, 337, 337, 338, 339, 340, 34…\n$ x       <dbl> 3.95, 3.89, 4.05, 4.20, 4.34, 3.94, 3.95, 4.07, 3.87, 4.00, 4.…\n$ y       <dbl> 3.98, 3.84, 4.07, 4.23, 4.35, 3.96, 3.98, 4.11, 3.78, 4.05, 4.…\n$ z       <dbl> 2.43, 2.31, 2.31, 2.63, 2.75, 2.48, 2.47, 2.53, 2.49, 2.39, 2.…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninspect(diamonds)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ncategorical variables:  \n     name   class levels     n missing\n1     cut ordered      5 53940       0\n2   color ordered      7 53940       0\n3 clarity ordered      8 53940       0\n                                   distribution\n1 Ideal (40%), Premium (25.6%) ...             \n2 G (20.9%), E (18.2%), F (17.7%) ...          \n3 SI1 (24.2%), VS2 (22.7%), SI2 (17%) ...      \n\nquantitative variables:  \n   name   class   min     Q1  median      Q3      max         mean           sd\n1 carat numeric   0.2   0.40    0.70    1.04     5.01    0.7979397    0.4740112\n2 depth numeric  43.0  61.00   61.80   62.50    79.00   61.7494049    1.4326213\n3 table numeric  43.0  56.00   57.00   59.00    95.00   57.4571839    2.2344906\n4 price integer 326.0 950.00 2401.00 5324.25 18823.00 3932.7997219 3989.4397381\n5     x numeric   0.0   4.71    5.70    6.54    10.74    5.7311572    1.1217607\n6     y numeric   0.0   4.72    5.71    6.54    58.90    5.7345260    1.1421347\n7     z numeric   0.0   2.91    3.53    4.04    31.80    3.5387338    0.7056988\n      n missing\n1 53940       0\n2 53940       0\n3 53940       0\n4 53940       0\n5 53940       0\n6 53940       0\n7 53940       0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\ngf_histogram(~price, data = diamonds) %>%\n  gf_labs(\n    title = \"Plot 1A: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## More bins\ngf_histogram(~price,\n  data = diamonds,\n  bins = 100\n#Bins is basically the number of classes. Note that the Y Axis also changes because as we increase number of price classes, each class has a smaller price range. So the number of diamonds in each price range reduces.\n  \n) %>%\n  gf_labs(\n    title = \"Plot 1B: Diamond Prices\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\ndiamonds %>%\n  gf_histogram(~carat) %>%\n  gf_labs(\n    title = \"Plot 2A: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~carat,\n    bins = 100\n  ) %>%\n  gf_labs(\n    title = \"Plot 2B: Carats of Diamonds\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngf_histogram(~price, fill = ~cut, data = diamonds) %>%\n  gf_labs(title = \"Plot 3A: Diamond Prices\", caption = \"ggformula\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\n##Alpha is the opacity\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %>%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n##Alpha is the opacity\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, alpha = 1) %>%\n  gf_labs(\n    title = \"Plot 3B: Prices by Cut\",\n    caption = \"ggformula\"\n  )\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n\n```{.r .cell-code}\n##Alpha is the opacity\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut) %>%\n  ## The wrap function just takes each category within the same variable (Categories like 'Fair','Good' from the Variable 'Cut') and makes a separate graph for each category. (Similar to the 'variable | variable' function, except that one uses multiple variables and this uses only one)\n  \n  gf_labs(\n    title = \"Plot 3C: Prices by Filled and Facetted by Cut\",\n    caption = \"ggformula\"\n    #Gf_Labs is for altering the title & text\n  ) %>%\n  gf_theme(theme(\n    axis.text.x = element_text(\n      angle = 45,\n      hjust = 1\n    )\n    ## Gf_theme is for altering the aesthetics\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 2) %>%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 0.3) %>%\n  gf_facet_wrap(~cut, scales = \"free_y\", nrow = 4) %>%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 2 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %>%\n  gf_facet_wrap(~cut, nrow = 2) %>%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>%\n  gf_histogram(~price, fill = ~cut, color = \"black\", alpha = 1) %>%\n  gf_facet_wrap(~cut, nrow = 1) %>%\n  #nrow basically changes the distance between points on Y axis (Scale on Y axis)\n  #free_y basically keeps the same scale on Y axis for all graphs\n  \n  gf_labs(\n    title = \"Plot 3D: Prices Filled and Facetted by Cut\",\n    subtitle = \"Free y-scale\",\n    caption = \"ggformula\"\n  ) %>%\n  gf_theme(theme(\n    axis.text.x =\n      element_text(\n        angle = 45, \n        hjust = 1 \n#Angle just tilts variable names on X axis    \n# Hjust ecides the location of variable names on X axis (Above or below the graph)\n      )\n  ))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/race.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 1207 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (5): event, race, city, country, participation\ndbl  (6): race_year_id, distance, elevation_gain, elevation_loss, aid_statio...\ndate (1): date\ntime (1): start_time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nrank_df <- read_csv(\"https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-10-26/ultra_rankings.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 137803 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): runner, time, gender, nationality\ndbl (4): race_year_id, rank, age, time_in_seconds\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\n(race_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,207 × 13\n   race_year_id event    race  city  country date       start_time participation\n          <dbl> <chr>    <chr> <chr> <chr>   <date>     <time>     <chr>        \n 1        68140 Peak Di… Mill… Cast… United… 2021-09-03 19:00      solo         \n 2        72496 UTMB®    UTMB® Cham… France  2021-08-27 17:00      Solo         \n 3        69855 Grand R… Ultr… viel… France  2021-08-20 05:00      solo         \n 4        67856 Persenk… PERS… Asen… Bulgar… 2021-08-20 18:00      solo         \n 5        70469 Runfire… 100 … uluk… Turkey  2021-08-20 18:00      solo         \n 6        66887 Swiss A… 160KM Müns… Switze… 2021-08-15 17:00      solo         \n 7        67851 Salomon… Salo… Foll… Norway  2021-08-14 07:00      solo         \n 8        68241 Ultra T… 160KM Spa   Belgium 2021-08-14 07:00      solo         \n 9        70241 Québec … QMT-… Beau… Canada  2021-08-13 22:00      solo         \n10        69945 Bunketo… BBUT… LIND… Sweden  2021-08-07 10:00      solo         \n# ℹ 1,197 more rows\n# ℹ 5 more variables: distance <dbl>, elevation_gain <dbl>,\n#   elevation_loss <dbl>, aid_stations <dbl>, participants <dbl>\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(race_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,207\nColumns: 13\n$ race_year_id   <dbl> 68140, 72496, 69855, 67856, 70469, 66887, 67851, 68241,…\n$ event          <chr> \"Peak District Ultras\", \"UTMB®\", \"Grand Raid des Pyréné…\n$ race           <chr> \"Millstone 100\", \"UTMB®\", \"Ultra Tour 160\", \"PERSENK UL…\n$ city           <chr> \"Castleton\", \"Chamonix\", \"vielle-Aure\", \"Asenovgrad\", \"…\n$ country        <chr> \"United Kingdom\", \"France\", \"France\", \"Bulgaria\", \"Turk…\n$ date           <date> 2021-09-03, 2021-08-27, 2021-08-20, 2021-08-20, 2021-0…\n$ start_time     <time> 19:00:00, 17:00:00, 05:00:00, 18:00:00, 18:00:00, 17:0…\n$ participation  <chr> \"solo\", \"Solo\", \"solo\", \"solo\", \"solo\", \"solo\", \"solo\",…\n$ distance       <dbl> 166.9, 170.7, 167.0, 164.0, 159.9, 159.9, 163.8, 163.9,…\n$ elevation_gain <dbl> 4520, 9930, 9980, 7490, 100, 9850, 5460, 4630, 6410, 31…\n$ elevation_loss <dbl> -4520, -9930, -9980, -7500, -100, -9850, -5460, -4660, …\n$ aid_stations   <dbl> 10, 11, 13, 13, 12, 15, 5, 8, 13, 23, 13, 5, 12, 15, 0,…\n$ participants   <dbl> 150, 2300, 600, 150, 0, 300, 0, 200, 120, 100, 300, 50,…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n(rank_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 137,803 × 8\n   race_year_id  rank runner      time    age gender nationality time_in_seconds\n          <dbl> <dbl> <chr>       <chr> <dbl> <chr>  <chr>                 <dbl>\n 1        68140     1 VERHEUL Ja… 26H …    30 M      GBR                   95725\n 2        68140     2 MOULDING J… 27H …    43 M      GBR                   97229\n 3        68140     3 RICHARDSON… 28H …    38 M      GBR                  103747\n 4        68140     4 DYSON Fiona 30H …    55 W      GBR                  111217\n 5        68140     5 FRONTERAS … 32H …    48 W      GBR                  117981\n 6        68140     6 THOMAS Lei… 32H …    31 M      GBR                  118000\n 7        68140     7 SHORT Debo… 33H …    55 W      GBR                  120601\n 8        68140     8 CROSSLEY C… 33H …    40 W      GBR                  120803\n 9        68140     9 BUTCHER Ke… 34H …    47 M      GBR                  125656\n10        68140    10 Hendry Bill 34H …    29 M      GBR                  125979\n# ℹ 137,793 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(rank_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 137,803\nColumns: 8\n$ race_year_id    <dbl> 68140, 68140, 68140, 68140, 68140, 68140, 68140, 68140…\n$ rank            <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, NA, NA, NA,…\n$ runner          <chr> \"VERHEUL Jasper\", \"MOULDING JON\", \"RICHARDSON Phill\", …\n$ time            <chr> \"26H 35M 25S\", \"27H 0M 29S\", \"28H 49M 7S\", \"30H 53M 37…\n$ age             <dbl> 30, 43, 38, 55, 48, 31, 55, 40, 47, 29, 48, 47, 52, 49…\n$ gender          <chr> \"M\", \"M\", \"M\", \"W\", \"W\", \"M\", \"W\", \"W\", \"M\", \"M\", \"M\",…\n$ nationality     <chr> \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\", \"GBR\"…\n$ time_in_seconds <dbl> 95725, 97229, 103747, 111217, 117981, 118000, 120601, …\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrace_df %>%\n  favstats(~distance, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n min    Q1 median     Q3   max     mean       sd    n missing\n   0 160.1  161.5 165.15 179.1 152.6187 39.87864 1207       0\n```\n\n\n:::\n\n```{.r .cell-code}\n#Favstats gives common stats such as median & mode for that variable\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\nrace_df %>%\n  favstats(~participants, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n min Q1 median  Q3  max     mean       sd    n missing\n   0  0     21 150 2900 120.4872 281.8337 1207       0\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n##\nrank_df %>% \n  drop_na() %>% \n  favstats(time_in_seconds ~ gender, data = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  gender  min      Q1 median       Q3    max     mean       sd      n missing\n1      M 3600 96536.5 115845 149761.5 288000 123271.1 37615.42 101643       0\n2      W 9191 96695.0 107062 131464.0 296806 117296.5 34604.26  18341       0\n```\n\n\n:::\n\n```{.r .cell-code}\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) %>%\n  crosstable::as_flextable()\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-44d3ff0e{table-layout:auto;}.cl-44cc8dc8{font-family:'Arial';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-44cc8ddc{font-family:'Arial';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-44cf5a58{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-44cf5a6c{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-44cf707e{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf7088{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf7089{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf7092{background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf7093{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf709c{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf709d{background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-44cf709e{background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-44d3ff0e'><thead><tr style=\"overflow-wrap:break-word;\"><th  rowspan=\"2\"class=\"cl-44cf707e\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">label</span></p></th><th  rowspan=\"2\"class=\"cl-44cf707e\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">variable</span></p></th><th  colspan=\"3\"class=\"cl-44cf7088\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">gender</span></p></th></tr><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-44cf7089\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">M</span></p></th><th class=\"cl-44cf7089\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">W</span></p></th><th class=\"cl-44cf7089\"><p class=\"cl-44cf5a58\"><span class=\"cl-44cc8dc8\">NA</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"4\"class=\"cl-44cf7092\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">time_in_seconds</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Min / Max</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">3600.0 / 2.9e+05</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">9191.0 / 3.0e+05</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">8131.0 / 2.2e+05</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Med [IQR]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.2e+05 [9.7e+04;1.5e+05]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.1e+05 [9.7e+04;1.3e+05]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.2e+05 [9.9e+04;1.5e+05]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Mean (std)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.2e+05 (3.8e+04)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.2e+05 (3.5e+04)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">1.2e+05 (4.4e+04)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf7092\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">N (NA)</span></p></td><td class=\"cl-44cf7092\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">101643 (15073)</span></p></td><td class=\"cl-44cf7092\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">18341 (2716)</span></p></td><td class=\"cl-44cf7092\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">28 (2)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"4\"class=\"cl-44cf709c\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">age</span></p></td><td class=\"cl-44cf709d\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Min / Max</span></p></td><td class=\"cl-44cf709d\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">0 / 133.0</span></p></td><td class=\"cl-44cf709d\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">0 / 81.0</span></p></td><td class=\"cl-44cf709d\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">29.0 / 59.0</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Med [IQR]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">47.0 [40.0;53.0]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">45.0 [39.0;52.0]</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">40.5 [36.0;50.5]</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">Mean (std)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">46.4 (10.2)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">45.3 (9.7)</span></p></td><td class=\"cl-44cf7093\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">41.7 (9.0)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-44cf709e\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">N (NA)</span></p></td><td class=\"cl-44cf709e\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">116716 (0)</span></p></td><td class=\"cl-44cf709e\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">21057 (0)</span></p></td><td class=\"cl-44cf709e\"><p class=\"cl-44cf5a6c\"><span class=\"cl-44cc8ddc\">30 (0)</span></p></td></tr></tbody></table></div>\n```\n\n:::\n\n```{.r .cell-code}\n#drop_na basically removes any rows with NULL or missing data\n#The tilde~ in favstats separates column data from row data\n#In this example, it will make a separate row for each gender (Only 2 Rows ehehe) & give favstats (mean,median) about Time variable for each gender\n\n#So Crosstable is like Drop_na but you can have the stats as subrows under a variable row. I.E It compares subcategories of variables across stats (The variables on left side of tilde~ become rows & the subgroups under the variable on right side of tilde~ become columns), i.e. (Here Time & Age are variables on Y Axis & Stats as subrows. It has Gender as a primary column & M/F as subcolumns)\n\n#The Flex_table simply makes the table in a readable form\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(crosstable)\ncrosstable(time_in_seconds + age ~ gender, data = rank_df) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 6\n  .id             label           variable   M                       W     `NA` \n  <chr>           <chr>           <chr>      <chr>                   <chr> <chr>\n1 time_in_seconds time_in_seconds Min / Max  3600.0 / 2.9e+05        9191… 8131…\n2 time_in_seconds time_in_seconds Med [IQR]  1.2e+05 [9.7e+04;1.5e+… 1.1e… 1.2e…\n3 time_in_seconds time_in_seconds Mean (std) 1.2e+05 (3.8e+04)       1.2e… 1.2e…\n4 time_in_seconds time_in_seconds N (NA)     101643 (15073)          1834… 28 (…\n5 age             age             Min / Max  0 / 133.0               0 / … 29.0…\n6 age             age             Med [IQR]  47.0 [40.0;53.0]        45.0… 40.5…\n7 age             age             Mean (std) 46.4 (10.2)             45.3… 41.7…\n8 age             age             N (NA)     116716 (0)              2105… 30 (…\n```\n\n\n:::\n\n```{.r .cell-code}\n#Without using the Flex_table command\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Which countries host the maximum number of races? \n\nrace_df %>%\n  count(country) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 2\n   country            n\n   <chr>          <int>\n 1 United States    438\n 2 United Kingdom   110\n 3 France            56\n 4 Australia         46\n 5 Sweden            46\n 6 China             45\n 7 Canada            32\n 8 Spain             27\n 9 Japan             24\n10 Poland            23\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Which countries send the maximum number of participants??\n\nrank_df %>%\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 133 × 2\n   nationality     n\n   <chr>       <int>\n 1 USA         47259\n 2 FRA         28905\n 3 GBR         11076\n 4 JPN          6729\n 5 ESP          5478\n 6 CHN          4744\n 7 CAN          2822\n 8 ITA          2794\n 9 SWE          2293\n10 AUS          1683\n# ℹ 123 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Which countries have the maximum number of winners (top 3 ranks)?\n\nrank_df %>%\n  filter(rank %in% c(1, 2, 3)) %>%\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 69 × 2\n   nationality     n\n   <chr>       <int>\n 1 USA          1240\n 2 GBR           347\n 3 FRA           210\n 4 AUS           140\n 5 CAN           132\n 6 CHN           128\n 7 SWE           124\n 8 ESP           113\n 9 JPN            94\n10 ITA            79\n# ℹ 59 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n#Remember in c(i,j,k) , the 'c' combines the elements inside & treats it as a list. So then it checks if the rank is included in the whole list using the %in% command.\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Which countries have had the most top-3 finishes in the longest distance race?\n\n#Here we see we have ranks in one dataset, and race details in another! How do we do this now? We have to JOIN the two data frames into one data frame, using a common variable that uniquely identifies observations in both datasets.\n\n\nlongest_races <- race_df %>%\n  slice_max(n = 5, order_by = distance) # Longest distance races\nlongest_races\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  race_year_id event     race  city  country date       start_time participation\n         <dbl> <chr>     <chr> <chr> <chr>   <date>     <time>     <chr>        \n1        68776 Ultra To… Ut4M… Gren… France  2021-07-16 18:00      Solo         \n2        55551 Ultra Tr… Inth… Chom… Thaila… 2020-02-14 10:00      solo         \n3         7484 Le TREG®… LE T… Fada  Chad    2015-02-06 00:00      solo         \n4         7594 THE GREA… 100 … Pato… Austra… 2014-09-13 00:00      Solo         \n5        71066 ULTRA 01  Ultr… Oyon… France  2021-07-09 18:00      solo         \n6        23565 EstrelAç… Estr… Penh… Portug… 2017-10-06 18:00      Solo         \n# ℹ 5 more variables: distance <dbl>, elevation_gain <dbl>,\n#   elevation_loss <dbl>, aid_stations <dbl>, participants <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\nlongest_races %>%\n  left_join(., rank_df, by = \"race_year_id\") %>% \n  # total participants in longest 4 races\n  \n  #The . on left side of ~ basically considers the 'aforementioned' dataset, which in this case is race_df. Since we already told it to consider race_df in longest_races, we don't have to specify the name race_df again.\n  \n  filter(rank %in% c(1:10)) %>% # Top 10 ranks\n  count(nationality) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 2\n  nationality     n\n  <chr>       <int>\n1 FRA            26\n2 AUS             9\n3 POR             8\n4 THA             8\n5 BEL             1\n6 BRA             1\n7 ESP             1\n8 MAS             1\n9 RUS             1\n```\n\n\n:::\n\n```{.r .cell-code}\n#Join function connects both datasets, similar to SQL\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Familiar Histogram\n#Bins is number of classes\n\nrank_df %>%\n  gf_histogram(~time_in_seconds, bins = 75) %>%\n  gf_labs(title = \"Histogram of Race Times\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Removed 17791 rows containing non-finite outside the scale range\n(`stat_bin()`).\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Time 1e+05 seconds basically means \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#What is the distribution of race distances?\n\n\nrace_df %>%\n  gf_histogram(~distance, bins = 50) %>%\n  gf_labs(title = \"Histogram of Race Distances\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#The races with 0 distance were probably cancelled\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#For all races that have a distance around 150, what is the distribution of finishing times? Can these be split/facetted using start_time of the race (i.e. morning / evening) ?\n\n\n\nrace_times <- race_df %>%\n  count(start_time) %>%\n  arrange(desc(n))\nrace_times\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 39 × 2\n   start_time     n\n   <time>     <int>\n 1 00:00        513\n 2 06:00        114\n 3 08:00         63\n 4 10:00         60\n 5 07:00         58\n 6 18:00         50\n 7 05:00         48\n 8 12:00         38\n 9 04:00         30\n10 09:00         27\n# ℹ 29 more rows\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Let’s convert start_time into a factor with levels: early_morning(0200:0600), late_morning(0600:1000), midday(1000:1400), afternoon(1400: 1800), evening(1800:2200), and night(2200:0200)\n\n\n\nrace_start_factor <- race_df %>%\n  filter(distance == 0) %>% # Races that actually took place\n  mutate(\n    start_day_time =\n      case_when(\n        start_time > hms(\"02:00:00\") &\n          start_time <= hms(\"06:00:00\") ~ \"early_morning\",\n        start_time > hms(\"06:00:01\") &\n          start_time <= hms(\"10:00:00\") ~ \"late_morning\",\n        start_time > hms(\"10:00:01\") &\n          start_time <= hms(\"14:00:00\") ~ \"mid_day\",\n        start_time > hms(\"14:00:01\") &\n          start_time <= hms(\"18:00:00\") ~ \"afternoon\",\n        start_time > hms(\"18:00:01\") &\n          start_time <= hms(\"22:00:00\") ~ \"evening\",\n        start_time > hms(\"22:00:01\") &\n          start_time <= hms(\"23:59:59\") ~ \"night\",\n        start_time >= hms(\"00:00:00\") &\n          start_time <= hms(\"02:00:00\") ~ \"postmidnight\",\n        .default = \"other\"\n      )\n  ) %>%\n  mutate(\n    start_day_time =\n      as_factor(start_day_time) %>%\n        fct_collapse(\n          .f = .,\n          night = c(\"night\", \"postmidnight\")\n        )\n  )\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `start_day_time = `%>%`(...)`.\nCaused by warning:\n! Unknown levels in `f`: night\n```\n\n\n:::\n\n```{.r .cell-code}\n##\n# Join with rank_df\nrace_start_factor %>%\n  left_join(rank_df, by = \"race_year_id\") %>%\n  drop_na(time_in_seconds) %>%\n  gf_histogram(\n    ~time_in_seconds,\n    bins = 75,\n    fill = ~start_day_time,\n    color = ~start_day_time,\n    alpha = 0.5\n  ) %>%\n  gf_facet_wrap(vars(start_day_time), ncol = 2, scales = \"free_y\") %>%\n  gf_labs(title = \"Race Times by Start-Time\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#We see that finish times tend to be longer for afternoon and evening start races; these are lower for early morning and night time starts. Mid-day starts show a curious double hump in finish times that should be studied.\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}