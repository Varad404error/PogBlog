---
title: "Counting"
author: "Varad Akolkar"
---

```{r}
#| label: setup
library(tidyverse)
library(ggformula)
library(mosaic)
library(kableExtra)
library(skimr)
```

## Taxi Data in United States

```{r}
taxi <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/modeldata/taxi.csv")

head(taxi)
```

```{r}
inspect(taxi)
```

```{r}
glimpse(taxi)
```

```{r}
skim(taxi)
```

#### We need to modify a few variables such as DoW, Local & Months into Factors so we can process them

```{r}
taxi_modified <- taxi %>% 
  mutate(
    dow= factor(dow,
    levels= c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),
    labels= c("Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"),          
    ordered= TRUE
    ),
    
    
    local= factor(local,
    levels= c("yes","no"),
    labels= c("Yes","No"),
    ordered= TRUE
    ),
    
    month= factor(month,
    levels= c("Jan", "Feb", "Mar", "Apr"),
    labels= c("Jan", "Feb", "Mar", "Apr"),
    ordered= TRUE
    )
  )

glimpse(taxi_modified)
```

### Now Let's Plot Stuff...

#### Counting rides with or without a Tip:

```{r}

gf_bar(~ tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")

#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data from
```

#### Now we have to check if the tips are local or not. So we are adding another variable to the graph, by changing the color...

```{r}

gf_bar(~ tip, color = ~local, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")


#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only. [Color= ~Variable_Name] Tells which variable to colorize

#Gf labs is for altering text & titles
```

#### Does not look good, does it? Because the color command is only for outline. If we want to color the full bar, we use the 'fill' command...

```{r}

gf_bar(~ tip, fill = ~local, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")


#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#gf_labs is for altering text & titles
```

#### Much Better!

#### What if we want the data of all local rides & then see how much of them tipped? Let us try that.

```{r}

gf_bar(~ local, fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")

#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#gf_labs is for altering text & titles
```

#### As you can see, we just put the 'locality' variable on X Axis. We can change graphs using these tools, if we have the right questions to ask.

#### Just how many variables can we add to the graph? You can only use one on each axis, one for outline color & one for fill...

```{r}

gf_bar(~ dow, fill = ~tip, color = ~local, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")

#Here we have used Color & Fill both at the same time

#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#gf_labs is for altering text & titles
```

#### That... is chaotic good.

#### Let's keep it simple and keep the Tips on X Axis and segregate the Locality by filled color. But I don't what the color divided graphs on top of each other. How to shift them? We use the Dodge command;

```{r}


gf_bar(~ tip, fill = ~local,position="dodge", data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")


#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#The Position function decides position of bars
#TThe 'Dodge' command under position places colorized bar graphs beside each other instead of on top

#gf_labs is for altering text & titles
```

#### How convenient.

#### But you might be thinking, what if I want to know actually how much of the tips are coming from local rides and how many outside? You want to know the proportion, not the actual numbers. For that, we can make bars the same size and then see the ratios. (Note that in this case, we cannot use the dodge command)

```{r}


gf_bar(~ tip, fill = ~local, position="fill", data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")

#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#The Position function decides position of bars
#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top

#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages

##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION

#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE
#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE

#gf_labs is for altering text & titles


```

#### Now we can actually see that whenever the cab is tipped, it is more likely to be interstate & not local. And also, whenever it is not tipped, it is slightly more likely to be local. But this is not enough to conclude that local rides always have less tips.

#### Let us now see proportions of tips according to taxi services.

```{r}

gf_bar(~ company, fill = ~tip, position="fill", data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### Looks like Chicago Independence is most tipped by proportion in general.

#### How about we factor in the hour of day?

```{r}

gf_bar(~hour , fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### According to the graph, most tips happen in the afternoon & least at midnight. But this is because most rides happen in the afternoon! Let us see the proportions again.

```{r}

gf_bar(~hour , fill = ~tip,position = "fill", data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### Well well well. Looks like the highest proportion of tips actually occur when the driver & the taxi both burn midnight oil... People are more grateful for catching a ride at these hours.

#### Looking at Tips by Month;

```{r}

gf_bar(~month , fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### Again, proportions;

```{r}

gf_bar(~month , fill = ~tip, position='fill', data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### Eh, the proportions of Tips is basically same in all months of the first quadrimester of the year.

#### Now, I want to see the number of tips on every day of every month separately:(E.g. Jan Mondays vs Feb Mondays)

```{r}

gf_bar(~month | dow , fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")

#The quantity on left side of tilde ~ sign is the data on y axis.If it is unspecified, the default data is number of elements (Count)
#The data on left side of tilde~ sign is data on x axis

#When you put 2 variables after tilde~, [Var_1 | Var_2], it makes separate graphs based on Var_2 & each graph has Var_1 on X Axis

#Data='Database_Name' tells it where to find data.

#The Color function divides the variables on x axis by changing the color of the OUTLINE only.[Color= ~Variable_Name] Tells which variable to colorize

#The Fill function divides the variables on x axis by changing the color of the WHOLE BAR [Fill= ~Variable_Name] Tells which variable to colorize fully
#Fill & Color thus do same thing but for whole bar or only outline

#The Position function decides position of bars
#TThe 'Dodge' command (under Position function) places colorized bar graphs beside each other instead of on top

#The 'Fill' command (under Position function) makes all the bars proportionate & equally sized so you can compare ratios & percentages

##DO NOT CONFUSE FILL COMMAND WITH FILL FUNCTION

#FILL FUNCTION COLORIZES FULL BAR BY A VARIABLE
#FILL COMMAND (UNDER POSITION FUNCTION) MAKES BARS PROPORTIONATE


#gf_labs is for altering text & titles

```

#### Perhaps if we wanted to see an average per month, we should sort the months according to that and put days on X-Axis instead?

```{r}

gf_bar(~dow | month , fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts of Tips")
```

#### Now instead of months, let us separate it by Taxi Services

```{r}

gf_bar(~dow | company , fill = ~tip, data = taxi_modified) %>%
  gf_labs(title = "Tips by Company & Day")
```

#### And now I want to see the actual number of taxi rides per day for each service and not the tips;

```{r}

gf_bar(~dow | company ,  data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts")
```

#### Looks like among the listed services, (not the Others) Taxi Affiliation Services have most rides on average in a week.

#### What if switched variables on X-Axis & the graphs?

```{r}

gf_bar(~company | dow ,  data = taxi_modified) %>%
  gf_labs(title = "Plot 1A: Counts")
```

#### Woops. While this data may be true, it might not be usually be required. Also it is PAINFUL to read.

#### If I want to see the proportion of Tips per Day & by Company?

```{r}

gf_bar(~dow | company , fill = ~tip, position = "fill", data = taxi_modified) %>%
  gf_labs(title = "Tips Proportion by Company & Day")
```

#### From this, can we say that Sunday is most tipped day (proportion of tips to number of rides) for every service? Yeah.

#### Would be a shame if someone switched the location of variables...

```{r}


gf_bar(~company | dow , fill = ~tip, position = "fill", data = taxi_modified) %>%
  gf_labs(title = "Tips Proportion by Company & Day")
```

#### *\*Evil Laughter*\* Read the graph at your own risk.

### ====================================================================

## Now, onto a new data set:

## CHESS!

```{r}


chesso <- read_delim(file = '../../datasets/openings.csv', delim = ',')
chesso

names(chesso)
```

#### Removing the blank column & glimpsing the database...

```{r}

chesso_modified <-chesso %>% 
  select(-1)
chesso_modified
```

```{r}

glimpse(chesso_modified)
```

```{r}
inspect(chesso_modified)
```

```{r}

skim(chesso_modified)
```

#### Now, I want to find all the variations of a particular opening. So I will have to filter the rows which contain that name in the Opening column, but it is not their entire name. How to do that??

```{r}

## HOW TO FILTER OPENINGS WHICH INCLUDE A SPECIFIC NAME BUT NOT WHOLE NAME IS SAME?
## E.g. ALL OPENING VARIATIONS WITH WORDS 'NIMZO-INDIAN' IN THEM? 

#chesso_modified %>% filter(dplyr::contains(vars = Opening, "Nimzo-Indian Defense"))
#This does not work
```

```{r}

#chesso_modified %>% select(contains('Nimzo-Indian Defense'))
#This does not work
```

```{r}
chesso_modified %>% filter(grepl('Nimzo-Indian Defense', Opening))

#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN

```

#### There we go! We can also create a mini database which contain all variations of the Vienna Opening:

![Vienna Opening](images/Vienna.png){width="300"}

```{r}

chesso_vienna <- chesso_modified %>% filter(grepl('Vienna Game', Opening))

#HELL YES. YOU CAN NOW FILTER ROWS WITH A CERTAIN STRING IN A SPECIFIC COLUMN

(chesso_vienna) #Database of all variations under the Vienna Game
```

#### Which variation of Vienna is played the most?

```{r}

chesso_vienna %>% arrange(desc(`Num Games`))

```

#### So apparently the Mieses- Falkbeer Variation is played most often among all Vienna Games:

![Vienna Game Mieses, Falkbeer Variation](images/Mieses.png){width="300"}

#### Let's plot the Opening v/s Number of Games Bar Graph...

```{r}

#chesso_vienna %>%
  #gf_histogram( ~ `Num Games` , fill = ~ Colour) %>%
 # gf_labs(
  #  title = "Openings",
  #  caption = "Vienna"
 # )

#This code does not give desired result
```

```{r}
#chesso_vienna %>% 
 # gf_line(Opening ~ `Num Games`)

#This code does not give desired result
```

```{r}

 
  #gf_bar( Opening ~ 'Num Games', data = chesso_vienna)

  #This code does not give desired result
```

```{r}
library(ggplot2)

# Assuming 'chesso_vienna' has a column 'Opening' for opening names and 'Num_Games' for the number of games
ggplot(chesso_vienna, aes(x = Opening, y = `Num Games`)) +
  geom_bar(stat = "identity") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +  # Rotate x-axis labels if needed
  labs(x = "Opening Names", y = "Number of Games", title = "Number of Games per Opening")


#I used ChatGPT to write this code as I could not figure it myself after numerous tries
```

#### Finally! We have got the information of all openings vs the amount of times they were played.
